
Amit Embedded Project (TTL-Bluetooth).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ac  00800060  00000a56  00000aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080020c  0080020c  00000c96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c2  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dc  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fc  00000000  00000000  000028a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  000031a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  000033ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f1  00000000  00000000  000038f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003fe6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 30       	cpi	r26, 0x0C	; 12
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	ac e0       	ldi	r26, 0x0C	; 12
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 30       	cpi	r26, 0x0D	; 13
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  8a:	0c 94 29 05 	jmp	0xa52	; 0xa52 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <admin_user_check>:
	}
	return false;
}

void system_breakdown(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	21 c0       	rjmp	.+66     	; 0xe0 <admin_user_check+0x4e>
  9e:	fb 01       	movw	r30, r22
  a0:	ee 0f       	add	r30, r30
  a2:	ff 1f       	adc	r31, r31
  a4:	ee 0f       	add	r30, r30
  a6:	ff 1f       	adc	r31, r31
  a8:	e4 56       	subi	r30, 0x64	; 100
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	e2 0f       	add	r30, r18
  ae:	f3 1f       	adc	r31, r19
  b0:	e0 81       	ld	r30, Z
  b2:	de 01       	movw	r26, r28
  b4:	a2 0f       	add	r26, r18
  b6:	b3 1f       	adc	r27, r19
  b8:	9c 91       	ld	r25, X
  ba:	e9 13       	cpse	r30, r25
  bc:	0f c0       	rjmp	.+30     	; 0xdc <admin_user_check+0x4a>
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	44 30       	cpi	r20, 0x04	; 4
  c4:	51 05       	cpc	r21, r1
  c6:	91 f0       	breq	.+36     	; 0xec <admin_user_check+0x5a>
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <admin_user_check+0x44>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	24 30       	cpi	r18, 0x04	; 4
  d8:	31 05       	cpc	r19, r1
  da:	0c f3       	brlt	.-62     	; 0x9e <admin_user_check+0xc>
  dc:	6f 5f       	subi	r22, 0xFF	; 255
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	63 30       	cpi	r22, 0x03	; 3
  e2:	71 05       	cpc	r23, r1
  e4:	a4 f3       	brlt	.-24     	; 0xce <admin_user_check+0x3c>
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	9f ef       	ldi	r25, 0xFF	; 255
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <admin_user_check+0x5e>
  ec:	86 2f       	mov	r24, r22
  ee:	97 2f       	mov	r25, r23
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <admin_pass_check>:
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	18 c0       	rjmp	.+48     	; 0x130 <admin_pass_check+0x3a>
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	e2 0f       	add	r30, r18
 10c:	f3 1f       	adc	r31, r19
 10e:	e0 5a       	subi	r30, 0xA0	; 160
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	e4 0f       	add	r30, r20
 114:	f5 1f       	adc	r31, r21
 116:	20 81       	ld	r18, Z
 118:	fb 01       	movw	r30, r22
 11a:	e4 0f       	add	r30, r20
 11c:	f5 1f       	adc	r31, r21
 11e:	90 81       	ld	r25, Z
 120:	29 13       	cpse	r18, r25
 122:	0b c0       	rjmp	.+22     	; 0x13a <admin_pass_check+0x44>
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	a3 30       	cpi	r26, 0x03	; 3
 128:	b1 05       	cpc	r27, r1
 12a:	49 f0       	breq	.+18     	; 0x13e <admin_pass_check+0x48>
 12c:	4f 5f       	subi	r20, 0xFF	; 255
 12e:	5f 4f       	sbci	r21, 0xFF	; 255
 130:	43 30       	cpi	r20, 0x03	; 3
 132:	51 05       	cpc	r21, r1
 134:	2c f3       	brlt	.-54     	; 0x100 <admin_pass_check+0xa>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	08 95       	ret
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret

00000142 <admin_funcChoice>:
	while(1);
}

void admin_funcChoice(void)
{
	UART_printText("\r\n");
 142:	8f ed       	ldi	r24, 0xDF	; 223
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("Press the following number for the function you need");
 14a:	8c ee       	ldi	r24, 0xEC	; 236
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("\r\n");
 152:	8f ed       	ldi	r24, 0xDF	; 223
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("1: control the door");
 15a:	81 e2       	ldi	r24, 0x21	; 33
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("\r\n");
 162:	8f ed       	ldi	r24, 0xDF	; 223
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("2: control the lights");
 16a:	85 e3       	ldi	r24, 0x35	; 53
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("\r\n");
 172:	8f ed       	ldi	r24, 0xDF	; 223
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("3: monitor the tempereture");
 17a:	8b e4       	ldi	r24, 0x4B	; 75
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("\r\n");
 182:	8f ed       	ldi	r24, 0xDF	; 223
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("4: set an alarm");
 18a:	86 e6       	ldi	r24, 0x66	; 102
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("\r\n");
 192:	8f ed       	ldi	r24, 0xDF	; 223
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("5: edit the list of users");
 19a:	86 e7       	ldi	r24, 0x76	; 118
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_printText("\r\n");
 1a2:	8f ed       	ldi	r24, 0xDF	; 223
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
 1aa:	08 95       	ret

000001ac <admin_callFunc>:
}

void admin_callFunc(char num)
{
	uint8 x;
	switch(num)
 1ac:	81 33       	cpi	r24, 0x31	; 49
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <admin_callFunc+0xa>
 1b0:	82 33       	cpi	r24, 0x32	; 50
 1b2:	91 f0       	breq	.+36     	; 0x1d8 <admin_callFunc+0x2c>
 1b4:	08 95       	ret
	{
		case '1': UART_printText("1: open the door \r\n"); UART_printText("2: close door \r\n"); x= UART_receive(); controlDoor(x); UART_printText("\r\n"); /*door control functions*/ break;
 1b6:	80 e9       	ldi	r24, 0x90	; 144
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
 1be:	84 ea       	ldi	r24, 0xA4	; 164
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
 1c6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UART_receive>
 1ca:	0e 94 87 02 	call	0x50e	; 0x50e <controlDoor>
 1ce:	8f ed       	ldi	r24, 0xDF	; 223
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
 1d6:	08 95       	ret
		case '2': UART_printText("choose led 1 to 4"); /*light control functions*/ break;
 1d8:	85 eb       	ldi	r24, 0xB5	; 181
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
 1e0:	08 95       	ret

000001e2 <__vector_1>:
		case '4': /*set alarm*/ break;
		case '5': /*EEPROM editing*/ break;
	}
}

ISR(INT0_vect){
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	4f 93       	push	r20
 1f6:	5f 93       	push	r21
 1f8:	6f 93       	push	r22
 1fa:	7f 93       	push	r23
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	28 97       	sbiw	r28, 0x08	; 8
 212:	de bf       	out	0x3e, r29	; 62
 214:	cd bf       	out	0x3d, r28	; 61
	char user[4];                                                          // declare a variable to store the user and password
	char pass[4];
	int userNum;                                                                       // declare a variable to hold the number of the user
	UART_printText("\r\n Enter your username. \r\n");                                        // ask the user for his username
 216:	87 ec       	ldi	r24, 0xC7	; 199
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	UART_readString(4, user);                                                          // hold the given username in "user"
 21e:	be 01       	movw	r22, r28
 220:	6f 5f       	subi	r22, 0xFF	; 255
 222:	7f 4f       	sbci	r23, 0xFF	; 255
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	0e 94 da 01 	call	0x3b4	; 0x3b4 <UART_readString>
	UART_printText("\r\n");
 22a:	8f ed       	ldi	r24, 0xDF	; 223
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
	userNum = admin_user_check(user);                                                  // check if the given username exist and return the number of the user in the list
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	0e 94 49 00 	call	0x92	; 0x92 <admin_user_check>
 23a:	8c 01       	movw	r16, r24
	if(userNum == -1){togBit(PORTC, 7); validityFlag= false;}                          // if username doesn't exist toggle the wrong username 'led1' and put the access flag to 0 for no access
 23c:	0f 3f       	cpi	r16, 0xFF	; 255
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	18 07       	cpc	r17, r24
 242:	31 f4       	brne	.+12     	; 0x250 <__vector_1+0x6e>
 244:	85 b3       	in	r24, 0x15	; 21
 246:	80 58       	subi	r24, 0x80	; 128
 248:	85 bb       	out	0x15, r24	; 21
 24a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 24e:	24 c0       	rjmp	.+72     	; 0x298 <__vector_1+0xb6>
	else{                                                                              // else if exist
		UART_printText("Enter your password.\r\n");                                        // ask the user for his password
 250:	82 ee       	ldi	r24, 0xE2	; 226
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
		UART_readString(3, pass);                                                      // hold the given password in "pass"
 258:	be 01       	movw	r22, r28
 25a:	6b 5f       	subi	r22, 0xFB	; 251
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 da 01 	call	0x3b4	; 0x3b4 <UART_readString>
		UART_printText("\r\n");
 264:	8f ed       	ldi	r24, 0xDF	; 223
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
		if(admin_pass_check(userNum, pass)){togBit(PORTD, 3); validityFlag= true;}     // compare if given "pass" match his password in the list if yes toggle the right password 'led2' and put the access flag to 1 to allow access
 26c:	be 01       	movw	r22, r28
 26e:	6b 5f       	subi	r22, 0xFB	; 251
 270:	7f 4f       	sbci	r23, 0xFF	; 255
 272:	80 2f       	mov	r24, r16
 274:	0e 94 7b 00 	call	0xf6	; 0xf6 <admin_pass_check>
 278:	88 23       	and	r24, r24
 27a:	41 f0       	breq	.+16     	; 0x28c <__vector_1+0xaa>
 27c:	92 b3       	in	r25, 0x12	; 18
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	89 27       	eor	r24, r25
 282:	82 bb       	out	0x12, r24	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
 28a:	06 c0       	rjmp	.+12     	; 0x298 <__vector_1+0xb6>
		else{togBit(PORTC, 2); validityFlag= false;}                                   // else if given password is wrong toggle the wrong password 'led0' and put the access flag to 0 for no access
 28c:	95 b3       	in	r25, 0x15	; 21
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	89 27       	eor	r24, r25
 292:	85 bb       	out	0x15, r24	; 21
 294:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
	}
 298:	28 96       	adiw	r28, 0x08	; 8
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <externalInterrupt_init>:
#include "eldod_Interrupt.h"

short leds[]= {1,2,3}, i=-1;

void externalInterrupt_init(short ExInt)
{
 2ce:	9c 01       	movw	r18, r24
	sei();//       enable global interrupt (GIE)
 2d0:	78 94       	sei
	//                         _
	setBit(MCUCR,ISC00);//      |  interrupt flag will set in the rising edge
 2d2:	95 b7       	in	r25, 0x35	; 53
 2d4:	91 60       	ori	r25, 0x01	; 1
 2d6:	95 bf       	out	0x35, r25	; 53
	setBit(MCUCR,ISC01);//     _|
 2d8:	95 b7       	in	r25, 0x35	; 53
 2da:	92 60       	ori	r25, 0x02	; 2
 2dc:	95 bf       	out	0x35, r25	; 53
	
	switch(ExInt)//      enable the interrupt request depending on which is given to the function
 2de:	21 30       	cpi	r18, 0x01	; 1
 2e0:	31 05       	cpc	r19, r1
 2e2:	61 f0       	breq	.+24     	; 0x2fc <externalInterrupt_init+0x2e>
 2e4:	22 30       	cpi	r18, 0x02	; 2
 2e6:	31 05       	cpc	r19, r1
 2e8:	81 f0       	breq	.+32     	; 0x30a <externalInterrupt_init+0x3c>
 2ea:	23 2b       	or	r18, r19
 2ec:	a1 f4       	brne	.+40     	; 0x316 <externalInterrupt_init+0x48>
	{
	  case 0: setBit(GICR,INT0);  clrBit(DDRD, 2); break;//    enable interrupt request 0 and set its pin as input
 2ee:	8b b7       	in	r24, 0x3b	; 59
 2f0:	80 64       	ori	r24, 0x40	; 64
 2f2:	8b bf       	out	0x3b, r24	; 59
 2f4:	81 b3       	in	r24, 0x11	; 17
 2f6:	8b 7f       	andi	r24, 0xFB	; 251
 2f8:	81 bb       	out	0x11, r24	; 17
 2fa:	08 95       	ret
	  case 1: setBit(GICR, INT1); clrBit(DDRD, 3); break;//    enable interrupt request 1 and set its pin as input
 2fc:	8b b7       	in	r24, 0x3b	; 59
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	8b bf       	out	0x3b, r24	; 59
 302:	81 b3       	in	r24, 0x11	; 17
 304:	87 7f       	andi	r24, 0xF7	; 247
 306:	81 bb       	out	0x11, r24	; 17
 308:	08 95       	ret
	  case 2: setBit(GICR, INT2); clrBit(DDRB, 2); break;//    enable interrupt request 2 and set its pin as input
 30a:	8b b7       	in	r24, 0x3b	; 59
 30c:	80 62       	ori	r24, 0x20	; 32
 30e:	8b bf       	out	0x3b, r24	; 59
 310:	87 b3       	in	r24, 0x17	; 23
 312:	8b 7f       	andi	r24, 0xFB	; 251
 314:	87 bb       	out	0x17, r24	; 23
 316:	08 95       	ret

00000318 <UART_init>:


/* function to initialize UART communication protocol */

void UART_init(unsigned int baud, unsigned long int freq)
{
 318:	cf 92       	push	r12
 31a:	df 92       	push	r13
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
	int ubrr= round((long double)freq/(16*(float)baud))-1;//           calculation for the UBRRL and UBRRH values to achieve the wanted baud rate with the used frequency
 326:	cb 01       	movw	r24, r22
 328:	ba 01       	movw	r22, r20
 32a:	0e 94 b8 03 	call	0x770	; 0x770 <__floatunsisf>
 32e:	6b 01       	movw	r12, r22
 330:	7c 01       	movw	r14, r24
 332:	be 01       	movw	r22, r28
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 b8 03 	call	0x770	; 0x770 <__floatunsisf>
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e8       	ldi	r20, 0x80	; 128
 342:	51 e4       	ldi	r21, 0x41	; 65
 344:	0e 94 6f 04 	call	0x8de	; 0x8de <__mulsf3>
 348:	9b 01       	movw	r18, r22
 34a:	ac 01       	movw	r20, r24
 34c:	c7 01       	movw	r24, r14
 34e:	b6 01       	movw	r22, r12
 350:	0e 94 10 03 	call	0x620	; 0x620 <__divsf3>
 354:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <round>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	40 e8       	ldi	r20, 0x80	; 128
 35e:	5f e3       	ldi	r21, 0x3F	; 63
 360:	0e 94 9e 02 	call	0x53c	; 0x53c <__subsf3>
 364:	0e 94 82 03 	call	0x704	; 0x704 <__fixsfsi>
	
	clrBit(DDRD, 0);//                 setting Rx pin (receiver) to input
 368:	21 b3       	in	r18, 0x11	; 17
 36a:	2e 7f       	andi	r18, 0xFE	; 254
 36c:	21 bb       	out	0x11, r18	; 17
	setBit(DDRD, 1);//                 setting Tx pin (transmitter) to output
 36e:	21 b3       	in	r18, 0x11	; 17
 370:	22 60       	ori	r18, 0x02	; 2
 372:	21 bb       	out	0x11, r18	; 17
	
	if(ubrr<255) UBRRL= (unsigned char)ubrr;//     if ubrr value less than 255 the it can be stored directly in UBRRL register only
 374:	6f 3f       	cpi	r22, 0xFF	; 255
 376:	71 05       	cpc	r23, r1
 378:	14 f4       	brge	.+4      	; 0x37e <UART_init+0x66>
 37a:	69 b9       	out	0x09, r22	; 9
 37c:	02 c0       	rjmp	.+4      	; 0x382 <UART_init+0x6a>
	else{//                                   _    else if it is bigger than 255
		UBRRH= (unsigned char)ubrr;//          |
 37e:	60 bd       	out	0x20, r22	; 32
		UBRRL= (unsigned char)(ubrr>>8);//    _|   ubrr value will need to be divided in two parts bits with resolution>8 in UBRRH and rest in UBRRL
 380:	79 b9       	out	0x09, r23	; 9
	}
	
	UCSRA|= (0<<U2X) /*normal transmission speed*/;
 382:	8b b1       	in	r24, 0x0b	; 11
 384:	8b b9       	out	0x0b, r24	; 11
	
	UCSRB|= (1<<TXEN) | (1<<RXEN) /*enabling transmitting and receiving*/
 386:	8a b1       	in	r24, 0x0a	; 10
 388:	88 61       	ori	r24, 0x18	; 24
 38a:	8a b9       	out	0x0a, r24	; 10
	| (0<<UCSZ2) /*part of setting data bits to be 8*/;
	
	UCSRC|= (1<<URSEL) /*writing on UCSRC not UBRRH*/ | (0<<UMSEL) /*choosing asynchronous mode*/| (1<<UCSZ0) | (1<<UCSZ1) /*setting data bit to be 8*/| (0<<UPM0) | (0<<UPM1) /*using odd parity check*/| (0<<USBS) /*1 bit for stop*/;
 38c:	80 b5       	in	r24, 0x20	; 32
 38e:	86 68       	ori	r24, 0x86	; 134
 390:	80 bd       	out	0x20, r24	; 32
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	08 95       	ret

000003a0 <UART_receive>:

/* function to receive data through UART communication protocol */

char UART_receive(void)
{
	while(!readBit(UCSRA, RXC));//              hold program till making sure that the data to be received are waiting on the buffer
 3a0:	5f 9b       	sbis	0x0b, 7	; 11
 3a2:	fe cf       	rjmp	.-4      	; 0x3a0 <UART_receive>
	return UDR;//                               return the data received
 3a4:	8c b1       	in	r24, 0x0c	; 12
}
 3a6:	08 95       	ret

000003a8 <UART_transmit>:

/* function to transmit data through UART communication protocol */

void UART_transmit(char data)
{
	while(!readBit(UCSRA, UDRE));//             hold program till making sure that UDR not in a current process and ready to take data
 3a8:	5d 9b       	sbis	0x0b, 5	; 11
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <UART_transmit>
	UDR= data;//                                store the data on the UDR register
 3ac:	8c b9       	out	0x0c, r24	; 12
	while(!readBit(UCSRA, TXC));//              hold program till making sure that the UDR is empty and all the data bits has been sent
 3ae:	5e 9b       	sbis	0x0b, 6	; 11
 3b0:	fe cf       	rjmp	.-4      	; 0x3ae <UART_transmit+0x6>
}
 3b2:	08 95       	ret

000003b4 <UART_readString>:

void UART_readString(char length, char *text)    /* function used to read multiple characters through UART communication at once*/
{
 3b4:	cf 92       	push	r12
 3b6:	df 92       	push	r13
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	f8 2e       	mov	r15, r24
 3c4:	6b 01       	movw	r12, r22
	while(readBit(UCSRA, RXC)) UART_receive();
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <UART_readString+0x18>
 3c8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UART_receive>
 3cc:	5f 99       	sbic	0x0b, 7	; 11
 3ce:	fc cf       	rjmp	.-8      	; 0x3c8 <UART_readString+0x14>
 3d0:	c0 e0       	ldi	r28, 0x00	; 0
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <UART_readString+0x32>
	int i;
	for(i=0; i<length; i++){
		text[i] = UART_receive();
 3d6:	86 01       	movw	r16, r12
 3d8:	0c 0f       	add	r16, r28
 3da:	1d 1f       	adc	r17, r29
 3dc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UART_receive>
 3e0:	f8 01       	movw	r30, r16
 3e2:	80 83       	st	Z, r24

void UART_readString(char length, char *text)    /* function used to read multiple characters through UART communication at once*/
{
	while(readBit(UCSRA, RXC)) UART_receive();
	int i;
	for(i=0; i<length; i++){
 3e4:	21 96       	adiw	r28, 0x01	; 1
 3e6:	8f 2d       	mov	r24, r15
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	c8 17       	cp	r28, r24
 3ec:	d9 07       	cpc	r29, r25
 3ee:	9c f3       	brlt	.-26     	; 0x3d6 <UART_readString+0x22>
		text[i] = UART_receive();
	}
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	08 95       	ret

00000400 <UART_printText>:

void UART_printText(char text[])
{
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	8c 01       	movw	r16, r24
	for(int i=0; text[i]!='\0'; i++){
 40a:	c0 e0       	ldi	r28, 0x00	; 0
 40c:	d0 e0       	ldi	r29, 0x00	; 0
 40e:	03 c0       	rjmp	.+6      	; 0x416 <UART_printText+0x16>
		UART_transmit(text[i]);
 410:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <UART_transmit>
	}
}

void UART_printText(char text[])
{
	for(int i=0; text[i]!='\0'; i++){
 414:	21 96       	adiw	r28, 0x01	; 1
 416:	f8 01       	movw	r30, r16
 418:	ec 0f       	add	r30, r28
 41a:	fd 1f       	adc	r31, r29
 41c:	80 81       	ld	r24, Z
 41e:	81 11       	cpse	r24, r1
 420:	f7 cf       	rjmp	.-18     	; 0x410 <UART_printText+0x10>
		UART_transmit(text[i]);
	}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <main>:
#include "TimerPWM.h"


int main(void)
{
	setBit(DDRD, 3);
 42c:	81 b3       	in	r24, 0x11	; 17
 42e:	88 60       	ori	r24, 0x08	; 8
 430:	81 bb       	out	0x11, r24	; 17
	setBit(DDRC, 7);
 432:	84 b3       	in	r24, 0x14	; 20
 434:	80 68       	ori	r24, 0x80	; 128
 436:	84 bb       	out	0x14, r24	; 20
	setBit(DDRC, 2);
 438:	84 b3       	in	r24, 0x14	; 20
 43a:	84 60       	ori	r24, 0x04	; 4
 43c:	84 bb       	out	0x14, r24	; 20
	
	externalInterrupt_init(0);
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 67 01 	call	0x2ce	; 0x2ce <externalInterrupt_init>
	UART_init(4800, 1000000);
 446:	40 e4       	ldi	r20, 0x40	; 64
 448:	52 e4       	ldi	r21, 0x42	; 66
 44a:	6f e0       	ldi	r22, 0x0F	; 15
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	80 ec       	ldi	r24, 0xC0	; 192
 450:	92 e1       	ldi	r25, 0x12	; 18
 452:	0e 94 8c 01 	call	0x318	; 0x318 <UART_init>
	timer2_FPWM_init();
 456:	0e 94 45 02 	call	0x48a	; 0x48a <timer2_FPWM_init>
 45a:	0c c0       	rjmp	.+24     	; 0x474 <main+0x48>
	
    /* Replace with your application code */
    while (1)
    {
		while(readBit(PIND, 2) && validityFlag== true){        // while there is still a bluetooth connection and access was allowed (flag is 1)
			admin_funcChoice();                                // ask admin what does he want to do
 45c:	0e 94 a1 00 	call	0x142	; 0x142 <admin_funcChoice>
			adminChoice= UART_receive();                       // store the number of function he wants to do
 460:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UART_receive>
 464:	c8 2f       	mov	r28, r24
			UART_printText("\r\n");
 466:	8f ed       	ldi	r24, 0xDF	; 223
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
			admin_callFunc(adminChoice);                       // activate the function asked for
 46e:	8c 2f       	mov	r24, r28
 470:	0e 94 d6 00 	call	0x1ac	; 0x1ac <admin_callFunc>
	//UART_STR("please work");
	
    /* Replace with your application code */
    while (1)
    {
		while(readBit(PIND, 2) && validityFlag== true){        // while there is still a bluetooth connection and access was allowed (flag is 1)
 474:	82 9b       	sbis	0x10, 2	; 16
 476:	04 c0       	rjmp	.+8      	; 0x480 <main+0x54>
 478:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	71 f3       	breq	.-36     	; 0x45c <main+0x30>
			admin_funcChoice();                                // ask admin what does he want to do
			adminChoice= UART_receive();                       // store the number of function he wants to do
			UART_printText("\r\n");
			admin_callFunc(adminChoice);                       // activate the function asked for
		}
		if(!readBit(PIND, 2)) validityFlag= false;             // once connection is lost remove access again (flag is 0)
 480:	82 99       	sbic	0x10, 2	; 16
 482:	f8 cf       	rjmp	.-16     	; 0x474 <main+0x48>
 484:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 488:	f5 cf       	rjmp	.-22     	; 0x474 <main+0x48>

0000048a <timer2_FPWM_init>:
}

void servo_angle(float64 angle)
{
	float64 dutyCycle= (((angle/180)*0.07)+0.055);
	SetDutyCycle(dutyCycle);
 48a:	85 b5       	in	r24, 0x25	; 37
 48c:	88 60       	ori	r24, 0x08	; 8
 48e:	85 bd       	out	0x25, r24	; 37
 490:	85 b5       	in	r24, 0x25	; 37
 492:	80 64       	ori	r24, 0x40	; 64
 494:	85 bd       	out	0x25, r24	; 37
 496:	85 b5       	in	r24, 0x25	; 37
 498:	80 62       	ori	r24, 0x20	; 32
 49a:	85 bd       	out	0x25, r24	; 37
 49c:	85 b5       	in	r24, 0x25	; 37
 49e:	8e 7f       	andi	r24, 0xFE	; 254
 4a0:	85 bd       	out	0x25, r24	; 37
 4a2:	85 b5       	in	r24, 0x25	; 37
 4a4:	8d 7f       	andi	r24, 0xFD	; 253
 4a6:	85 bd       	out	0x25, r24	; 37
 4a8:	85 b5       	in	r24, 0x25	; 37
 4aa:	84 60       	ori	r24, 0x04	; 4
 4ac:	85 bd       	out	0x25, r24	; 37
 4ae:	81 b3       	in	r24, 0x11	; 17
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	81 bb       	out	0x11, r24	; 17
 4b4:	08 95       	ret

000004b6 <SetDutyCycle>:
 4b6:	cf 92       	push	r12
 4b8:	df 92       	push	r13
 4ba:	ef 92       	push	r14
 4bc:	ff 92       	push	r15
 4be:	6b 01       	movw	r12, r22
 4c0:	7c 01       	movw	r14, r24
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	a9 01       	movw	r20, r18
 4c8:	0e 94 0b 03 	call	0x616	; 0x616 <__cmpsf2>
 4cc:	18 16       	cp	r1, r24
 4ce:	14 f0       	brlt	.+4      	; 0x4d4 <SetDutyCycle+0x1e>
 4d0:	13 bc       	out	0x23, r1	; 35
 4d2:	18 c0       	rjmp	.+48     	; 0x504 <SetDutyCycle+0x4e>
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	40 e8       	ldi	r20, 0x80	; 128
 4da:	5f e3       	ldi	r21, 0x3F	; 63
 4dc:	c7 01       	movw	r24, r14
 4de:	b6 01       	movw	r22, r12
 4e0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gesf2>
 4e4:	88 23       	and	r24, r24
 4e6:	1c f0       	brlt	.+6      	; 0x4ee <SetDutyCycle+0x38>
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	83 bd       	out	0x23, r24	; 35
 4ec:	0b c0       	rjmp	.+22     	; 0x504 <SetDutyCycle+0x4e>
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	4f e7       	ldi	r20, 0x7F	; 127
 4f4:	53 e4       	ldi	r21, 0x43	; 67
 4f6:	c7 01       	movw	r24, r14
 4f8:	b6 01       	movw	r22, r12
 4fa:	0e 94 6f 04 	call	0x8de	; 0x8de <__mulsf3>
 4fe:	0e 94 89 03 	call	0x712	; 0x712 <__fixunssfsi>
 502:	63 bd       	out	0x23, r22	; 35
 504:	ff 90       	pop	r15
 506:	ef 90       	pop	r14
 508:	df 90       	pop	r13
 50a:	cf 90       	pop	r12
 50c:	08 95       	ret

0000050e <controlDoor>:
}

void controlDoor(uint8 action)
{
	if(action == '1')
 50e:	81 33       	cpi	r24, 0x31	; 49
 510:	39 f4       	brne	.+14     	; 0x520 <controlDoor+0x12>
	{
		//servo_angle(90);
		SetDutyCycle(0.09);
 512:	6c ee       	ldi	r22, 0xEC	; 236
 514:	71 e5       	ldi	r23, 0x51	; 81
 516:	88 eb       	ldi	r24, 0xB8	; 184
 518:	9d e3       	ldi	r25, 0x3D	; 61
 51a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SetDutyCycle>
 51e:	08 95       	ret
	}
	else if (action == '2')
 520:	82 33       	cpi	r24, 0x32	; 50
 522:	39 f4       	brne	.+14     	; 0x532 <controlDoor+0x24>
	{
		//servo_angle(0);
		SetDutyCycle(0.055);
 524:	6e ea       	ldi	r22, 0xAE	; 174
 526:	77 e4       	ldi	r23, 0x47	; 71
 528:	81 e6       	ldi	r24, 0x61	; 97
 52a:	9d e3       	ldi	r25, 0x3D	; 61
 52c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SetDutyCycle>
 530:	08 95       	ret
	}
	else
	{
		UART_STR("invalid option \r\n");
 532:	89 ef       	ldi	r24, 0xF9	; 249
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 00 02 	call	0x400	; 0x400 <UART_printText>
 53a:	08 95       	ret

0000053c <__subsf3>:
 53c:	50 58       	subi	r21, 0x80	; 128

0000053e <__addsf3>:
 53e:	bb 27       	eor	r27, r27
 540:	aa 27       	eor	r26, r26
 542:	0e 94 b6 02 	call	0x56c	; 0x56c <__addsf3x>
 546:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_round>
 54a:	0e 94 22 04 	call	0x844	; 0x844 <__fp_pscA>
 54e:	38 f0       	brcs	.+14     	; 0x55e <__addsf3+0x20>
 550:	0e 94 29 04 	call	0x852	; 0x852 <__fp_pscB>
 554:	20 f0       	brcs	.+8      	; 0x55e <__addsf3+0x20>
 556:	39 f4       	brne	.+14     	; 0x566 <__addsf3+0x28>
 558:	9f 3f       	cpi	r25, 0xFF	; 255
 55a:	19 f4       	brne	.+6      	; 0x562 <__addsf3+0x24>
 55c:	26 f4       	brtc	.+8      	; 0x566 <__addsf3+0x28>
 55e:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_nan>
 562:	0e f4       	brtc	.+2      	; 0x566 <__addsf3+0x28>
 564:	e0 95       	com	r30
 566:	e7 fb       	bst	r30, 7
 568:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_inf>

0000056c <__addsf3x>:
 56c:	e9 2f       	mov	r30, r25
 56e:	0e 94 41 04 	call	0x882	; 0x882 <__fp_split3>
 572:	58 f3       	brcs	.-42     	; 0x54a <__addsf3+0xc>
 574:	ba 17       	cp	r27, r26
 576:	62 07       	cpc	r22, r18
 578:	73 07       	cpc	r23, r19
 57a:	84 07       	cpc	r24, r20
 57c:	95 07       	cpc	r25, r21
 57e:	20 f0       	brcs	.+8      	; 0x588 <__addsf3x+0x1c>
 580:	79 f4       	brne	.+30     	; 0x5a0 <__addsf3x+0x34>
 582:	a6 f5       	brtc	.+104    	; 0x5ec <__addsf3x+0x80>
 584:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_zero>
 588:	0e f4       	brtc	.+2      	; 0x58c <__addsf3x+0x20>
 58a:	e0 95       	com	r30
 58c:	0b 2e       	mov	r0, r27
 58e:	ba 2f       	mov	r27, r26
 590:	a0 2d       	mov	r26, r0
 592:	0b 01       	movw	r0, r22
 594:	b9 01       	movw	r22, r18
 596:	90 01       	movw	r18, r0
 598:	0c 01       	movw	r0, r24
 59a:	ca 01       	movw	r24, r20
 59c:	a0 01       	movw	r20, r0
 59e:	11 24       	eor	r1, r1
 5a0:	ff 27       	eor	r31, r31
 5a2:	59 1b       	sub	r21, r25
 5a4:	99 f0       	breq	.+38     	; 0x5cc <__addsf3x+0x60>
 5a6:	59 3f       	cpi	r21, 0xF9	; 249
 5a8:	50 f4       	brcc	.+20     	; 0x5be <__addsf3x+0x52>
 5aa:	50 3e       	cpi	r21, 0xE0	; 224
 5ac:	68 f1       	brcs	.+90     	; 0x608 <__addsf3x+0x9c>
 5ae:	1a 16       	cp	r1, r26
 5b0:	f0 40       	sbci	r31, 0x00	; 0
 5b2:	a2 2f       	mov	r26, r18
 5b4:	23 2f       	mov	r18, r19
 5b6:	34 2f       	mov	r19, r20
 5b8:	44 27       	eor	r20, r20
 5ba:	58 5f       	subi	r21, 0xF8	; 248
 5bc:	f3 cf       	rjmp	.-26     	; 0x5a4 <__addsf3x+0x38>
 5be:	46 95       	lsr	r20
 5c0:	37 95       	ror	r19
 5c2:	27 95       	ror	r18
 5c4:	a7 95       	ror	r26
 5c6:	f0 40       	sbci	r31, 0x00	; 0
 5c8:	53 95       	inc	r21
 5ca:	c9 f7       	brne	.-14     	; 0x5be <__addsf3x+0x52>
 5cc:	7e f4       	brtc	.+30     	; 0x5ec <__addsf3x+0x80>
 5ce:	1f 16       	cp	r1, r31
 5d0:	ba 0b       	sbc	r27, r26
 5d2:	62 0b       	sbc	r22, r18
 5d4:	73 0b       	sbc	r23, r19
 5d6:	84 0b       	sbc	r24, r20
 5d8:	ba f0       	brmi	.+46     	; 0x608 <__addsf3x+0x9c>
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	a1 f0       	breq	.+40     	; 0x606 <__addsf3x+0x9a>
 5de:	ff 0f       	add	r31, r31
 5e0:	bb 1f       	adc	r27, r27
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	c2 f7       	brpl	.-16     	; 0x5da <__addsf3x+0x6e>
 5ea:	0e c0       	rjmp	.+28     	; 0x608 <__addsf3x+0x9c>
 5ec:	ba 0f       	add	r27, r26
 5ee:	62 1f       	adc	r22, r18
 5f0:	73 1f       	adc	r23, r19
 5f2:	84 1f       	adc	r24, r20
 5f4:	48 f4       	brcc	.+18     	; 0x608 <__addsf3x+0x9c>
 5f6:	87 95       	ror	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b7 95       	ror	r27
 5fe:	f7 95       	ror	r31
 600:	9e 3f       	cpi	r25, 0xFE	; 254
 602:	08 f0       	brcs	.+2      	; 0x606 <__addsf3x+0x9a>
 604:	b0 cf       	rjmp	.-160    	; 0x566 <__addsf3+0x28>
 606:	93 95       	inc	r25
 608:	88 0f       	add	r24, r24
 60a:	08 f0       	brcs	.+2      	; 0x60e <__addsf3x+0xa2>
 60c:	99 27       	eor	r25, r25
 60e:	ee 0f       	add	r30, r30
 610:	97 95       	ror	r25
 612:	87 95       	ror	r24
 614:	08 95       	ret

00000616 <__cmpsf2>:
 616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_cmp>
 61a:	08 f4       	brcc	.+2      	; 0x61e <__cmpsf2+0x8>
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	08 95       	ret

00000620 <__divsf3>:
 620:	0e 94 24 03 	call	0x648	; 0x648 <__divsf3x>
 624:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_round>
 628:	0e 94 29 04 	call	0x852	; 0x852 <__fp_pscB>
 62c:	58 f0       	brcs	.+22     	; 0x644 <__divsf3+0x24>
 62e:	0e 94 22 04 	call	0x844	; 0x844 <__fp_pscA>
 632:	40 f0       	brcs	.+16     	; 0x644 <__divsf3+0x24>
 634:	29 f4       	brne	.+10     	; 0x640 <__divsf3+0x20>
 636:	5f 3f       	cpi	r21, 0xFF	; 255
 638:	29 f0       	breq	.+10     	; 0x644 <__divsf3+0x24>
 63a:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_inf>
 63e:	51 11       	cpse	r21, r1
 640:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_szero>
 644:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_nan>

00000648 <__divsf3x>:
 648:	0e 94 41 04 	call	0x882	; 0x882 <__fp_split3>
 64c:	68 f3       	brcs	.-38     	; 0x628 <__divsf3+0x8>

0000064e <__divsf3_pse>:
 64e:	99 23       	and	r25, r25
 650:	b1 f3       	breq	.-20     	; 0x63e <__divsf3+0x1e>
 652:	55 23       	and	r21, r21
 654:	91 f3       	breq	.-28     	; 0x63a <__divsf3+0x1a>
 656:	95 1b       	sub	r25, r21
 658:	55 0b       	sbc	r21, r21
 65a:	bb 27       	eor	r27, r27
 65c:	aa 27       	eor	r26, r26
 65e:	62 17       	cp	r22, r18
 660:	73 07       	cpc	r23, r19
 662:	84 07       	cpc	r24, r20
 664:	38 f0       	brcs	.+14     	; 0x674 <__divsf3_pse+0x26>
 666:	9f 5f       	subi	r25, 0xFF	; 255
 668:	5f 4f       	sbci	r21, 0xFF	; 255
 66a:	22 0f       	add	r18, r18
 66c:	33 1f       	adc	r19, r19
 66e:	44 1f       	adc	r20, r20
 670:	aa 1f       	adc	r26, r26
 672:	a9 f3       	breq	.-22     	; 0x65e <__divsf3_pse+0x10>
 674:	35 d0       	rcall	.+106    	; 0x6e0 <__divsf3_pse+0x92>
 676:	0e 2e       	mov	r0, r30
 678:	3a f0       	brmi	.+14     	; 0x688 <__divsf3_pse+0x3a>
 67a:	e0 e8       	ldi	r30, 0x80	; 128
 67c:	32 d0       	rcall	.+100    	; 0x6e2 <__divsf3_pse+0x94>
 67e:	91 50       	subi	r25, 0x01	; 1
 680:	50 40       	sbci	r21, 0x00	; 0
 682:	e6 95       	lsr	r30
 684:	00 1c       	adc	r0, r0
 686:	ca f7       	brpl	.-14     	; 0x67a <__divsf3_pse+0x2c>
 688:	2b d0       	rcall	.+86     	; 0x6e0 <__divsf3_pse+0x92>
 68a:	fe 2f       	mov	r31, r30
 68c:	29 d0       	rcall	.+82     	; 0x6e0 <__divsf3_pse+0x92>
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	bb 1f       	adc	r27, r27
 696:	26 17       	cp	r18, r22
 698:	37 07       	cpc	r19, r23
 69a:	48 07       	cpc	r20, r24
 69c:	ab 07       	cpc	r26, r27
 69e:	b0 e8       	ldi	r27, 0x80	; 128
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <__divsf3_pse+0x56>
 6a2:	bb 0b       	sbc	r27, r27
 6a4:	80 2d       	mov	r24, r0
 6a6:	bf 01       	movw	r22, r30
 6a8:	ff 27       	eor	r31, r31
 6aa:	93 58       	subi	r25, 0x83	; 131
 6ac:	5f 4f       	sbci	r21, 0xFF	; 255
 6ae:	3a f0       	brmi	.+14     	; 0x6be <__divsf3_pse+0x70>
 6b0:	9e 3f       	cpi	r25, 0xFE	; 254
 6b2:	51 05       	cpc	r21, r1
 6b4:	78 f0       	brcs	.+30     	; 0x6d4 <__divsf3_pse+0x86>
 6b6:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_inf>
 6ba:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_szero>
 6be:	5f 3f       	cpi	r21, 0xFF	; 255
 6c0:	e4 f3       	brlt	.-8      	; 0x6ba <__divsf3_pse+0x6c>
 6c2:	98 3e       	cpi	r25, 0xE8	; 232
 6c4:	d4 f3       	brlt	.-12     	; 0x6ba <__divsf3_pse+0x6c>
 6c6:	86 95       	lsr	r24
 6c8:	77 95       	ror	r23
 6ca:	67 95       	ror	r22
 6cc:	b7 95       	ror	r27
 6ce:	f7 95       	ror	r31
 6d0:	9f 5f       	subi	r25, 0xFF	; 255
 6d2:	c9 f7       	brne	.-14     	; 0x6c6 <__divsf3_pse+0x78>
 6d4:	88 0f       	add	r24, r24
 6d6:	91 1d       	adc	r25, r1
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret
 6e0:	e1 e0       	ldi	r30, 0x01	; 1
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	bb 1f       	adc	r27, r27
 6ea:	62 17       	cp	r22, r18
 6ec:	73 07       	cpc	r23, r19
 6ee:	84 07       	cpc	r24, r20
 6f0:	ba 07       	cpc	r27, r26
 6f2:	20 f0       	brcs	.+8      	; 0x6fc <__divsf3_pse+0xae>
 6f4:	62 1b       	sub	r22, r18
 6f6:	73 0b       	sbc	r23, r19
 6f8:	84 0b       	sbc	r24, r20
 6fa:	ba 0b       	sbc	r27, r26
 6fc:	ee 1f       	adc	r30, r30
 6fe:	88 f7       	brcc	.-30     	; 0x6e2 <__divsf3_pse+0x94>
 700:	e0 95       	com	r30
 702:	08 95       	ret

00000704 <__fixsfsi>:
 704:	0e 94 89 03 	call	0x712	; 0x712 <__fixunssfsi>
 708:	68 94       	set
 70a:	b1 11       	cpse	r27, r1
 70c:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_szero>
 710:	08 95       	ret

00000712 <__fixunssfsi>:
 712:	0e 94 49 04 	call	0x892	; 0x892 <__fp_splitA>
 716:	88 f0       	brcs	.+34     	; 0x73a <__fixunssfsi+0x28>
 718:	9f 57       	subi	r25, 0x7F	; 127
 71a:	98 f0       	brcs	.+38     	; 0x742 <__fixunssfsi+0x30>
 71c:	b9 2f       	mov	r27, r25
 71e:	99 27       	eor	r25, r25
 720:	b7 51       	subi	r27, 0x17	; 23
 722:	b0 f0       	brcs	.+44     	; 0x750 <__fixunssfsi+0x3e>
 724:	e1 f0       	breq	.+56     	; 0x75e <__fixunssfsi+0x4c>
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	1a f0       	brmi	.+6      	; 0x736 <__fixunssfsi+0x24>
 730:	ba 95       	dec	r27
 732:	c9 f7       	brne	.-14     	; 0x726 <__fixunssfsi+0x14>
 734:	14 c0       	rjmp	.+40     	; 0x75e <__fixunssfsi+0x4c>
 736:	b1 30       	cpi	r27, 0x01	; 1
 738:	91 f0       	breq	.+36     	; 0x75e <__fixunssfsi+0x4c>
 73a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_zero>
 73e:	b1 e0       	ldi	r27, 0x01	; 1
 740:	08 95       	ret
 742:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_zero>
 746:	67 2f       	mov	r22, r23
 748:	78 2f       	mov	r23, r24
 74a:	88 27       	eor	r24, r24
 74c:	b8 5f       	subi	r27, 0xF8	; 248
 74e:	39 f0       	breq	.+14     	; 0x75e <__fixunssfsi+0x4c>
 750:	b9 3f       	cpi	r27, 0xF9	; 249
 752:	cc f3       	brlt	.-14     	; 0x746 <__fixunssfsi+0x34>
 754:	86 95       	lsr	r24
 756:	77 95       	ror	r23
 758:	67 95       	ror	r22
 75a:	b3 95       	inc	r27
 75c:	d9 f7       	brne	.-10     	; 0x754 <__fixunssfsi+0x42>
 75e:	3e f4       	brtc	.+14     	; 0x76e <__fixunssfsi+0x5c>
 760:	90 95       	com	r25
 762:	80 95       	com	r24
 764:	70 95       	com	r23
 766:	61 95       	neg	r22
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f 4f       	sbci	r24, 0xFF	; 255
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	08 95       	ret

00000770 <__floatunsisf>:
 770:	e8 94       	clt
 772:	09 c0       	rjmp	.+18     	; 0x786 <__floatsisf+0x12>

00000774 <__floatsisf>:
 774:	97 fb       	bst	r25, 7
 776:	3e f4       	brtc	.+14     	; 0x786 <__floatsisf+0x12>
 778:	90 95       	com	r25
 77a:	80 95       	com	r24
 77c:	70 95       	com	r23
 77e:	61 95       	neg	r22
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	99 23       	and	r25, r25
 788:	a9 f0       	breq	.+42     	; 0x7b4 <__floatsisf+0x40>
 78a:	f9 2f       	mov	r31, r25
 78c:	96 e9       	ldi	r25, 0x96	; 150
 78e:	bb 27       	eor	r27, r27
 790:	93 95       	inc	r25
 792:	f6 95       	lsr	r31
 794:	87 95       	ror	r24
 796:	77 95       	ror	r23
 798:	67 95       	ror	r22
 79a:	b7 95       	ror	r27
 79c:	f1 11       	cpse	r31, r1
 79e:	f8 cf       	rjmp	.-16     	; 0x790 <__floatsisf+0x1c>
 7a0:	fa f4       	brpl	.+62     	; 0x7e0 <__floatsisf+0x6c>
 7a2:	bb 0f       	add	r27, r27
 7a4:	11 f4       	brne	.+4      	; 0x7aa <__floatsisf+0x36>
 7a6:	60 ff       	sbrs	r22, 0
 7a8:	1b c0       	rjmp	.+54     	; 0x7e0 <__floatsisf+0x6c>
 7aa:	6f 5f       	subi	r22, 0xFF	; 255
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	16 c0       	rjmp	.+44     	; 0x7e0 <__floatsisf+0x6c>
 7b4:	88 23       	and	r24, r24
 7b6:	11 f0       	breq	.+4      	; 0x7bc <__floatsisf+0x48>
 7b8:	96 e9       	ldi	r25, 0x96	; 150
 7ba:	11 c0       	rjmp	.+34     	; 0x7de <__floatsisf+0x6a>
 7bc:	77 23       	and	r23, r23
 7be:	21 f0       	breq	.+8      	; 0x7c8 <__floatsisf+0x54>
 7c0:	9e e8       	ldi	r25, 0x8E	; 142
 7c2:	87 2f       	mov	r24, r23
 7c4:	76 2f       	mov	r23, r22
 7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <__floatsisf+0x5e>
 7c8:	66 23       	and	r22, r22
 7ca:	71 f0       	breq	.+28     	; 0x7e8 <__floatsisf+0x74>
 7cc:	96 e8       	ldi	r25, 0x86	; 134
 7ce:	86 2f       	mov	r24, r22
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	60 e0       	ldi	r22, 0x00	; 0
 7d4:	2a f0       	brmi	.+10     	; 0x7e0 <__floatsisf+0x6c>
 7d6:	9a 95       	dec	r25
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	88 1f       	adc	r24, r24
 7de:	da f7       	brpl	.-10     	; 0x7d6 <__floatsisf+0x62>
 7e0:	88 0f       	add	r24, r24
 7e2:	96 95       	lsr	r25
 7e4:	87 95       	ror	r24
 7e6:	97 f9       	bld	r25, 7
 7e8:	08 95       	ret

000007ea <__fp_cmp>:
 7ea:	99 0f       	add	r25, r25
 7ec:	00 08       	sbc	r0, r0
 7ee:	55 0f       	add	r21, r21
 7f0:	aa 0b       	sbc	r26, r26
 7f2:	e0 e8       	ldi	r30, 0x80	; 128
 7f4:	fe ef       	ldi	r31, 0xFE	; 254
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	e8 07       	cpc	r30, r24
 7fc:	f9 07       	cpc	r31, r25
 7fe:	c0 f0       	brcs	.+48     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 800:	12 16       	cp	r1, r18
 802:	13 06       	cpc	r1, r19
 804:	e4 07       	cpc	r30, r20
 806:	f5 07       	cpc	r31, r21
 808:	98 f0       	brcs	.+38     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 80a:	62 1b       	sub	r22, r18
 80c:	73 0b       	sbc	r23, r19
 80e:	84 0b       	sbc	r24, r20
 810:	95 0b       	sbc	r25, r21
 812:	39 f4       	brne	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 814:	0a 26       	eor	r0, r26
 816:	61 f0       	breq	.+24     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 818:	23 2b       	or	r18, r19
 81a:	24 2b       	or	r18, r20
 81c:	25 2b       	or	r18, r21
 81e:	21 f4       	brne	.+8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 820:	08 95       	ret
 822:	0a 26       	eor	r0, r26
 824:	09 f4       	brne	.+2      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 826:	a1 40       	sbci	r26, 0x01	; 1
 828:	a6 95       	lsr	r26
 82a:	8f ef       	ldi	r24, 0xFF	; 255
 82c:	81 1d       	adc	r24, r1
 82e:	81 1d       	adc	r24, r1
 830:	08 95       	ret

00000832 <__fp_inf>:
 832:	97 f9       	bld	r25, 7
 834:	9f 67       	ori	r25, 0x7F	; 127
 836:	80 e8       	ldi	r24, 0x80	; 128
 838:	70 e0       	ldi	r23, 0x00	; 0
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	08 95       	ret

0000083e <__fp_nan>:
 83e:	9f ef       	ldi	r25, 0xFF	; 255
 840:	80 ec       	ldi	r24, 0xC0	; 192
 842:	08 95       	ret

00000844 <__fp_pscA>:
 844:	00 24       	eor	r0, r0
 846:	0a 94       	dec	r0
 848:	16 16       	cp	r1, r22
 84a:	17 06       	cpc	r1, r23
 84c:	18 06       	cpc	r1, r24
 84e:	09 06       	cpc	r0, r25
 850:	08 95       	ret

00000852 <__fp_pscB>:
 852:	00 24       	eor	r0, r0
 854:	0a 94       	dec	r0
 856:	12 16       	cp	r1, r18
 858:	13 06       	cpc	r1, r19
 85a:	14 06       	cpc	r1, r20
 85c:	05 06       	cpc	r0, r21
 85e:	08 95       	ret

00000860 <__fp_round>:
 860:	09 2e       	mov	r0, r25
 862:	03 94       	inc	r0
 864:	00 0c       	add	r0, r0
 866:	11 f4       	brne	.+4      	; 0x86c <__fp_round+0xc>
 868:	88 23       	and	r24, r24
 86a:	52 f0       	brmi	.+20     	; 0x880 <__fp_round+0x20>
 86c:	bb 0f       	add	r27, r27
 86e:	40 f4       	brcc	.+16     	; 0x880 <__fp_round+0x20>
 870:	bf 2b       	or	r27, r31
 872:	11 f4       	brne	.+4      	; 0x878 <__fp_round+0x18>
 874:	60 ff       	sbrs	r22, 0
 876:	04 c0       	rjmp	.+8      	; 0x880 <__fp_round+0x20>
 878:	6f 5f       	subi	r22, 0xFF	; 255
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	8f 4f       	sbci	r24, 0xFF	; 255
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	08 95       	ret

00000882 <__fp_split3>:
 882:	57 fd       	sbrc	r21, 7
 884:	90 58       	subi	r25, 0x80	; 128
 886:	44 0f       	add	r20, r20
 888:	55 1f       	adc	r21, r21
 88a:	59 f0       	breq	.+22     	; 0x8a2 <__fp_splitA+0x10>
 88c:	5f 3f       	cpi	r21, 0xFF	; 255
 88e:	71 f0       	breq	.+28     	; 0x8ac <__fp_splitA+0x1a>
 890:	47 95       	ror	r20

00000892 <__fp_splitA>:
 892:	88 0f       	add	r24, r24
 894:	97 fb       	bst	r25, 7
 896:	99 1f       	adc	r25, r25
 898:	61 f0       	breq	.+24     	; 0x8b2 <__fp_splitA+0x20>
 89a:	9f 3f       	cpi	r25, 0xFF	; 255
 89c:	79 f0       	breq	.+30     	; 0x8bc <__fp_splitA+0x2a>
 89e:	87 95       	ror	r24
 8a0:	08 95       	ret
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	14 06       	cpc	r1, r20
 8a8:	55 1f       	adc	r21, r21
 8aa:	f2 cf       	rjmp	.-28     	; 0x890 <__fp_split3+0xe>
 8ac:	46 95       	lsr	r20
 8ae:	f1 df       	rcall	.-30     	; 0x892 <__fp_splitA>
 8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <__fp_splitA+0x30>
 8b2:	16 16       	cp	r1, r22
 8b4:	17 06       	cpc	r1, r23
 8b6:	18 06       	cpc	r1, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	f1 cf       	rjmp	.-30     	; 0x89e <__fp_splitA+0xc>
 8bc:	86 95       	lsr	r24
 8be:	71 05       	cpc	r23, r1
 8c0:	61 05       	cpc	r22, r1
 8c2:	08 94       	sec
 8c4:	08 95       	ret

000008c6 <__fp_zero>:
 8c6:	e8 94       	clt

000008c8 <__fp_szero>:
 8c8:	bb 27       	eor	r27, r27
 8ca:	66 27       	eor	r22, r22
 8cc:	77 27       	eor	r23, r23
 8ce:	cb 01       	movw	r24, r22
 8d0:	97 f9       	bld	r25, 7
 8d2:	08 95       	ret

000008d4 <__gesf2>:
 8d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_cmp>
 8d8:	08 f4       	brcc	.+2      	; 0x8dc <__gesf2+0x8>
 8da:	8f ef       	ldi	r24, 0xFF	; 255
 8dc:	08 95       	ret

000008de <__mulsf3>:
 8de:	0e 94 82 04 	call	0x904	; 0x904 <__mulsf3x>
 8e2:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_round>
 8e6:	0e 94 22 04 	call	0x844	; 0x844 <__fp_pscA>
 8ea:	38 f0       	brcs	.+14     	; 0x8fa <__mulsf3+0x1c>
 8ec:	0e 94 29 04 	call	0x852	; 0x852 <__fp_pscB>
 8f0:	20 f0       	brcs	.+8      	; 0x8fa <__mulsf3+0x1c>
 8f2:	95 23       	and	r25, r21
 8f4:	11 f0       	breq	.+4      	; 0x8fa <__mulsf3+0x1c>
 8f6:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_inf>
 8fa:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_nan>
 8fe:	11 24       	eor	r1, r1
 900:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_szero>

00000904 <__mulsf3x>:
 904:	0e 94 41 04 	call	0x882	; 0x882 <__fp_split3>
 908:	70 f3       	brcs	.-36     	; 0x8e6 <__mulsf3+0x8>

0000090a <__mulsf3_pse>:
 90a:	95 9f       	mul	r25, r21
 90c:	c1 f3       	breq	.-16     	; 0x8fe <__mulsf3+0x20>
 90e:	95 0f       	add	r25, r21
 910:	50 e0       	ldi	r21, 0x00	; 0
 912:	55 1f       	adc	r21, r21
 914:	62 9f       	mul	r22, r18
 916:	f0 01       	movw	r30, r0
 918:	72 9f       	mul	r23, r18
 91a:	bb 27       	eor	r27, r27
 91c:	f0 0d       	add	r31, r0
 91e:	b1 1d       	adc	r27, r1
 920:	63 9f       	mul	r22, r19
 922:	aa 27       	eor	r26, r26
 924:	f0 0d       	add	r31, r0
 926:	b1 1d       	adc	r27, r1
 928:	aa 1f       	adc	r26, r26
 92a:	64 9f       	mul	r22, r20
 92c:	66 27       	eor	r22, r22
 92e:	b0 0d       	add	r27, r0
 930:	a1 1d       	adc	r26, r1
 932:	66 1f       	adc	r22, r22
 934:	82 9f       	mul	r24, r18
 936:	22 27       	eor	r18, r18
 938:	b0 0d       	add	r27, r0
 93a:	a1 1d       	adc	r26, r1
 93c:	62 1f       	adc	r22, r18
 93e:	73 9f       	mul	r23, r19
 940:	b0 0d       	add	r27, r0
 942:	a1 1d       	adc	r26, r1
 944:	62 1f       	adc	r22, r18
 946:	83 9f       	mul	r24, r19
 948:	a0 0d       	add	r26, r0
 94a:	61 1d       	adc	r22, r1
 94c:	22 1f       	adc	r18, r18
 94e:	74 9f       	mul	r23, r20
 950:	33 27       	eor	r19, r19
 952:	a0 0d       	add	r26, r0
 954:	61 1d       	adc	r22, r1
 956:	23 1f       	adc	r18, r19
 958:	84 9f       	mul	r24, r20
 95a:	60 0d       	add	r22, r0
 95c:	21 1d       	adc	r18, r1
 95e:	82 2f       	mov	r24, r18
 960:	76 2f       	mov	r23, r22
 962:	6a 2f       	mov	r22, r26
 964:	11 24       	eor	r1, r1
 966:	9f 57       	subi	r25, 0x7F	; 127
 968:	50 40       	sbci	r21, 0x00	; 0
 96a:	9a f0       	brmi	.+38     	; 0x992 <__mulsf3_pse+0x88>
 96c:	f1 f0       	breq	.+60     	; 0x9aa <__mulsf3_pse+0xa0>
 96e:	88 23       	and	r24, r24
 970:	4a f0       	brmi	.+18     	; 0x984 <__mulsf3_pse+0x7a>
 972:	ee 0f       	add	r30, r30
 974:	ff 1f       	adc	r31, r31
 976:	bb 1f       	adc	r27, r27
 978:	66 1f       	adc	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	91 50       	subi	r25, 0x01	; 1
 980:	50 40       	sbci	r21, 0x00	; 0
 982:	a9 f7       	brne	.-22     	; 0x96e <__mulsf3_pse+0x64>
 984:	9e 3f       	cpi	r25, 0xFE	; 254
 986:	51 05       	cpc	r21, r1
 988:	80 f0       	brcs	.+32     	; 0x9aa <__mulsf3_pse+0xa0>
 98a:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_inf>
 98e:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_szero>
 992:	5f 3f       	cpi	r21, 0xFF	; 255
 994:	e4 f3       	brlt	.-8      	; 0x98e <__mulsf3_pse+0x84>
 996:	98 3e       	cpi	r25, 0xE8	; 232
 998:	d4 f3       	brlt	.-12     	; 0x98e <__mulsf3_pse+0x84>
 99a:	86 95       	lsr	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b7 95       	ror	r27
 9a2:	f7 95       	ror	r31
 9a4:	e7 95       	ror	r30
 9a6:	9f 5f       	subi	r25, 0xFF	; 255
 9a8:	c1 f7       	brne	.-16     	; 0x99a <__mulsf3_pse+0x90>
 9aa:	fe 2b       	or	r31, r30
 9ac:	88 0f       	add	r24, r24
 9ae:	91 1d       	adc	r25, r1
 9b0:	96 95       	lsr	r25
 9b2:	87 95       	ror	r24
 9b4:	97 f9       	bld	r25, 7
 9b6:	08 95       	ret

000009b8 <round>:
 9b8:	0e 94 49 04 	call	0x892	; 0x892 <__fp_splitA>
 9bc:	e8 f0       	brcs	.+58     	; 0x9f8 <round+0x40>
 9be:	9e 37       	cpi	r25, 0x7E	; 126
 9c0:	e8 f0       	brcs	.+58     	; 0x9fc <round+0x44>
 9c2:	96 39       	cpi	r25, 0x96	; 150
 9c4:	b8 f4       	brcc	.+46     	; 0x9f4 <round+0x3c>
 9c6:	9e 38       	cpi	r25, 0x8E	; 142
 9c8:	48 f4       	brcc	.+18     	; 0x9dc <round+0x24>
 9ca:	67 2f       	mov	r22, r23
 9cc:	78 2f       	mov	r23, r24
 9ce:	88 27       	eor	r24, r24
 9d0:	98 5f       	subi	r25, 0xF8	; 248
 9d2:	f9 cf       	rjmp	.-14     	; 0x9c6 <round+0xe>
 9d4:	86 95       	lsr	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	93 95       	inc	r25
 9dc:	95 39       	cpi	r25, 0x95	; 149
 9de:	d0 f3       	brcs	.-12     	; 0x9d4 <round+0x1c>
 9e0:	b6 2f       	mov	r27, r22
 9e2:	b1 70       	andi	r27, 0x01	; 1
 9e4:	6b 0f       	add	r22, r27
 9e6:	71 1d       	adc	r23, r1
 9e8:	81 1d       	adc	r24, r1
 9ea:	20 f4       	brcc	.+8      	; 0x9f4 <round+0x3c>
 9ec:	87 95       	ror	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	93 95       	inc	r25
 9f4:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_mintl>
 9f8:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__fp_mpack>
 9fc:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_szero>

00000a00 <__fp_mintl>:
 a00:	88 23       	and	r24, r24
 a02:	71 f4       	brne	.+28     	; 0xa20 <__fp_mintl+0x20>
 a04:	77 23       	and	r23, r23
 a06:	21 f0       	breq	.+8      	; 0xa10 <__fp_mintl+0x10>
 a08:	98 50       	subi	r25, 0x08	; 8
 a0a:	87 2b       	or	r24, r23
 a0c:	76 2f       	mov	r23, r22
 a0e:	07 c0       	rjmp	.+14     	; 0xa1e <__fp_mintl+0x1e>
 a10:	66 23       	and	r22, r22
 a12:	11 f4       	brne	.+4      	; 0xa18 <__fp_mintl+0x18>
 a14:	99 27       	eor	r25, r25
 a16:	0d c0       	rjmp	.+26     	; 0xa32 <__fp_mintl+0x32>
 a18:	90 51       	subi	r25, 0x10	; 16
 a1a:	86 2b       	or	r24, r22
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	60 e0       	ldi	r22, 0x00	; 0
 a20:	2a f0       	brmi	.+10     	; 0xa2c <__fp_mintl+0x2c>
 a22:	9a 95       	dec	r25
 a24:	66 0f       	add	r22, r22
 a26:	77 1f       	adc	r23, r23
 a28:	88 1f       	adc	r24, r24
 a2a:	da f7       	brpl	.-10     	; 0xa22 <__fp_mintl+0x22>
 a2c:	88 0f       	add	r24, r24
 a2e:	96 95       	lsr	r25
 a30:	87 95       	ror	r24
 a32:	97 f9       	bld	r25, 7
 a34:	08 95       	ret

00000a36 <__fp_mpack>:
 a36:	9f 3f       	cpi	r25, 0xFF	; 255
 a38:	31 f0       	breq	.+12     	; 0xa46 <__fp_mpack_finite+0xc>

00000a3a <__fp_mpack_finite>:
 a3a:	91 50       	subi	r25, 0x01	; 1
 a3c:	20 f4       	brcc	.+8      	; 0xa46 <__fp_mpack_finite+0xc>
 a3e:	87 95       	ror	r24
 a40:	77 95       	ror	r23
 a42:	67 95       	ror	r22
 a44:	b7 95       	ror	r27
 a46:	88 0f       	add	r24, r24
 a48:	91 1d       	adc	r25, r1
 a4a:	96 95       	lsr	r25
 a4c:	87 95       	ror	r24
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret

00000a52 <_exit>:
 a52:	f8 94       	cli

00000a54 <__stop_program>:
 a54:	ff cf       	rjmp	.-2      	; 0xa54 <__stop_program>
