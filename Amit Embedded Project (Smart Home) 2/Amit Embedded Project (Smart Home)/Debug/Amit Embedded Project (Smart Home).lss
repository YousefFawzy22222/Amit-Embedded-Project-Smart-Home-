
Amit Embedded Project (Smart Home).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000237a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005dc  00800060  0000237a  0000240e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080063c  0080063c  000029ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002a1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004149  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001445  00000000  00000000  00006ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000227e  00000000  00000000  00008316  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d4  00000000  00000000  0000a594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d10  00000000  00000000  0000ae68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002344  00000000  00000000  0000bb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000debc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_1>
       8:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 56 06 	jmp	0xcac	; 0xcac <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	16 e0       	ldi	r17, 0x06	; 6
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b6 e0       	ldi	r27, 0x06	; 6
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 35       	cpi	r26, 0x50	; 80
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 0a 	call	0x1506	; 0x1506 <main>
      8a:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
uint32 x = 0;                      //Variable to store ADC reading
sint16 volt = 0, temperature = 0; // Variables to store calculated voltage and temperature

void ADC_Init()
{
	clrbit(DDRA,0);            // Configure pin 0 of port A as input for the temperature sensor
      92:	8a b3       	in	r24, 0x1a	; 26
      94:	8e 7f       	andi	r24, 0xFE	; 254
      96:	8a bb       	out	0x1a, r24	; 26

	setbit(ADMUX,REFS0);       //Internal 2.56V voltage reference
      98:	87 b1       	in	r24, 0x07	; 7
      9a:	80 64       	ori	r24, 0x40	; 64
      9c:	87 b9       	out	0x07, r24	; 7
	setbit(ADMUX,REFS1);
      9e:	87 b1       	in	r24, 0x07	; 7
      a0:	80 68       	ori	r24, 0x80	; 128
      a2:	87 b9       	out	0x07, r24	; 7
	setbit(ADCSRA,ADEN);       //Enable ADC
      a4:	86 b1       	in	r24, 0x06	; 6
      a6:	80 68       	ori	r24, 0x80	; 128
      a8:	86 b9       	out	0x06, r24	; 6
	setbit(ADCSRA,ADPS2);      //Set Prescaler to 16
      aa:	86 b1       	in	r24, 0x06	; 6
      ac:	84 60       	ori	r24, 0x04	; 4
      ae:	86 b9       	out	0x06, r24	; 6
      b0:	08 95       	ret

000000b2 <ADC_Read>:
}

uint32 ADC_Read(uint8 ch)
{
	uint16 value = 0;
	if(ch>=0 && ch<=8)
      b2:	89 30       	cpi	r24, 0x09	; 9
      b4:	b8 f4       	brcc	.+46     	; 0xe4 <ADC_Read+0x32>
	{
		ADMUX = (ADMUX & 0xE0) | ch; //channel selection 
      b6:	97 b1       	in	r25, 0x07	; 7
      b8:	90 7e       	andi	r25, 0xE0	; 224
      ba:	89 2b       	or	r24, r25
      bc:	87 b9       	out	0x07, r24	; 7
		setbit(ADCSRA,ADSC);//Start conversion to be able to read
      be:	86 b1       	in	r24, 0x06	; 6
      c0:	80 64       	ori	r24, 0x40	; 64
      c2:	86 b9       	out	0x06, r24	; 6
		while(readbit(ADCSRA,ADIF) != 1);
      c4:	34 9b       	sbis	0x06, 4	; 6
      c6:	fe cf       	rjmp	.-4      	; 0xc4 <ADC_Read+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c8:	89 ef       	ldi	r24, 0xF9	; 249
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	01 97       	sbiw	r24, 0x01	; 1
      ce:	f1 f7       	brne	.-4      	; 0xcc <ADC_Read+0x1a>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <ADC_Read+0x20>
      d2:	00 00       	nop
		_delay_ms(1);
		value = (uint16)ADCL + (uint16)ADCH * 256;
      d4:	84 b1       	in	r24, 0x04	; 4
      d6:	65 b1       	in	r22, 0x05	; 5
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	76 2f       	mov	r23, r22
      dc:	66 27       	eor	r22, r22
      de:	68 0f       	add	r22, r24
      e0:	71 1d       	adc	r23, r1
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <ADC_Read+0x36>
	setbit(ADCSRA,ADPS2);      //Set Prescaler to 16
}

uint32 ADC_Read(uint8 ch)
{
	uint16 value = 0;
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	70 e0       	ldi	r23, 0x00	; 0
		setbit(ADCSRA,ADSC);//Start conversion to be able to read
		while(readbit(ADCSRA,ADIF) != 1);
		_delay_ms(1);
		value = (uint16)ADCL + (uint16)ADCH * 256;
	}
	return value; //Return calculated value
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
}
      ec:	08 95       	ret

000000ee <calculate_Temperature>:

void calculate_Temperature()
{
	x = ADC_Read(0);             // Read the ADC value from channel 0
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Read>
      f4:	9b 01       	movw	r18, r22
      f6:	ac 01       	movw	r20, r24
      f8:	60 93 40 06 	sts	0x0640, r22	; 0x800640 <x>
      fc:	70 93 41 06 	sts	0x0641, r23	; 0x800641 <x+0x1>
     100:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <x+0x2>
     104:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <x+0x3>
	volt = (2560 * x) / 1024;    // Calculate voltage from ADC reading
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	ba e0       	ldi	r27, 0x0A	; 10
     10c:	0e 94 16 11 	call	0x222c	; 0x222c <__muluhisi3>
     110:	dc 01       	movw	r26, r24
     112:	cb 01       	movw	r24, r22
     114:	07 2e       	mov	r0, r23
     116:	7a e0       	ldi	r23, 0x0A	; 10
     118:	b6 95       	lsr	r27
     11a:	a7 95       	ror	r26
     11c:	97 95       	ror	r25
     11e:	87 95       	ror	r24
     120:	7a 95       	dec	r23
     122:	d1 f7       	brne	.-12     	; 0x118 <calculate_Temperature+0x2a>
     124:	70 2d       	mov	r23, r0
     126:	90 93 3f 06 	sts	0x063F, r25	; 0x80063f <volt+0x1>
     12a:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <volt>
	temperature = volt / 10;     // Calculate temperature from voltage
     12e:	6a e0       	ldi	r22, 0x0A	; 10
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__divmodhi4>
     136:	70 93 3d 06 	sts	0x063D, r23	; 0x80063d <__data_end+0x1>
     13a:	60 93 3c 06 	sts	0x063C, r22	; 0x80063c <__data_end>
     13e:	08 95       	ret

00000140 <admin_funcChoice>:

uint8 admin_validityFlag= false;

void admin_funcChoice(void)
{
	UART_printText("\r\n\r\n");
     140:	84 eb       	ldi	r24, 0xB4	; 180
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("Press the following number for the function you need");
     148:	89 eb       	ldi	r24, 0xB9	; 185
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("\r\n");
     150:	86 eb       	ldi	r24, 0xB6	; 182
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("1: control the door");
     158:	8e ee       	ldi	r24, 0xEE	; 238
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("\r\n");
     160:	86 eb       	ldi	r24, 0xB6	; 182
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("2: control the lights");
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("\r\n");
     170:	86 eb       	ldi	r24, 0xB6	; 182
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("3: monitor the temperature");
     178:	88 e1       	ldi	r24, 0x18	; 24
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("\r\n");
     180:	86 eb       	ldi	r24, 0xB6	; 182
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("4: edit the list of users");
     188:	83 e3       	ldi	r24, 0x33	; 51
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	UART_printText("\r\n");
     190:	86 eb       	ldi	r24, 0xB6	; 182
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     198:	08 95       	ret

0000019a <admin_callFunc>:
}

void admin_callFunc(uint8 num)
{
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	2a 97       	sbiw	r28, 0x0a	; 10
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	cd bf       	out	0x3d, r28	; 61
     1b0:	18 2f       	mov	r17, r24
	UART_printText("\r\n");
     1b2:	86 eb       	ldi	r24, 0xB6	; 182
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	switch(num)
     1ba:	12 33       	cpi	r17, 0x32	; 50
     1bc:	d9 f0       	breq	.+54     	; 0x1f4 <admin_callFunc+0x5a>
     1be:	18 f4       	brcc	.+6      	; 0x1c6 <admin_callFunc+0x2c>
     1c0:	11 33       	cpi	r17, 0x31	; 49
     1c2:	41 f0       	breq	.+16     	; 0x1d4 <admin_callFunc+0x3a>
     1c4:	3b c1       	rjmp	.+630    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     1c6:	13 33       	cpi	r17, 0x33	; 51
     1c8:	09 f4       	brne	.+2      	; 0x1cc <admin_callFunc+0x32>
     1ca:	64 c0       	rjmp	.+200    	; 0x294 <admin_callFunc+0xfa>
     1cc:	14 33       	cpi	r17, 0x34	; 52
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <admin_callFunc+0x38>
     1d0:	85 c0       	rjmp	.+266    	; 0x2dc <admin_callFunc+0x142>
     1d2:	34 c1       	rjmp	.+616    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	{
		case '1':
		while(1){
			UART_printText("\r\n0: go back \r\n1: open the door \r\n2: close door \r\n");
     1d4:	8d e4       	ldi	r24, 0x4D	; 77
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
			uint8 action= UART_receive();
     1dc:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_receive>
			if(action== '0') break;
     1e0:	80 33       	cpi	r24, 0x30	; 48
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <admin_callFunc+0x4c>
     1e4:	2f c1       	rjmp	.+606    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			else controlDoor(action);
     1e6:	0e 94 ac 0b 	call	0x1758	; 0x1758 <controlDoor>
			UART_printText("\r\n");
     1ea:	86 eb       	ldi	r24, 0xB6	; 182
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
		}
     1f2:	f0 cf       	rjmp	.-32     	; 0x1d4 <admin_callFunc+0x3a>
		break;
		
		case '2':
		while(1){
			UART_printText("\r\n0: go back \r\nchoose led 1 to 5 or 6 for dimmer led \r\n7: turn all on    8: turn all off \r\n");
     1f4:	80 e8       	ldi	r24, 0x80	; 128
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
			uint8 ledNum= UART_receive();
     1fc:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_receive>
     200:	18 2f       	mov	r17, r24
			UART_printText("\r\n");
     202:	86 eb       	ldi	r24, 0xB6	; 182
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
			if(ledNum== '0') break;
     20a:	10 33       	cpi	r17, 0x30	; 48
     20c:	09 f4       	brne	.+2      	; 0x210 <admin_callFunc+0x76>
     20e:	1a c1       	rjmp	.+564    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			else if(ledNum>='1' && ledNum<='5'){
     210:	8f ec       	ldi	r24, 0xCF	; 207
     212:	81 0f       	add	r24, r17
     214:	85 30       	cpi	r24, 0x05	; 5
     216:	78 f4       	brcc	.+30     	; 0x236 <admin_callFunc+0x9c>
				UART_printText("1: turn on \r\n2: turn off \r\n");
     218:	8c ed       	ldi	r24, 0xDC	; 220
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
				lights_On_Off(ledNum, UART_receive());
     220:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_receive>
     224:	68 2f       	mov	r22, r24
     226:	81 2f       	mov	r24, r17
     228:	0e 94 0d 0a 	call	0x141a	; 0x141a <lights_On_Off>
				UART_printText("\r\n");
     22c:	86 eb       	ldi	r24, 0xB6	; 182
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     234:	df cf       	rjmp	.-66     	; 0x1f4 <admin_callFunc+0x5a>
		    }
			else if(ledNum== '6'){
     236:	16 33       	cpi	r17, 0x36	; 54
     238:	01 f5       	brne	.+64     	; 0x27a <admin_callFunc+0xe0>
				static uint16 ledBrightness= '0'; 
				UART_printText("Choose brightness you want from 0 to 9 now it's at ");
     23a:	88 ef       	ldi	r24, 0xF8	; 248
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
				UART_printNum(ledBrightness-'0');
     242:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     246:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     24a:	c0 97       	sbiw	r24, 0x30	; 48
     24c:	0e 94 f6 07 	call	0xfec	; 0xfec <UART_printNum>
				UART_printText("\r\n");
     250:	86 eb       	ldi	r24, 0xB6	; 182
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
				ledBrightness= UART_receive();
     258:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_receive>
     25c:	68 2f       	mov	r22, r24
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     264:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
				control_dimmer_light(ledBrightness);
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 34 0a 	call	0x1468	; 0x1468 <control_dimmer_light>
				UART_printText("\r\n");
     270:	86 eb       	ldi	r24, 0xB6	; 182
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     278:	bd cf       	rjmp	.-134    	; 0x1f4 <admin_callFunc+0x5a>
			}
			else if(ledNum== '7' || ledNum== '8'){
     27a:	89 ec       	ldi	r24, 0xC9	; 201
     27c:	81 0f       	add	r24, r17
     27e:	82 30       	cpi	r24, 0x02	; 2
     280:	20 f4       	brcc	.+8      	; 0x28a <admin_callFunc+0xf0>
				all_lights(ledNum);
     282:	81 2f       	mov	r24, r17
     284:	0e 94 43 0a 	call	0x1486	; 0x1486 <all_lights>
     288:	b5 cf       	rjmp	.-150    	; 0x1f4 <admin_callFunc+0x5a>
			}
			else UART_printText("invalid choice \r\n");
     28a:	8c e2       	ldi	r24, 0x2C	; 44
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     292:	b0 cf       	rjmp	.-160    	; 0x1f4 <admin_callFunc+0x5a>
		}
		break;
		
		case '3':
		UART_printText("press 0: to go back to the list \r\n");
     294:	8e e3       	ldi	r24, 0x3E	; 62
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
		while(1){
			calculate_Temperature();
     29c:	0e 94 77 00 	call	0xee	; 0xee <calculate_Temperature>
			UART_printText("Temp: "); UART_printNum(temperature); UART_printText("\r\n");
     2a0:	81 e6       	ldi	r24, 0x61	; 97
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     2a8:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <__data_end>
     2ac:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <__data_end+0x1>
     2b0:	0e 94 f6 07 	call	0xfec	; 0xfec <UART_printNum>
     2b4:	86 eb       	ldi	r24, 0xB6	; 182
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     2bc:	2f e5       	ldi	r18, 0x5F	; 95
     2be:	8a ee       	ldi	r24, 0xEA	; 234
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	21 50       	subi	r18, 0x01	; 1
     2c4:	80 40       	sbci	r24, 0x00	; 0
     2c6:	90 40       	sbci	r25, 0x00	; 0
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <admin_callFunc+0x128>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <admin_callFunc+0x132>
     2cc:	00 00       	nop
			_delay_ms(300);
			if(UART_dataAvailable) if(UART_receive()== '0') break;
     2ce:	5f 9b       	sbis	0x0b, 7	; 11
     2d0:	e5 cf       	rjmp	.-54     	; 0x29c <admin_callFunc+0x102>
     2d2:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_receive>
     2d6:	80 33       	cpi	r24, 0x30	; 48
     2d8:	09 f7       	brne	.-62     	; 0x29c <admin_callFunc+0x102>
     2da:	b4 c0       	rjmp	.+360    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		}
		break;
		
		case '4':
		while(1){
			uint8 last_userNum= EEPROM_ui8ReadByteFromAddress(GUESTS_NUM_ADDRESS);
     2dc:	8f e1       	ldi	r24, 0x1F	; 31
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <EEPROM_ui8ReadByteFromAddress>
     2e4:	18 2f       	mov	r17, r24
			UART_printText("\r\n0: go back \r\n1: add user   2: remove user   3: change user's password \r\n");
     2e6:	88 e6       	ldi	r24, 0x68	; 104
     2e8:	92 e0       	ldi	r25, 0x02	; 2
     2ea:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
			uint8 choice= UART_receive();
     2ee:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_receive>
			uint8 user[USER_SIZE], pass[PASS_SIZE];
			if(choice== '0') break;
     2f2:	80 33       	cpi	r24, 0x30	; 48
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <admin_callFunc+0x15e>
     2f6:	a6 c0       	rjmp	.+332    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			else if(choice== '1'){
     2f8:	81 33       	cpi	r24, 0x31	; 49
     2fa:	e9 f5       	brne	.+122    	; 0x376 <admin_callFunc+0x1dc>
				if(last_userNum<GUESTS_MAX_NUM){
     2fc:	1a 30       	cpi	r17, 0x0A	; 10
     2fe:	b0 f5       	brcc	.+108    	; 0x36c <admin_callFunc+0x1d2>
				   	UART_printText("\r\nEnter the 6-characters name of the new user: ");
     300:	83 eb       	ldi	r24, 0xB3	; 179
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
					UART_readString(USER_SIZE, user);
     308:	be 01       	movw	r22, r28
     30a:	6f 5f       	subi	r22, 0xFF	; 255
     30c:	7f 4f       	sbci	r23, 0xFF	; 255
     30e:	86 e0       	ldi	r24, 0x06	; 6
     310:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_readString>
					if(EEPROM_ui8CheckIfUserExist(user)) UART_printText("\r\nThis user already exist \r\n");
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	0e 94 b4 04 	call	0x968	; 0x968 <EEPROM_ui8CheckIfUserExist>
     31c:	88 23       	and	r24, r24
     31e:	29 f0       	breq	.+10     	; 0x32a <admin_callFunc+0x190>
     320:	83 ee       	ldi	r24, 0xE3	; 227
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     328:	d9 cf       	rjmp	.-78     	; 0x2dc <admin_callFunc+0x142>
					else{
						UART_printText("\r\nEnter a 4-characters password for the new user: ");
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	93 e0       	ldi	r25, 0x03	; 3
     32e:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
						while(1){
							UART_readString(PASS_SIZE, pass);
     332:	be 01       	movw	r22, r28
     334:	69 5f       	subi	r22, 0xF9	; 249
     336:	7f 4f       	sbci	r23, 0xFF	; 255
     338:	84 e0       	ldi	r24, 0x04	; 4
     33a:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_readString>
							if(EEPROM_ui8CheckIfPassExist(pass)) UART_printText("\r\nAnother user is using the same password, try another one: ");
     33e:	ce 01       	movw	r24, r28
     340:	07 96       	adiw	r24, 0x07	; 7
     342:	0e 94 ef 04 	call	0x9de	; 0x9de <EEPROM_ui8CheckIfPassExist>
     346:	88 23       	and	r24, r24
     348:	29 f0       	breq	.+10     	; 0x354 <admin_callFunc+0x1ba>
     34a:	83 e3       	ldi	r24, 0x33	; 51
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
							else{ EEPROM_vAddUser(user, pass); UART_printText("\r\n"); break;}
						}
     352:	ef cf       	rjmp	.-34     	; 0x332 <admin_callFunc+0x198>
					else{
						UART_printText("\r\nEnter a 4-characters password for the new user: ");
						while(1){
							UART_readString(PASS_SIZE, pass);
							if(EEPROM_ui8CheckIfPassExist(pass)) UART_printText("\r\nAnother user is using the same password, try another one: ");
							else{ EEPROM_vAddUser(user, pass); UART_printText("\r\n"); break;}
     354:	be 01       	movw	r22, r28
     356:	69 5f       	subi	r22, 0xF9	; 249
     358:	7f 4f       	sbci	r23, 0xFF	; 255
     35a:	ce 01       	movw	r24, r28
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	0e 94 62 05 	call	0xac4	; 0xac4 <EEPROM_vAddUser>
     362:	86 eb       	ldi	r24, 0xB6	; 182
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     36a:	b8 cf       	rjmp	.-144    	; 0x2dc <admin_callFunc+0x142>
						}
					}
				}
				else UART_printText("\r\nThe list is Full \r\n");
     36c:	80 e7       	ldi	r24, 0x70	; 112
     36e:	93 e0       	ldi	r25, 0x03	; 3
     370:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     374:	b3 cf       	rjmp	.-154    	; 0x2dc <admin_callFunc+0x142>
			}
			else if(choice== '2'){
     376:	82 33       	cpi	r24, 0x32	; 50
     378:	09 f5       	brne	.+66     	; 0x3bc <admin_callFunc+0x222>
				if(last_userNum>0){
     37a:	11 23       	and	r17, r17
     37c:	d1 f0       	breq	.+52     	; 0x3b2 <admin_callFunc+0x218>
					UART_printText("\r\nEnter the 6-characters name of the user: ");
     37e:	86 e8       	ldi	r24, 0x86	; 134
     380:	93 e0       	ldi	r25, 0x03	; 3
     382:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
					UART_readString(USER_SIZE, user);
     386:	be 01       	movw	r22, r28
     388:	6f 5f       	subi	r22, 0xFF	; 255
     38a:	7f 4f       	sbci	r23, 0xFF	; 255
     38c:	86 e0       	ldi	r24, 0x06	; 6
     38e:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_readString>
					if(EEPROM_ui8CheckIfUserExist(user)) EEPROM_vDeleteUser(user);
     392:	ce 01       	movw	r24, r28
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	0e 94 b4 04 	call	0x968	; 0x968 <EEPROM_ui8CheckIfUserExist>
     39a:	88 23       	and	r24, r24
     39c:	29 f0       	breq	.+10     	; 0x3a8 <admin_callFunc+0x20e>
     39e:	ce 01       	movw	r24, r28
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <EEPROM_vDeleteUser>
     3a6:	9a cf       	rjmp	.-204    	; 0x2dc <admin_callFunc+0x142>
					else UART_printText("\r\nThe user is not found \r\n");
     3a8:	82 eb       	ldi	r24, 0xB2	; 178
     3aa:	93 e0       	ldi	r25, 0x03	; 3
     3ac:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     3b0:	95 cf       	rjmp	.-214    	; 0x2dc <admin_callFunc+0x142>
				}
				else UART_printText("\r\nThe list is Empty \r\n");
     3b2:	8d ec       	ldi	r24, 0xCD	; 205
     3b4:	93 e0       	ldi	r25, 0x03	; 3
     3b6:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     3ba:	90 cf       	rjmp	.-224    	; 0x2dc <admin_callFunc+0x142>
			}
			else if(choice== '3'){
     3bc:	83 33       	cpi	r24, 0x33	; 51
     3be:	09 f0       	breq	.+2      	; 0x3c2 <admin_callFunc+0x228>
     3c0:	8d cf       	rjmp	.-230    	; 0x2dc <admin_callFunc+0x142>
				if(last_userNum>0){
     3c2:	11 23       	and	r17, r17
     3c4:	b1 f1       	breq	.+108    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
					UART_printText("\r\nEnter the 6-characters name of the user: ");
     3c6:	86 e8       	ldi	r24, 0x86	; 134
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
					UART_readString(USER_SIZE, user);
     3ce:	be 01       	movw	r22, r28
     3d0:	6f 5f       	subi	r22, 0xFF	; 255
     3d2:	7f 4f       	sbci	r23, 0xFF	; 255
     3d4:	86 e0       	ldi	r24, 0x06	; 6
     3d6:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_readString>
					if(EEPROM_ui8CheckIfUserExist(user)){
     3da:	ce 01       	movw	r24, r28
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	0e 94 b4 04 	call	0x968	; 0x968 <EEPROM_ui8CheckIfUserExist>
     3e2:	88 23       	and	r24, r24
     3e4:	09 f1       	breq	.+66     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
						UART_printText("\r\nEnter the new 4-characters password you want to change it to: ");
     3e6:	84 ee       	ldi	r24, 0xE4	; 228
     3e8:	93 e0       	ldi	r25, 0x03	; 3
     3ea:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
						while(1){
							UART_readString(PASS_SIZE, pass);
     3ee:	be 01       	movw	r22, r28
     3f0:	69 5f       	subi	r22, 0xF9	; 249
     3f2:	7f 4f       	sbci	r23, 0xFF	; 255
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_readString>
							if(EEPROM_ui8CheckIfPassExist(pass)) UART_printText("\r\nAnother user is using the same password, try another one: ");
     3fa:	ce 01       	movw	r24, r28
     3fc:	07 96       	adiw	r24, 0x07	; 7
     3fe:	0e 94 ef 04 	call	0x9de	; 0x9de <EEPROM_ui8CheckIfPassExist>
     402:	88 23       	and	r24, r24
     404:	29 f0       	breq	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     406:	83 e3       	ldi	r24, 0x33	; 51
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
							else{ EEPROM_vAddUser(user, pass); UART_printText("\r\n"); break;}
						}
     40e:	ef cf       	rjmp	.-34     	; 0x3ee <admin_callFunc+0x254>
					if(EEPROM_ui8CheckIfUserExist(user)){
						UART_printText("\r\nEnter the new 4-characters password you want to change it to: ");
						while(1){
							UART_readString(PASS_SIZE, pass);
							if(EEPROM_ui8CheckIfPassExist(pass)) UART_printText("\r\nAnother user is using the same password, try another one: ");
							else{ EEPROM_vAddUser(user, pass); UART_printText("\r\n"); break;}
     410:	be 01       	movw	r22, r28
     412:	69 5f       	subi	r22, 0xF9	; 249
     414:	7f 4f       	sbci	r23, 0xFF	; 255
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 62 05 	call	0xac4	; 0xac4 <EEPROM_vAddUser>
     41e:	86 eb       	ldi	r24, 0xB6	; 182
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     426:	5a cf       	rjmp	.-332    	; 0x2dc <admin_callFunc+0x142>
						}
					}
					else UART_printText("\r\nThe user is not found \r\n");
     428:	82 eb       	ldi	r24, 0xB2	; 178
     42a:	93 e0       	ldi	r25, 0x03	; 3
     42c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
     430:	55 cf       	rjmp	.-342    	; 0x2dc <admin_callFunc+0x142>
				}
				else UART_printText("\r\nThe list is Empty \r\n");
     432:	8d ec       	ldi	r24, 0xCD	; 205
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
			}
		}
     43a:	50 cf       	rjmp	.-352    	; 0x2dc <admin_callFunc+0x142>
		/*EEPROM editing*/
		break;
		
		default: UART_printText("invalid choice \r\n"); break;
     43c:	8c e2       	ldi	r24, 0x2C	; 44
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	}
	admin_funcChoice();                                      // Ask Admin what does he want to do next
     444:	0e 94 a0 00 	call	0x140	; 0x140 <admin_funcChoice>
}
     448:	2a 96       	adiw	r28, 0x0a	; 10
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	08 95       	ret

0000045c <__vector_1>:

ISR(INT0_vect)
{
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	1f 93       	push	r17
     468:	2f 93       	push	r18
     46a:	3f 93       	push	r19
     46c:	4f 93       	push	r20
     46e:	5f 93       	push	r21
     470:	6f 93       	push	r22
     472:	7f 93       	push	r23
     474:	8f 93       	push	r24
     476:	9f 93       	push	r25
     478:	af 93       	push	r26
     47a:	bf 93       	push	r27
     47c:	ef 93       	push	r30
     47e:	ff 93       	push	r31
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	2c 97       	sbiw	r28, 0x0c	; 12
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	cd bf       	out	0x3d, r28	; 61
	/*uint8 tog=1;
	if(admin_validityFlag==TRUE){
		admin_validityFlag= FALSE;
		tog= 2;
	}*/
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET))
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 59 04 	call	0x8b2	; 0x8b2 <EEPROM_ui8ReadByteFromAddress>
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	51 f1       	breq	.+84     	; 0x4ee <__vector_1+0x92>
	{
		EEPROM_vWriteByteToAddress(GUESTS_NUM_ADDRESS, 0);
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	8f e1       	ldi	r24, 0x1F	; 31
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_vWriteByteToAddress>
		UART_printText("Login for first time \r\nSet your password: ");
     4a4:	85 e2       	ldi	r24, 0x25	; 37
     4a6:	94 e0       	ldi	r25, 0x04	; 4
     4a8:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
		/********************************* setting Admin password **********************************************/
		
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};        //the array where it stored the password
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	89 87       	std	Y+9, r24	; 0x09
     4b0:	8a 87       	std	Y+10, r24	; 0x0a
     4b2:	8b 87       	std	Y+11, r24	; 0x0b
     4b4:	8c 87       	std	Y+12, r24	; 0x0c
		UART_readString(PASS_SIZE, pass);
     4b6:	be 01       	movw	r22, r28
     4b8:	67 5f       	subi	r22, 0xF7	; 247
     4ba:	7f 4f       	sbci	r23, 0xFF	; 255
     4bc:	84 e0       	ldi	r24, 0x04	; 4
     4be:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_readString>
		UART_printText("\r\n");
     4c2:	86 eb       	ldi	r24, 0xB6	; 182
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
		
		EEPROM_vWriteBlockToAddress(EEPROM_ADMIN_ADDRESS,pass,PASS_SIZE);           //save the entire password as a block to the EEPROM
     4ca:	44 e0       	ldi	r20, 0x04	; 4
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	be 01       	movw	r22, r28
     4d0:	67 5f       	subi	r22, 0xF7	; 247
     4d2:	7f 4f       	sbci	r23, 0xFF	; 255
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 8d 04 	call	0x91a	; 0x91a <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);             //write the status of pass as it is set
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_vWriteByteToAddress>
		UART_printText("Confirmation, ");
     4e6:	80 e5       	ldi	r24, 0x50	; 80
     4e8:	94 e0       	ldi	r25, 0x04	; 4
     4ea:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	}
	
	uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};          //temporarily hold the entire password that will be entered by the user to be check
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	8a 83       	std	Y+2, r24	; 0x02
     4f4:	8b 83       	std	Y+3, r24	; 0x03
     4f6:	8c 83       	std	Y+4, r24	; 0x04
	uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};   //temporarily hold the entire stored password that is written by the user for the first time
     4f8:	8d 83       	std	Y+5, r24	; 0x05
     4fa:	8e 83       	std	Y+6, r24	; 0x06
     4fc:	8f 83       	std	Y+7, r24	; 0x07
     4fe:	88 87       	std	Y+8, r24	; 0x08

	EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);   //read the stored pass from the EEPROM
     500:	44 e0       	ldi	r20, 0x04	; 4
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	be 01       	movw	r22, r28
     506:	6b 5f       	subi	r22, 0xFB	; 251
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <EEPROM_vReadBlockFromAddress>
	uint8 pass_tries_count=0;                                                     //stores how many times the user tried to log in to the system and failed
	
	UART_printText("Enter your password: ");
     512:	8f e5       	ldi	r24, 0x5F	; 95
     514:	94 e0       	ldi	r25, 0x04	; 4
     516:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
	
	uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};          //temporarily hold the entire password that will be entered by the user to be check
	uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};   //temporarily hold the entire stored password that is written by the user for the first time

	EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);   //read the stored pass from the EEPROM
	uint8 pass_tries_count=0;                                                     //stores how many times the user tried to log in to the system and failed
     51a:	10 e0       	ldi	r17, 0x00	; 0
	
	UART_printText("Enter your password: ");
	while(1){
		if(!readBit(PIND, 2)) break;
     51c:	82 9b       	sbis	0x10, 2	; 16
     51e:	43 c0       	rjmp	.+134    	; 0x5a6 <__vector_1+0x14a>
		
		UART_readString(PASS_SIZE, pass);
     520:	be 01       	movw	r22, r28
     522:	6f 5f       	subi	r22, 0xFF	; 255
     524:	7f 4f       	sbci	r23, 0xFF	; 255
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_readString>
		UART_printText("\r\n");
     52c:	86 eb       	ldi	r24, 0xB6	; 182
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
		if(ui8Compare(pass, stored_pass, PASS_SIZE)){
     534:	44 e0       	ldi	r20, 0x04	; 4
     536:	be 01       	movw	r22, r28
     538:	6b 5f       	subi	r22, 0xFB	; 251
     53a:	7f 4f       	sbci	r23, 0xFF	; 255
     53c:	ce 01       	movw	r24, r28
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	0e 94 ed 02 	call	0x5da	; 0x5da <ui8Compare>
     544:	88 23       	and	r24, r24
     546:	51 f0       	breq	.+20     	; 0x55c <__vector_1+0x100>
			UART_printText("Right Password, Welcome Admin \r\n");
     548:	85 e7       	ldi	r24, 0x75	; 117
     54a:	94 e0       	ldi	r25, 0x04	; 4
     54c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
			admin_validityFlag= true;                        // compare if given "pass" match his password in the list if yes toggle the right password 'led2' and put the access flag to 1 to allow access
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <admin_validityFlag>
			pass_tries_count=0;                                                  //clear the counter of wrong tries
			admin_funcChoice();                                      // Ask Admin what does he want to do
     556:	0e 94 a0 00 	call	0x140	; 0x140 <admin_funcChoice>
			break;
     55a:	25 c0       	rjmp	.+74     	; 0x5a6 <__vector_1+0x14a>
		}
		else{
			UART_printText("Wrong Password");
     55c:	86 e9       	ldi	r24, 0x96	; 150
     55e:	94 e0       	ldi	r25, 0x04	; 4
     560:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
			admin_validityFlag= false;                                                          // else if given password is wrong toggle the wrong password 'led0' and put the access flag to 0 for no access
     564:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <admin_validityFlag>
			pass_tries_count++;													 //increase the number of wrong tries to block login if it exceeds the allowed tries
     568:	1f 5f       	subi	r17, 0xFF	; 255
			if (pass_tries_count>=TRIES_ALLOWED)								 //if the condition of the block mode is true
     56a:	13 30       	cpi	r17, 0x03	; 3
     56c:	68 f0       	brcs	.+26     	; 0x588 <__vector_1+0x12c>
			{
				UART_printText(", You have been blocked \r\n\r\nReset The System");
     56e:	85 ea       	ldi	r24, 0xA5	; 165
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);			 //write to the EEPROM TRUE to the the block mode address
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	80 e1       	ldi	r24, 0x10	; 16
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_vWriteByteToAddress>
				block_mode_flag = true;										     //turn on block mode
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <block_mode_flag>
				break;
     586:	0f c0       	rjmp	.+30     	; 0x5a6 <__vector_1+0x14a>
			}
			UART_printText(", You have ");
     588:	82 ed       	ldi	r24, 0xD2	; 210
     58a:	94 e0       	ldi	r25, 0x04	; 4
     58c:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
			UART_printNum(TRIES_ALLOWED-pass_tries_count);
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	81 1b       	sub	r24, r17
     596:	91 09       	sbc	r25, r1
     598:	0e 94 f6 07 	call	0xfec	; 0xfec <UART_printNum>
			UART_printText(" trial(s) left \r\nTry again: ");
     59c:	8e ed       	ldi	r24, 0xDE	; 222
     59e:	94 e0       	ldi	r25, 0x04	; 4
     5a0:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
		}
	}
     5a4:	bb cf       	rjmp	.-138    	; 0x51c <__vector_1+0xc0>
     5a6:	2c 96       	adiw	r28, 0x0c	; 12
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	ff 91       	pop	r31
     5b8:	ef 91       	pop	r30
     5ba:	bf 91       	pop	r27
     5bc:	af 91       	pop	r26
     5be:	9f 91       	pop	r25
     5c0:	8f 91       	pop	r24
     5c2:	7f 91       	pop	r23
     5c4:	6f 91       	pop	r22
     5c6:	5f 91       	pop	r21
     5c8:	4f 91       	pop	r20
     5ca:	3f 91       	pop	r19
     5cc:	2f 91       	pop	r18
     5ce:	1f 91       	pop	r17
     5d0:	0f 90       	pop	r0
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	0f 90       	pop	r0
     5d6:	1f 90       	pop	r1
     5d8:	18 95       	reti

000005da <ui8Compare>:

extern volatile uint16 session_counter;//Stores the session time
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8Compare(const uint8* pass1, const uint8* pass2, const uint8 size)
{
     5da:	dc 01       	movw	r26, r24
	uint8 pin_counter=0;//the offset of the character of the pin
     5dc:	90 e0       	ldi	r25, 0x00	; 0
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
     5de:	0d c0       	rjmp	.+26     	; 0x5fa <ui8Compare+0x20>
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
     5e0:	29 2f       	mov	r18, r25
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	fd 01       	movw	r30, r26
     5e6:	e2 0f       	add	r30, r18
     5e8:	f3 1f       	adc	r31, r19
     5ea:	50 81       	ld	r21, Z
     5ec:	fb 01       	movw	r30, r22
     5ee:	e2 0f       	add	r30, r18
     5f0:	f3 1f       	adc	r31, r19
     5f2:	20 81       	ld	r18, Z
     5f4:	52 13       	cpse	r21, r18
     5f6:	05 c0       	rjmp	.+10     	; 0x602 <ui8Compare+0x28>
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
     5f8:	9f 5f       	subi	r25, 0xFF	; 255

uint8 ui8Compare(const uint8* pass1, const uint8* pass2, const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
     5fa:	94 17       	cp	r25, r20
     5fc:	88 f3       	brcs	.-30     	; 0x5e0 <ui8Compare+0x6>
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8Compare(const uint8* pass1, const uint8* pass2, const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	08 95       	ret
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
     602:	80 e0       	ldi	r24, 0x00	; 0
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
     604:	08 95       	ret

00000606 <DIO_VidSetPinDirection>:
     606:	41 11       	cpse	r20, r1
     608:	3c c0       	rjmp	.+120    	; 0x682 <DIO_VidSetPinDirection+0x7c>
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	99 f0       	breq	.+38     	; 0x634 <DIO_VidSetPinDirection+0x2e>
     60e:	28 f0       	brcs	.+10     	; 0x61a <DIO_VidSetPinDirection+0x14>
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	e9 f0       	breq	.+58     	; 0x64e <DIO_VidSetPinDirection+0x48>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	41 f1       	breq	.+80     	; 0x668 <DIO_VidSetPinDirection+0x62>
     618:	08 95       	ret
     61a:	2a b3       	in	r18, 0x1a	; 26
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_VidSetPinDirection+0x20>
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	6a 95       	dec	r22
     628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_VidSetPinDirection+0x1c>
     62a:	80 95       	com	r24
     62c:	82 23       	and	r24, r18
     62e:	8a bb       	out	0x1a, r24	; 26
     630:	8a bb       	out	0x1a, r24	; 26
     632:	08 95       	ret
     634:	27 b3       	in	r18, 0x17	; 23
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_VidSetPinDirection+0x3a>
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	6a 95       	dec	r22
     642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_VidSetPinDirection+0x36>
     644:	80 95       	com	r24
     646:	82 23       	and	r24, r18
     648:	87 bb       	out	0x17, r24	; 23
     64a:	87 bb       	out	0x17, r24	; 23
     64c:	08 95       	ret
     64e:	24 b3       	in	r18, 0x14	; 20
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_VidSetPinDirection+0x54>
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	6a 95       	dec	r22
     65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_VidSetPinDirection+0x50>
     65e:	80 95       	com	r24
     660:	82 23       	and	r24, r18
     662:	84 bb       	out	0x14, r24	; 20
     664:	84 bb       	out	0x14, r24	; 20
     666:	08 95       	ret
     668:	21 b3       	in	r18, 0x11	; 17
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_VidSetPinDirection+0x6e>
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	6a 95       	dec	r22
     676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_VidSetPinDirection+0x6a>
     678:	80 95       	com	r24
     67a:	82 23       	and	r24, r18
     67c:	81 bb       	out	0x11, r24	; 17
     67e:	81 bb       	out	0x11, r24	; 17
     680:	08 95       	ret
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	91 f0       	breq	.+36     	; 0x6aa <DIO_VidSetPinDirection+0xa4>
     686:	28 f0       	brcs	.+10     	; 0x692 <DIO_VidSetPinDirection+0x8c>
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	d9 f0       	breq	.+54     	; 0x6c2 <DIO_VidSetPinDirection+0xbc>
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	29 f1       	breq	.+74     	; 0x6da <DIO_VidSetPinDirection+0xd4>
     690:	08 95       	ret
     692:	2a b3       	in	r18, 0x1a	; 26
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_VidSetPinDirection+0x98>
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	6a 95       	dec	r22
     6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_VidSetPinDirection+0x94>
     6a2:	82 2b       	or	r24, r18
     6a4:	8a bb       	out	0x1a, r24	; 26
     6a6:	8a bb       	out	0x1a, r24	; 26
     6a8:	08 95       	ret
     6aa:	27 b3       	in	r18, 0x17	; 23
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_VidSetPinDirection+0xb0>
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	6a 95       	dec	r22
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_VidSetPinDirection+0xac>
     6ba:	82 2b       	or	r24, r18
     6bc:	87 bb       	out	0x17, r24	; 23
     6be:	87 bb       	out	0x17, r24	; 23
     6c0:	08 95       	ret
     6c2:	24 b3       	in	r18, 0x14	; 20
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_VidSetPinDirection+0xc8>
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	6a 95       	dec	r22
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_VidSetPinDirection+0xc4>
     6d2:	82 2b       	or	r24, r18
     6d4:	84 bb       	out	0x14, r24	; 20
     6d6:	84 bb       	out	0x14, r24	; 20
     6d8:	08 95       	ret
     6da:	21 b3       	in	r18, 0x11	; 17
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_VidSetPinDirection+0xe0>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	6a 95       	dec	r22
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_VidSetPinDirection+0xdc>
     6ea:	82 2b       	or	r24, r18
     6ec:	81 bb       	out	0x11, r24	; 17
     6ee:	81 bb       	out	0x11, r24	; 17
     6f0:	08 95       	ret

000006f2 <DIO_VidSetPinValue>:
     6f2:	41 30       	cpi	r20, 0x01	; 1
     6f4:	c1 f5       	brne	.+112    	; 0x766 <DIO_VidSetPinValue+0x74>
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	91 f0       	breq	.+36     	; 0x71e <DIO_VidSetPinValue+0x2c>
     6fa:	28 f0       	brcs	.+10     	; 0x706 <DIO_VidSetPinValue+0x14>
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	d9 f0       	breq	.+54     	; 0x736 <DIO_VidSetPinValue+0x44>
     700:	83 30       	cpi	r24, 0x03	; 3
     702:	29 f1       	breq	.+74     	; 0x74e <DIO_VidSetPinValue+0x5c>
     704:	08 95       	ret
     706:	2b b3       	in	r18, 0x1b	; 27
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_VidSetPinValue+0x20>
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	6a 95       	dec	r22
     714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_VidSetPinValue+0x1c>
     716:	82 2b       	or	r24, r18
     718:	8b bb       	out	0x1b, r24	; 27
     71a:	8b bb       	out	0x1b, r24	; 27
     71c:	08 95       	ret
     71e:	28 b3       	in	r18, 0x18	; 24
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_VidSetPinValue+0x38>
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	6a 95       	dec	r22
     72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_VidSetPinValue+0x34>
     72e:	82 2b       	or	r24, r18
     730:	88 bb       	out	0x18, r24	; 24
     732:	88 bb       	out	0x18, r24	; 24
     734:	08 95       	ret
     736:	25 b3       	in	r18, 0x15	; 21
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_VidSetPinValue+0x50>
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	6a 95       	dec	r22
     744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_VidSetPinValue+0x4c>
     746:	82 2b       	or	r24, r18
     748:	85 bb       	out	0x15, r24	; 21
     74a:	85 bb       	out	0x15, r24	; 21
     74c:	08 95       	ret
     74e:	22 b3       	in	r18, 0x12	; 18
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_VidSetPinValue+0x68>
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	6a 95       	dec	r22
     75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_VidSetPinValue+0x64>
     75e:	82 2b       	or	r24, r18
     760:	82 bb       	out	0x12, r24	; 18
     762:	82 bb       	out	0x12, r24	; 18
     764:	08 95       	ret
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	99 f0       	breq	.+38     	; 0x790 <DIO_VidSetPinValue+0x9e>
     76a:	28 f0       	brcs	.+10     	; 0x776 <DIO_VidSetPinValue+0x84>
     76c:	82 30       	cpi	r24, 0x02	; 2
     76e:	e9 f0       	breq	.+58     	; 0x7aa <DIO_VidSetPinValue+0xb8>
     770:	83 30       	cpi	r24, 0x03	; 3
     772:	41 f1       	breq	.+80     	; 0x7c4 <DIO_VidSetPinValue+0xd2>
     774:	08 95       	ret
     776:	2b b3       	in	r18, 0x1b	; 27
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_VidSetPinValue+0x90>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	6a 95       	dec	r22
     784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_VidSetPinValue+0x8c>
     786:	80 95       	com	r24
     788:	82 23       	and	r24, r18
     78a:	8b bb       	out	0x1b, r24	; 27
     78c:	8b bb       	out	0x1b, r24	; 27
     78e:	08 95       	ret
     790:	28 b3       	in	r18, 0x18	; 24
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_VidSetPinValue+0xaa>
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	6a 95       	dec	r22
     79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_VidSetPinValue+0xa6>
     7a0:	80 95       	com	r24
     7a2:	82 23       	and	r24, r18
     7a4:	88 bb       	out	0x18, r24	; 24
     7a6:	88 bb       	out	0x18, r24	; 24
     7a8:	08 95       	ret
     7aa:	25 b3       	in	r18, 0x15	; 21
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_VidSetPinValue+0xc4>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	6a 95       	dec	r22
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_VidSetPinValue+0xc0>
     7ba:	80 95       	com	r24
     7bc:	82 23       	and	r24, r18
     7be:	85 bb       	out	0x15, r24	; 21
     7c0:	85 bb       	out	0x15, r24	; 21
     7c2:	08 95       	ret
     7c4:	22 b3       	in	r18, 0x12	; 18
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_VidSetPinValue+0xde>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	6a 95       	dec	r22
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_VidSetPinValue+0xda>
     7d4:	80 95       	com	r24
     7d6:	82 23       	and	r24, r18
     7d8:	82 bb       	out	0x12, r24	; 18
     7da:	82 bb       	out	0x12, r24	; 18
     7dc:	08 95       	ret

000007de <DIO_VidGetPinValue>:
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	89 f0       	breq	.+34     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7e2:	28 f0       	brcs	.+10     	; 0x7ee <DIO_VidGetPinValue+0x10>
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	c9 f0       	breq	.+50     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7e8:	83 30       	cpi	r24, 0x03	; 3
     7ea:	11 f1       	breq	.+68     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     7ec:	08 95       	ret
     7ee:	89 b3       	in	r24, 0x19	; 25
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_VidGetPinValue+0x1a>
     7f4:	95 95       	asr	r25
     7f6:	87 95       	ror	r24
     7f8:	6a 95       	dec	r22
     7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_VidGetPinValue+0x16>
     7fc:	81 70       	andi	r24, 0x01	; 1
     7fe:	fa 01       	movw	r30, r20
     800:	80 83       	st	Z, r24
     802:	08 95       	ret
     804:	86 b3       	in	r24, 0x16	; 22
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80a:	95 95       	asr	r25
     80c:	87 95       	ror	r24
     80e:	6a 95       	dec	r22
     810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     812:	81 70       	andi	r24, 0x01	; 1
     814:	fa 01       	movw	r30, r20
     816:	80 83       	st	Z, r24
     818:	08 95       	ret
     81a:	83 b3       	in	r24, 0x13	; 19
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     820:	95 95       	asr	r25
     822:	87 95       	ror	r24
     824:	6a 95       	dec	r22
     826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     828:	81 70       	andi	r24, 0x01	; 1
     82a:	fa 01       	movw	r30, r20
     82c:	80 83       	st	Z, r24
     82e:	08 95       	ret
     830:	80 b3       	in	r24, 0x10	; 16
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     836:	95 95       	asr	r25
     838:	87 95       	ror	r24
     83a:	6a 95       	dec	r22
     83c:	e2 f7       	brpl	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83e:	81 70       	andi	r24, 0x01	; 1
     840:	fa 01       	movw	r30, r20
     842:	80 83       	st	Z, r24
     844:	08 95       	ret

00000846 <DIO_VidSetPortDirection>:
     846:	61 11       	cpse	r22, r1
     848:	10 c0       	rjmp	.+32     	; 0x86a <__stack+0xb>
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	41 f0       	breq	.+16     	; 0x85e <DIO_VidSetPortDirection+0x18>
     84e:	28 f0       	brcs	.+10     	; 0x85a <DIO_VidSetPortDirection+0x14>
     850:	82 30       	cpi	r24, 0x02	; 2
     852:	39 f0       	breq	.+14     	; 0x862 <__stack+0x3>
     854:	83 30       	cpi	r24, 0x03	; 3
     856:	39 f0       	breq	.+14     	; 0x866 <__stack+0x7>
     858:	08 95       	ret
     85a:	1a ba       	out	0x1a, r1	; 26
     85c:	08 95       	ret
     85e:	17 ba       	out	0x17, r1	; 23
     860:	08 95       	ret
     862:	14 ba       	out	0x14, r1	; 20
     864:	08 95       	ret
     866:	11 ba       	out	0x11, r1	; 17
     868:	08 95       	ret
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	49 f0       	breq	.+18     	; 0x880 <__stack+0x21>
     86e:	28 f0       	brcs	.+10     	; 0x87a <__stack+0x1b>
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	49 f0       	breq	.+18     	; 0x886 <__stack+0x27>
     874:	83 30       	cpi	r24, 0x03	; 3
     876:	51 f0       	breq	.+20     	; 0x88c <__stack+0x2d>
     878:	08 95       	ret
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	8a bb       	out	0x1a, r24	; 26
     87e:	08 95       	ret
     880:	8f ef       	ldi	r24, 0xFF	; 255
     882:	87 bb       	out	0x17, r24	; 23
     884:	08 95       	ret
     886:	8f ef       	ldi	r24, 0xFF	; 255
     888:	84 bb       	out	0x14, r24	; 20
     88a:	08 95       	ret
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	81 bb       	out	0x11, r24	; 17
     890:	08 95       	ret

00000892 <DIO_VidSetPortValue>:
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	41 f0       	breq	.+16     	; 0x8a6 <DIO_VidSetPortValue+0x14>
     896:	28 f0       	brcs	.+10     	; 0x8a2 <DIO_VidSetPortValue+0x10>
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	39 f0       	breq	.+14     	; 0x8aa <DIO_VidSetPortValue+0x18>
     89c:	83 30       	cpi	r24, 0x03	; 3
     89e:	39 f0       	breq	.+14     	; 0x8ae <DIO_VidSetPortValue+0x1c>
     8a0:	08 95       	ret
     8a2:	6b bb       	out	0x1b, r22	; 27
     8a4:	08 95       	ret
     8a6:	68 bb       	out	0x18, r22	; 24
     8a8:	08 95       	ret
     8aa:	65 bb       	out	0x15, r22	; 21
     8ac:	08 95       	ret
     8ae:	62 bb       	out	0x12, r22	; 18
     8b0:	08 95       	ret

000008b2 <EEPROM_ui8ReadByteFromAddress>:
uint16 GUEST_PASS_ADDRESS[GUESTS_MAX_NUM]= {0x126, 0x136, 0x146, 0x156, 0x166, 0x176, 0x186, 0x196, 0x1A6, 0x1B6};

uint8 EEPROM_ui8ReadByteFromAddress(const uint16 u16Address)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     8b2:	e1 99       	sbic	0x1c, 1	; 28
     8b4:	fe cf       	rjmp	.-4      	; 0x8b2 <EEPROM_ui8ReadByteFromAddress>
	;
	/* Set up address register */
	EEAR = u16Address;
     8b6:	9f bb       	out	0x1f, r25	; 31
     8b8:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     8ba:	8c b3       	in	r24, 0x1c	; 28
     8bc:	81 60       	ori	r24, 0x01	; 1
     8be:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	return EEDR;
     8c0:	8d b3       	in	r24, 0x1d	; 29
}
     8c2:	08 95       	ret

000008c4 <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
{
     8c4:	dc 01       	movw	r26, r24
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     8c6:	e1 99       	sbic	0x1c, 1	; 28
     8c8:	fe cf       	rjmp	.-4      	; 0x8c6 <EEPROM_vReadBlockFromAddress+0x2>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	0f c0       	rjmp	.+30     	; 0x8ee <EEPROM_vReadBlockFromAddress+0x2a>
	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
     8d0:	f9 01       	movw	r30, r18
     8d2:	ea 0f       	add	r30, r26
     8d4:	fb 1f       	adc	r31, r27
     8d6:	ff bb       	out	0x1f, r31	; 31
     8d8:	ee bb       	out	0x1e, r30	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     8da:	9c b3       	in	r25, 0x1c	; 28
     8dc:	91 60       	ori	r25, 0x01	; 1
     8de:	9c bb       	out	0x1c, r25	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
     8e0:	fb 01       	movw	r30, r22
     8e2:	e2 0f       	add	r30, r18
     8e4:	f3 1f       	adc	r31, r19
     8e6:	9d b3       	in	r25, 0x1d	; 29
     8e8:	90 83       	st	Z, r25

		counter++;//increase the bytes counter
     8ea:	2f 5f       	subi	r18, 0xFF	; 255
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     8ee:	24 17       	cp	r18, r20
     8f0:	35 07       	cpc	r19, r21
     8f2:	70 f3       	brcs	.-36     	; 0x8d0 <EEPROM_vReadBlockFromAddress+0xc>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
     8f4:	08 95       	ret

000008f6 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const uint16 uiAddress, const uint8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     8f6:	e1 99       	sbic	0x1c, 1	; 28
     8f8:	fe cf       	rjmp	.-4      	; 0x8f6 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
     8fa:	9f bb       	out	0x1f, r25	; 31
     8fc:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     8fe:	8c b3       	in	r24, 0x1c	; 28
     900:	81 60       	ori	r24, 0x01	; 1
     902:	8c bb       	out	0x1c, r24	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
     904:	8d b3       	in	r24, 0x1d	; 29
     906:	86 17       	cp	r24, r22
     908:	39 f0       	breq	.+14     	; 0x918 <EEPROM_vWriteByteToAddress+0x22>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
     90a:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     90c:	8c b3       	in	r24, 0x1c	; 28
     90e:	84 60       	ori	r24, 0x04	; 4
     910:	8c bb       	out	0x1c, r24	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     912:	8c b3       	in	r24, 0x1c	; 28
     914:	82 60       	ori	r24, 0x02	; 2
     916:	8c bb       	out	0x1c, r24	; 28
     918:	08 95       	ret

0000091a <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	dc 01       	movw	r26, r24
     920:	ea 01       	movw	r28, r20
	uint16 counter = 0;//Bytes write counter
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
	while (counter < size)
     926:	1a c0       	rjmp	.+52     	; 0x95c <EEPROM_vWriteBlockToAddress+0x42>
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     928:	e1 99       	sbic	0x1c, 1	; 28
     92a:	fe cf       	rjmp	.-4      	; 0x928 <EEPROM_vWriteBlockToAddress+0xe>
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
     92c:	c9 01       	movw	r24, r18
     92e:	8a 0f       	add	r24, r26
     930:	9b 1f       	adc	r25, r27
     932:	9f bb       	out	0x1f, r25	; 31
     934:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     936:	9c b3       	in	r25, 0x1c	; 28
     938:	91 60       	ori	r25, 0x01	; 1
     93a:	9c bb       	out	0x1c, r25	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
     93c:	5d b3       	in	r21, 0x1d	; 29
     93e:	fb 01       	movw	r30, r22
     940:	e2 0f       	add	r30, r18
     942:	f3 1f       	adc	r31, r19
     944:	90 81       	ld	r25, Z
     946:	59 17       	cp	r21, r25
     948:	39 f0       	breq	.+14     	; 0x958 <EEPROM_vWriteBlockToAddress+0x3e>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
     94a:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     94c:	9c b3       	in	r25, 0x1c	; 28
     94e:	94 60       	ori	r25, 0x04	; 4
     950:	9c bb       	out	0x1c, r25	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     952:	9c b3       	in	r25, 0x1c	; 28
     954:	92 60       	ori	r25, 0x02	; 2
     956:	9c bb       	out	0x1c, r25	; 28
		}
		else
		{

		}
		counter++;//increase bytes counter
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
     95c:	2c 17       	cp	r18, r28
     95e:	3d 07       	cpc	r19, r29
     960:	18 f3       	brcs	.-58     	; 0x928 <EEPROM_vWriteBlockToAddress+0xe>
		{

		}
		counter++;//increase bytes counter
	}
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <EEPROM_ui8CheckIfUserExist>:

uint8 EEPROM_ui8CheckIfUserExist(const uint8* user)
{
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	00 d0       	rcall	.+0      	; 0x976 <EEPROM_ui8CheckIfUserExist+0xe>
     976:	00 d0       	rcall	.+0      	; 0x978 <EEPROM_ui8CheckIfUserExist+0x10>
     978:	00 d0       	rcall	.+0      	; 0x97a <EEPROM_ui8CheckIfUserExist+0x12>
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	7c 01       	movw	r14, r24
	uint8 ret_Value= FALSE;
	uint8 stored_user[USER_SIZE];
	for(uint16 i= 0; i<GUESTS_MAX_NUM; i++){
     980:	00 e0       	ldi	r16, 0x00	; 0
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	19 c0       	rjmp	.+50     	; 0x9b8 <EEPROM_ui8CheckIfUserExist+0x50>
		EEPROM_vReadBlockFromAddress(GUEST_USER_ADDRESS[i], stored_user, USER_SIZE);
     986:	f8 01       	movw	r30, r16
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	ea 58       	subi	r30, 0x8A	; 138
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	46 e0       	ldi	r20, 0x06	; 6
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	be 01       	movw	r22, r28
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <EEPROM_vReadBlockFromAddress>
		if(ui8Compare(user, stored_user, USER_SIZE)){
     9a2:	46 e0       	ldi	r20, 0x06	; 6
     9a4:	be 01       	movw	r22, r28
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	c7 01       	movw	r24, r14
     9ac:	0e 94 ed 02 	call	0x5da	; 0x5da <ui8Compare>
     9b0:	81 11       	cpse	r24, r1
     9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <EEPROM_ui8CheckIfUserExist+0x5a>

uint8 EEPROM_ui8CheckIfUserExist(const uint8* user)
{
	uint8 ret_Value= FALSE;
	uint8 stored_user[USER_SIZE];
	for(uint16 i= 0; i<GUESTS_MAX_NUM; i++){
     9b4:	0f 5f       	subi	r16, 0xFF	; 255
     9b6:	1f 4f       	sbci	r17, 0xFF	; 255
     9b8:	0a 30       	cpi	r16, 0x0A	; 10
     9ba:	11 05       	cpc	r17, r1
     9bc:	20 f3       	brcs	.-56     	; 0x986 <EEPROM_ui8CheckIfUserExist+0x1e>
	}
}

uint8 EEPROM_ui8CheckIfUserExist(const uint8* user)
{
	uint8 ret_Value= FALSE;
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <EEPROM_ui8CheckIfUserExist+0x5c>
	uint8 stored_user[USER_SIZE];
	for(uint16 i= 0; i<GUESTS_MAX_NUM; i++){
		EEPROM_vReadBlockFromAddress(GUEST_USER_ADDRESS[i], stored_user, USER_SIZE);
		if(ui8Compare(user, stored_user, USER_SIZE)){
			ret_Value= TRUE;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	return ret_Value;
}
     9c4:	26 96       	adiw	r28, 0x06	; 6
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	08 95       	ret

000009de <EEPROM_ui8CheckIfPassExist>:

uint8 EEPROM_ui8CheckIfPassExist(const uint8* pass)
{
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <EEPROM_ui8CheckIfPassExist+0xe>
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <EEPROM_ui8CheckIfPassExist+0x10>
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	7c 01       	movw	r14, r24
	uint8 ret_Value= FALSE;
	uint8 stored_pass[PASS_SIZE];
	for(uint16 i= 0; i<GUESTS_MAX_NUM; i++){
     9f4:	00 e0       	ldi	r16, 0x00	; 0
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	19 c0       	rjmp	.+50     	; 0xa2c <EEPROM_ui8CheckIfPassExist+0x4e>
		EEPROM_vReadBlockFromAddress(GUEST_PASS_ADDRESS[i], stored_pass, PASS_SIZE);
     9fa:	f8 01       	movw	r30, r16
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	ee 59       	subi	r30, 0x9E	; 158
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	44 e0       	ldi	r20, 0x04	; 4
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	be 01       	movw	r22, r28
     a0a:	6f 5f       	subi	r22, 0xFF	; 255
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	0e 94 62 04 	call	0x8c4	; 0x8c4 <EEPROM_vReadBlockFromAddress>
		if(ui8Compare(pass, stored_pass, PASS_SIZE)){
     a16:	44 e0       	ldi	r20, 0x04	; 4
     a18:	be 01       	movw	r22, r28
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	c7 01       	movw	r24, r14
     a20:	0e 94 ed 02 	call	0x5da	; 0x5da <ui8Compare>
     a24:	81 11       	cpse	r24, r1
     a26:	07 c0       	rjmp	.+14     	; 0xa36 <EEPROM_ui8CheckIfPassExist+0x58>

uint8 EEPROM_ui8CheckIfPassExist(const uint8* pass)
{
	uint8 ret_Value= FALSE;
	uint8 stored_pass[PASS_SIZE];
	for(uint16 i= 0; i<GUESTS_MAX_NUM; i++){
     a28:	0f 5f       	subi	r16, 0xFF	; 255
     a2a:	1f 4f       	sbci	r17, 0xFF	; 255
     a2c:	0a 30       	cpi	r16, 0x0A	; 10
     a2e:	11 05       	cpc	r17, r1
     a30:	20 f3       	brcs	.-56     	; 0x9fa <EEPROM_ui8CheckIfPassExist+0x1c>
	return ret_Value;
}

uint8 EEPROM_ui8CheckIfPassExist(const uint8* pass)
{
	uint8 ret_Value= FALSE;
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <EEPROM_ui8CheckIfPassExist+0x5a>
	uint8 stored_pass[PASS_SIZE];
	for(uint16 i= 0; i<GUESTS_MAX_NUM; i++){
		EEPROM_vReadBlockFromAddress(GUEST_PASS_ADDRESS[i], stored_pass, PASS_SIZE);
		if(ui8Compare(pass, stored_pass, PASS_SIZE)){
			ret_Value= TRUE;
     a36:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	return ret_Value;
}
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	08 95       	ret

00000a4e <EEPROM_ui8CheckIfPassExist2>:

sint16 EEPROM_ui8CheckIfPassExist2(const uint8* pass)
{
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <EEPROM_ui8CheckIfPassExist2+0xe>
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <EEPROM_ui8CheckIfPassExist2+0x10>
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	7c 01       	movw	r14, r24
	sint8 ret_Value= -1;
	uint8 stored_pass[PASS_SIZE];
	for(uint16 i= 0; i<GUESTS_MAX_NUM; i++){
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	10 e0       	ldi	r17, 0x00	; 0
     a68:	1b c0       	rjmp	.+54     	; 0xaa0 <EEPROM_ui8CheckIfPassExist2+0x52>
		EEPROM_vReadBlockFromAddress(GUEST_PASS_ADDRESS[i], stored_pass, PASS_SIZE);
     a6a:	f8 01       	movw	r30, r16
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ee 59       	subi	r30, 0x9E	; 158
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	44 e0       	ldi	r20, 0x04	; 4
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	be 01       	movw	r22, r28
     a7a:	6f 5f       	subi	r22, 0xFF	; 255
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01
     a82:	0e 94 62 04 	call	0x8c4	; 0x8c4 <EEPROM_vReadBlockFromAddress>
		if(ui8Compare(pass, stored_pass, PASS_SIZE)){
     a86:	44 e0       	ldi	r20, 0x04	; 4
     a88:	be 01       	movw	r22, r28
     a8a:	6f 5f       	subi	r22, 0xFF	; 255
     a8c:	7f 4f       	sbci	r23, 0xFF	; 255
     a8e:	c7 01       	movw	r24, r14
     a90:	0e 94 ed 02 	call	0x5da	; 0x5da <ui8Compare>
     a94:	88 23       	and	r24, r24
     a96:	11 f0       	breq	.+4      	; 0xa9c <EEPROM_ui8CheckIfPassExist2+0x4e>
			ret_Value = i;
     a98:	80 2f       	mov	r24, r16
			break;
     a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <EEPROM_ui8CheckIfPassExist2+0x5a>

sint16 EEPROM_ui8CheckIfPassExist2(const uint8* pass)
{
	sint8 ret_Value= -1;
	uint8 stored_pass[PASS_SIZE];
	for(uint16 i= 0; i<GUESTS_MAX_NUM; i++){
     a9c:	0f 5f       	subi	r16, 0xFF	; 255
     a9e:	1f 4f       	sbci	r17, 0xFF	; 255
     aa0:	0a 30       	cpi	r16, 0x0A	; 10
     aa2:	11 05       	cpc	r17, r1
     aa4:	10 f3       	brcs	.-60     	; 0xa6a <EEPROM_ui8CheckIfPassExist2+0x1c>
	return ret_Value;
}

sint16 EEPROM_ui8CheckIfPassExist2(const uint8* pass)
{
	sint8 ret_Value= -1;
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
			ret_Value = i;
			break;
		}
	}
	return ret_Value;
}
     aa8:	08 2e       	mov	r0, r24
     aaa:	00 0c       	add	r0, r0
     aac:	99 0b       	sbc	r25, r25
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	08 95       	ret

00000ac4 <EEPROM_vAddUser>:

void EEPROM_vAddUser(const uint8* user, const uint8* pass)
{
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	6c 01       	movw	r12, r24
     ad4:	7b 01       	movw	r14, r22
	uint8 last_userNum= EEPROM_ui8ReadByteFromAddress(GUESTS_NUM_ADDRESS);
     ad6:	8f e1       	ldi	r24, 0x1F	; 31
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	0e 94 59 04 	call	0x8b2	; 0x8b2 <EEPROM_ui8ReadByteFromAddress>
     ade:	18 2f       	mov	r17, r24
	EEPROM_vWriteBlockToAddress(GUEST_USER_ADDRESS[last_userNum], user, USER_SIZE);
     ae0:	c8 2f       	mov	r28, r24
     ae2:	d0 e0       	ldi	r29, 0x00	; 0
     ae4:	cc 0f       	add	r28, r28
     ae6:	dd 1f       	adc	r29, r29
     ae8:	fe 01       	movw	r30, r28
     aea:	ea 58       	subi	r30, 0x8A	; 138
     aec:	ff 4f       	sbci	r31, 0xFF	; 255
     aee:	46 e0       	ldi	r20, 0x06	; 6
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	b6 01       	movw	r22, r12
     af4:	80 81       	ld	r24, Z
     af6:	91 81       	ldd	r25, Z+1	; 0x01
     af8:	0e 94 8d 04 	call	0x91a	; 0x91a <EEPROM_vWriteBlockToAddress>
	EEPROM_vWriteBlockToAddress(GUEST_PASS_ADDRESS[last_userNum], pass, PASS_SIZE);
     afc:	fe 01       	movw	r30, r28
     afe:	ee 59       	subi	r30, 0x9E	; 158
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	44 e0       	ldi	r20, 0x04	; 4
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	b7 01       	movw	r22, r14
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	0e 94 8d 04 	call	0x91a	; 0x91a <EEPROM_vWriteBlockToAddress>
	EEPROM_vWriteByteToAddress(GUEST_STATUS_ADDRESS[last_userNum], PASS_SET);
     b10:	c6 57       	subi	r28, 0x76	; 118
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	88 81       	ld	r24, Y
     b18:	99 81       	ldd	r25, Y+1	; 0x01
     b1a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_vWriteByteToAddress>
	EEPROM_vWriteByteToAddress(GUESTS_NUM_ADDRESS, last_userNum+1);
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	61 0f       	add	r22, r17
     b22:	8f e1       	ldi	r24, 0x1F	; 31
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_vWriteByteToAddress>
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	08 95       	ret

00000b3a <EEPROM_vDeleteUser>:

void EEPROM_vDeleteUser(const uint8* user)
{
     b3a:	df 92       	push	r13
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	6a 97       	sbiw	r28, 0x1a	; 26
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	7c 01       	movw	r14, r24
	uint8 last_userNum= EEPROM_ui8ReadByteFromAddress(GUESTS_NUM_ADDRESS);
     b5a:	8f e1       	ldi	r24, 0x1F	; 31
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <EEPROM_ui8ReadByteFromAddress>
     b62:	d8 2e       	mov	r13, r24
	uint8 emptyUserPass[USER_SIZE+PASS_SIZE]= {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	ea ea       	ldi	r30, 0xAA	; 170
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	de 01       	movw	r26, r28
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	8a 95       	dec	r24
     b74:	e1 f7       	brne	.-8      	; 0xb6e <EEPROM_vDeleteUser+0x34>
	uint8 stored_user[USER_SIZE], last_user[USER_SIZE+PASS_SIZE];
	for(uint16 i= 0; i<USER_SIZE; i++){
     b76:	00 e0       	ldi	r16, 0x00	; 0
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	5d c0       	rjmp	.+186    	; 0xc36 <EEPROM_vDeleteUser+0xfc>
		EEPROM_vReadBlockFromAddress(GUEST_USER_ADDRESS[i], stored_user, USER_SIZE);
     b7c:	f8 01       	movw	r30, r16
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	ea 58       	subi	r30, 0x8A	; 138
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	46 e0       	ldi	r20, 0x06	; 6
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	be 01       	movw	r22, r28
     b8c:	65 5f       	subi	r22, 0xF5	; 245
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	80 81       	ld	r24, Z
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	0e 94 62 04 	call	0x8c4	; 0x8c4 <EEPROM_vReadBlockFromAddress>
		if(ui8Compare(user, stored_user, USER_SIZE)){
     b98:	46 e0       	ldi	r20, 0x06	; 6
     b9a:	be 01       	movw	r22, r28
     b9c:	65 5f       	subi	r22, 0xF5	; 245
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	c7 01       	movw	r24, r14
     ba2:	0e 94 ed 02 	call	0x5da	; 0x5da <ui8Compare>
     ba6:	88 23       	and	r24, r24
     ba8:	09 f4       	brne	.+2      	; 0xbac <EEPROM_vDeleteUser+0x72>
     baa:	43 c0       	rjmp	.+134    	; 0xc32 <EEPROM_vDeleteUser+0xf8>
			if(i== last_userNum){
     bac:	8d 2d       	mov	r24, r13
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	08 17       	cp	r16, r24
     bb2:	19 07       	cpc	r17, r25
     bb4:	01 f5       	brne	.+64     	; 0xbf6 <EEPROM_vDeleteUser+0xbc>
				EEPROM_vWriteBlockToAddress(GUEST_USER_ADDRESS[i], emptyUserPass, USER_SIZE+PASS_SIZE);
     bb6:	f8 01       	movw	r30, r16
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ea 58       	subi	r30, 0x8A	; 138
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	4a e0       	ldi	r20, 0x0A	; 10
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	be 01       	movw	r22, r28
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	0e 94 8d 04 	call	0x91a	; 0x91a <EEPROM_vWriteBlockToAddress>
			else{
				EEPROM_vReadBlockFromAddress(GUEST_USER_ADDRESS[last_userNum], last_user, USER_SIZE+PASS_SIZE);
				EEPROM_vWriteBlockToAddress(GUEST_USER_ADDRESS[i], last_user, USER_SIZE+PASS_SIZE);
				break;
			}
			EEPROM_vWriteByteToAddress(GUESTS_NUM_ADDRESS, last_userNum-1);
     bd2:	6f ef       	ldi	r22, 0xFF	; 255
     bd4:	6d 0d       	add	r22, r13
     bd6:	8f e1       	ldi	r24, 0x1F	; 31
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_vWriteByteToAddress>
			EEPROM_vWriteByteToAddress(GUEST_STATUS_ADDRESS[last_userNum], PASS_NOT_SET);
     bde:	ed 2d       	mov	r30, r13
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	ee 0f       	add	r30, r30
     be4:	ff 1f       	adc	r31, r31
     be6:	e6 57       	subi	r30, 0x76	; 118
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	6f ef       	ldi	r22, 0xFF	; 255
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_vWriteByteToAddress>
     bf4:	1e c0       	rjmp	.+60     	; 0xc32 <EEPROM_vDeleteUser+0xf8>
		if(ui8Compare(user, stored_user, USER_SIZE)){
			if(i== last_userNum){
				EEPROM_vWriteBlockToAddress(GUEST_USER_ADDRESS[i], emptyUserPass, USER_SIZE+PASS_SIZE);
			}
			else{
				EEPROM_vReadBlockFromAddress(GUEST_USER_ADDRESS[last_userNum], last_user, USER_SIZE+PASS_SIZE);
     bf6:	ed 2d       	mov	r30, r13
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	ea 58       	subi	r30, 0x8A	; 138
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	4a e0       	ldi	r20, 0x0A	; 10
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	be 01       	movw	r22, r28
     c08:	6f 5e       	subi	r22, 0xEF	; 239
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	0e 94 62 04 	call	0x8c4	; 0x8c4 <EEPROM_vReadBlockFromAddress>
				EEPROM_vWriteBlockToAddress(GUEST_USER_ADDRESS[i], last_user, USER_SIZE+PASS_SIZE);
     c14:	00 0f       	add	r16, r16
     c16:	11 1f       	adc	r17, r17
     c18:	f8 01       	movw	r30, r16
     c1a:	ea 58       	subi	r30, 0x8A	; 138
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	4a e0       	ldi	r20, 0x0A	; 10
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	be 01       	movw	r22, r28
     c24:	6f 5e       	subi	r22, 0xEF	; 239
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	0e 94 8d 04 	call	0x91a	; 0x91a <EEPROM_vWriteBlockToAddress>
				break;
     c30:	06 c0       	rjmp	.+12     	; 0xc3e <EEPROM_vDeleteUser+0x104>
void EEPROM_vDeleteUser(const uint8* user)
{
	uint8 last_userNum= EEPROM_ui8ReadByteFromAddress(GUESTS_NUM_ADDRESS);
	uint8 emptyUserPass[USER_SIZE+PASS_SIZE]= {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};
	uint8 stored_user[USER_SIZE], last_user[USER_SIZE+PASS_SIZE];
	for(uint16 i= 0; i<USER_SIZE; i++){
     c32:	0f 5f       	subi	r16, 0xFF	; 255
     c34:	1f 4f       	sbci	r17, 0xFF	; 255
     c36:	06 30       	cpi	r16, 0x06	; 6
     c38:	11 05       	cpc	r17, r1
     c3a:	08 f4       	brcc	.+2      	; 0xc3e <EEPROM_vDeleteUser+0x104>
     c3c:	9f cf       	rjmp	.-194    	; 0xb7c <EEPROM_vDeleteUser+0x42>
			}
			EEPROM_vWriteByteToAddress(GUESTS_NUM_ADDRESS, last_userNum-1);
			EEPROM_vWriteByteToAddress(GUEST_STATUS_ADDRESS[last_userNum], PASS_NOT_SET);
		}
	}
}
     c3e:	6a 96       	adiw	r28, 0x1a	; 26
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	08 95       	ret

00000c5a <externalInterrupt_init>:
uint8 adminChoice= 0xFF;
uint8 userChoice= KPD_NOT_Pressed;

void externalInterrupt_init(uint16 ExInt)
{
	sei();//       enable global interrupt (GIE)
     c5a:	78 94       	sei
	
	switch(ExInt)//      enable the interrupt request depending on which is given to the function
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	89 f0       	breq	.+34     	; 0xc84 <externalInterrupt_init+0x2a>
     c62:	18 f0       	brcs	.+6      	; 0xc6a <externalInterrupt_init+0x10>
     c64:	02 97       	sbiw	r24, 0x02	; 2
     c66:	d9 f0       	breq	.+54     	; 0xc9e <externalInterrupt_init+0x44>
     c68:	08 95       	ret
	{
	  case 0:
	  setBit(GICR,INT0);//    enable interrupt request 0 and set its pin as input
     c6a:	8b b7       	in	r24, 0x3b	; 59
     c6c:	80 64       	ori	r24, 0x40	; 64
     c6e:	8b bf       	out	0x3b, r24	; 59
	  clrBit(DDRD, 2);
     c70:	81 b3       	in	r24, 0x11	; 17
     c72:	8b 7f       	andi	r24, 0xFB	; 251
     c74:	81 bb       	out	0x11, r24	; 17
	  //                         _
	  setBit(MCUCR,ISC00);//      |  interrupt flag will set in the rising edge
     c76:	85 b7       	in	r24, 0x35	; 53
     c78:	81 60       	ori	r24, 0x01	; 1
     c7a:	85 bf       	out	0x35, r24	; 53
	  setBit(MCUCR,ISC01);//     _|
     c7c:	85 b7       	in	r24, 0x35	; 53
     c7e:	82 60       	ori	r24, 0x02	; 2
     c80:	85 bf       	out	0x35, r24	; 53
	  break;
     c82:	08 95       	ret
	  
	  case 1:
	  setBit(GICR, INT1);
     c84:	8b b7       	in	r24, 0x3b	; 59
     c86:	80 68       	ori	r24, 0x80	; 128
     c88:	8b bf       	out	0x3b, r24	; 59
	  setBit(DDRD, 3);
     c8a:	81 b3       	in	r24, 0x11	; 17
     c8c:	88 60       	ori	r24, 0x08	; 8
     c8e:	81 bb       	out	0x11, r24	; 17
	  //                         _
	  setBit(MCUCR,ISC10);//      |  interrupt flag will set in the rising edge
     c90:	85 b7       	in	r24, 0x35	; 53
     c92:	84 60       	ori	r24, 0x04	; 4
     c94:	85 bf       	out	0x35, r24	; 53
	  clrBit(MCUCR,ISC11);//     _|
     c96:	85 b7       	in	r24, 0x35	; 53
     c98:	87 7f       	andi	r24, 0xF7	; 247
     c9a:	85 bf       	out	0x35, r24	; 53
	  break;//    enable interrupt request 1 and set its pin as input
     c9c:	08 95       	ret
	  
	  case 2: setBit(GICR, INT2);
     c9e:	8b b7       	in	r24, 0x3b	; 59
     ca0:	80 62       	ori	r24, 0x20	; 32
     ca2:	8b bf       	out	0x3b, r24	; 59
	  clrBit(DDRB, 2);
     ca4:	87 b3       	in	r24, 0x17	; 23
     ca6:	8b 7f       	andi	r24, 0xFB	; 251
     ca8:	87 bb       	out	0x17, r24	; 23
     caa:	08 95       	ret

00000cac <__vector_10>:
}



ISR(TIMER0_COMP_vect)
{
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	af 92       	push	r10
     cb8:	bf 92       	push	r11
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	2f 93       	push	r18
     cc8:	3f 93       	push	r19
     cca:	4f 93       	push	r20
     ccc:	5f 93       	push	r21
     cce:	6f 93       	push	r22
     cd0:	7f 93       	push	r23
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	af 93       	push	r26
     cd8:	bf 93       	push	r27
     cda:	ef 93       	push	r30
     cdc:	ff 93       	push	r31
	if(block_mode_flag== TRUE){
     cde:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <block_mode_flag>
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	61 f4       	brne	.+24     	; 0xcfe <__vector_10+0x52>
		Timer1B_Set_Duty_Cycle(0);
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	cb 01       	movw	r24, r22
     cec:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Timer1B_Set_Duty_Cycle>
		setbit(DDRB,7);
     cf0:	87 b3       	in	r24, 0x17	; 23
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	87 bb       	out	0x17, r24	; 23
		setbit(PORTB,7);
     cf6:	88 b3       	in	r24, 0x18	; 24
     cf8:	80 68       	ori	r24, 0x80	; 128
     cfa:	88 bb       	out	0x18, r24	; 24
     cfc:	ff cf       	rjmp	.-2      	; 0xcfc <__vector_10+0x50>
		while(1);
	}
	count++;
     cfe:	20 91 46 06 	lds	r18, 0x0646	; 0x800646 <count>
     d02:	30 91 47 06 	lds	r19, 0x0647	; 0x800647 <count+0x1>
     d06:	40 91 48 06 	lds	r20, 0x0648	; 0x800648 <count+0x2>
     d0a:	50 91 49 06 	lds	r21, 0x0649	; 0x800649 <count+0x3>
     d0e:	60 91 4a 06 	lds	r22, 0x064A	; 0x80064a <count+0x4>
     d12:	70 91 4b 06 	lds	r23, 0x064B	; 0x80064b <count+0x5>
     d16:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <count+0x6>
     d1a:	90 91 4d 06 	lds	r25, 0x064D	; 0x80064d <count+0x7>
     d1e:	a1 e0       	ldi	r26, 0x01	; 1
     d20:	0e 94 80 11 	call	0x2300	; 0x2300 <__adddi3_s8>
     d24:	20 93 46 06 	sts	0x0646, r18	; 0x800646 <count>
     d28:	30 93 47 06 	sts	0x0647, r19	; 0x800647 <count+0x1>
     d2c:	40 93 48 06 	sts	0x0648, r20	; 0x800648 <count+0x2>
     d30:	50 93 49 06 	sts	0x0649, r21	; 0x800649 <count+0x3>
     d34:	60 93 4a 06 	sts	0x064A, r22	; 0x80064a <count+0x4>
     d38:	70 93 4b 06 	sts	0x064B, r23	; 0x80064b <count+0x5>
     d3c:	80 93 4c 06 	sts	0x064C, r24	; 0x80064c <count+0x6>
     d40:	90 93 4d 06 	sts	0x064D, r25	; 0x80064d <count+0x7>
	
	if(readBit(PIND, 2) && admin_validityFlag== TRUE){        // While there is still a bluetooth connection and access was allowed (flag is 1)
     d44:	82 9b       	sbis	0x10, 2	; 16
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <__vector_10+0xc4>
     d48:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <admin_validityFlag>
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	81 f4       	brne	.+32     	; 0xd70 <__vector_10+0xc4>
		//admin_funcChoice();                                      // Ask Admin what does he want to do
		if(readBit(UCSRA, RXC)) adminChoice= UART_receive();                             // Store the number of function he wants to do
     d50:	5f 9b       	sbis	0x0b, 7	; 11
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <__vector_10+0xb0>
     d54:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_receive>
     d58:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <adminChoice>
		if(adminChoice!= 0xFF) admin_callFunc(adminChoice);                             // Activate the function asked for
     d5c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <adminChoice>
     d60:	8f 3f       	cpi	r24, 0xFF	; 255
     d62:	11 f0       	breq	.+4      	; 0xd68 <__vector_10+0xbc>
     d64:	0e 94 cd 00 	call	0x19a	; 0x19a <admin_callFunc>
		adminChoice= 0xFF;
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <adminChoice>
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <__vector_10+0xca>
	}
	else if(!readBit(PIND, 2)) admin_validityFlag= false;             // Once connection is lost remove access again (flag is 0)
     d70:	82 9b       	sbis	0x10, 2	; 16
     d72:	10 92 44 06 	sts	0x0644, r1	; 0x800644 <admin_validityFlag>
	
	if(/*!readBit(PIND, 3) &&*/ user_validityFlag== TRUE){
     d76:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <user_validityFlag>
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	41 f4       	brne	.+16     	; 0xd8e <__vector_10+0xe2>
		userChoice= KPD_VidGetPressedKey();
     d7e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <KPD_VidGetPressedKey>
     d82:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <userChoice>
		if(userChoice!= KPD_NOT_Pressed){
     d86:	8f 3f       	cpi	r24, 0xFF	; 255
     d88:	11 f0       	breq	.+4      	; 0xd8e <__vector_10+0xe2>
			user_callFunc(userChoice);
     d8a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <user_callFunc>
		}
	}
	if (count % 5000 == 0)
     d8e:	20 91 46 06 	lds	r18, 0x0646	; 0x800646 <count>
     d92:	30 91 47 06 	lds	r19, 0x0647	; 0x800647 <count+0x1>
     d96:	40 91 48 06 	lds	r20, 0x0648	; 0x800648 <count+0x2>
     d9a:	50 91 49 06 	lds	r21, 0x0649	; 0x800649 <count+0x3>
     d9e:	60 91 4a 06 	lds	r22, 0x064A	; 0x80064a <count+0x4>
     da2:	70 91 4b 06 	lds	r23, 0x064B	; 0x80064b <count+0x5>
     da6:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <count+0x6>
     daa:	90 91 4d 06 	lds	r25, 0x064D	; 0x80064d <count+0x7>
     dae:	0f 2e       	mov	r0, r31
     db0:	f8 e8       	ldi	r31, 0x88	; 136
     db2:	af 2e       	mov	r10, r31
     db4:	f0 2d       	mov	r31, r0
     db6:	0f 2e       	mov	r0, r31
     db8:	f3 e1       	ldi	r31, 0x13	; 19
     dba:	bf 2e       	mov	r11, r31
     dbc:	f0 2d       	mov	r31, r0
     dbe:	c1 2c       	mov	r12, r1
     dc0:	d1 2c       	mov	r13, r1
     dc2:	e1 2c       	mov	r14, r1
     dc4:	f1 2c       	mov	r15, r1
     dc6:	00 e0       	ldi	r16, 0x00	; 0
     dc8:	10 e0       	ldi	r17, 0x00	; 0
     dca:	0e 94 21 11 	call	0x2242	; 0x2242 <__umoddi3>
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	0e 94 8c 11 	call	0x2318	; 0x2318 <__cmpdi2_s8>
     dd4:	f1 f5       	brne	.+124    	; 0xe52 <__vector_10+0x1a6>
	{
		calculate_Temperature();
     dd6:	0e 94 77 00 	call	0xee	; 0xee <calculate_Temperature>
		// Control the fan speed based on temperature conditions
		if (temperature <= 20)
     dda:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <__data_end>
     dde:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <__data_end+0x1>
     de2:	85 31       	cpi	r24, 0x15	; 21
     de4:	91 05       	cpc	r25, r1
     de6:	34 f4       	brge	.+12     	; 0xdf4 <__vector_10+0x148>
		{
			Timer1B_Set_Duty_Cycle(0); // Fan off
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	cb 01       	movw	r24, r22
     dee:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Timer1B_Set_Duty_Cycle>
     df2:	2f c0       	rjmp	.+94     	; 0xe52 <__vector_10+0x1a6>
		}
		else if (temperature >= 28 && temperature < 35)
     df4:	9c 01       	movw	r18, r24
     df6:	2c 51       	subi	r18, 0x1C	; 28
     df8:	31 09       	sbc	r19, r1
     dfa:	27 30       	cpi	r18, 0x07	; 7
     dfc:	31 05       	cpc	r19, r1
     dfe:	38 f4       	brcc	.+14     	; 0xe0e <__vector_10+0x162>
		{
			Timer1B_Set_Duty_Cycle(0.25); // Set fan speed to 25%
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	80 e8       	ldi	r24, 0x80	; 128
     e06:	9e e3       	ldi	r25, 0x3E	; 62
     e08:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Timer1B_Set_Duty_Cycle>
     e0c:	22 c0       	rjmp	.+68     	; 0xe52 <__vector_10+0x1a6>
		}
		else if (temperature >= 35 && temperature < 40)
     e0e:	9c 01       	movw	r18, r24
     e10:	23 52       	subi	r18, 0x23	; 35
     e12:	31 09       	sbc	r19, r1
     e14:	25 30       	cpi	r18, 0x05	; 5
     e16:	31 05       	cpc	r19, r1
     e18:	38 f4       	brcc	.+14     	; 0xe28 <__vector_10+0x17c>
		{
			Timer1B_Set_Duty_Cycle(0.5); // Set fan speed to 50%
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	9f e3       	ldi	r25, 0x3F	; 63
     e22:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Timer1B_Set_Duty_Cycle>
     e26:	15 c0       	rjmp	.+42     	; 0xe52 <__vector_10+0x1a6>
		}
		else if (temperature >= 40 && temperature < 45)
     e28:	9c 01       	movw	r18, r24
     e2a:	28 52       	subi	r18, 0x28	; 40
     e2c:	31 09       	sbc	r19, r1
     e2e:	25 30       	cpi	r18, 0x05	; 5
     e30:	31 05       	cpc	r19, r1
     e32:	38 f4       	brcc	.+14     	; 0xe42 <__vector_10+0x196>
		{
			Timer1B_Set_Duty_Cycle(0.75); // Set fan speed to 75%
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	80 e4       	ldi	r24, 0x40	; 64
     e3a:	9f e3       	ldi	r25, 0x3F	; 63
     e3c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Timer1B_Set_Duty_Cycle>
     e40:	08 c0       	rjmp	.+16     	; 0xe52 <__vector_10+0x1a6>
		}
		else if (temperature >= 45)
     e42:	8d 97       	sbiw	r24, 0x2d	; 45
     e44:	34 f0       	brlt	.+12     	; 0xe52 <__vector_10+0x1a6>
		{
			Timer1B_Set_Duty_Cycle(1); // Set fan speed to 100%
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	9f e3       	ldi	r25, 0x3F	; 63
     e4e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Timer1B_Set_Duty_Cycle>
		}
	}
}
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	7f 91       	pop	r23
     e60:	6f 91       	pop	r22
     e62:	5f 91       	pop	r21
     e64:	4f 91       	pop	r20
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <UART_init>:


/* function to initialize UART communication protocol */

void UART_init(uint32 baud, uint64 freq)
{
     e84:	8f 92       	push	r8
     e86:	9f 92       	push	r9
     e88:	af 92       	push	r10
     e8a:	bf 92       	push	r11
     e8c:	cf 92       	push	r12
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	4b 01       	movw	r8, r22
     e9a:	5c 01       	movw	r10, r24
     e9c:	62 2f       	mov	r22, r18
     e9e:	73 2f       	mov	r23, r19
     ea0:	84 2f       	mov	r24, r20
     ea2:	95 2f       	mov	r25, r21
	uint32 ubrr= round((float64)freq/(16*(float64)baud))-1;//           calculation for the UBRRL and UBRRH values to achieve the wanted baud rate with the used frequency
     ea4:	2e 2d       	mov	r18, r14
     ea6:	3f 2d       	mov	r19, r15
     ea8:	40 2f       	mov	r20, r16
     eaa:	51 2f       	mov	r21, r17
     eac:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__floatundisf>
     eb0:	6b 01       	movw	r12, r22
     eb2:	7c 01       	movw	r14, r24
     eb4:	c5 01       	movw	r24, r10
     eb6:	b4 01       	movw	r22, r8
     eb8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__floatunsisf>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	51 e4       	ldi	r21, 0x41	; 65
     ec4:	0e 94 26 10 	call	0x204c	; 0x204c <__mulsf3>
     ec8:	9b 01       	movw	r18, r22
     eca:	ac 01       	movw	r20, r24
     ecc:	c7 01       	movw	r24, r14
     ece:	b6 01       	movw	r22, r12
     ed0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__divsf3>
     ed4:	0e 94 93 10 	call	0x2126	; 0x2126 <round>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e8       	ldi	r20, 0x80	; 128
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__subsf3>
     ee4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__fixunssfsi>
	
	clrBit(DDRD, 0);//                 setting Rx pin (receiver) to input
     ee8:	21 b3       	in	r18, 0x11	; 17
     eea:	2e 7f       	andi	r18, 0xFE	; 254
     eec:	21 bb       	out	0x11, r18	; 17
	setBit(DDRD, 1);//                 setting Tx pin (transmitter) to output
     eee:	21 b3       	in	r18, 0x11	; 17
     ef0:	22 60       	ori	r18, 0x02	; 2
     ef2:	21 bb       	out	0x11, r18	; 17
	
	if(ubrr<255) UBRRL= (uint8)ubrr;//     if ubrr value less than 255 the it can be stored directly in UBRRL register only
     ef4:	6f 3f       	cpi	r22, 0xFF	; 255
     ef6:	71 05       	cpc	r23, r1
     ef8:	81 05       	cpc	r24, r1
     efa:	91 05       	cpc	r25, r1
     efc:	10 f4       	brcc	.+4      	; 0xf02 <UART_init+0x7e>
     efe:	69 b9       	out	0x09, r22	; 9
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <UART_init+0x8a>
	else{//                                   _    else if it is bigger than 255
		UBRRH= (uint8)ubrr;//          |
     f02:	60 bd       	out	0x20, r22	; 32
		UBRRL= (uint8)(ubrr>>8);//    _|   ubrr value will need to be divided in two parts bits with resolution>8 in UBRRH and rest in UBRRL
     f04:	bb 27       	eor	r27, r27
     f06:	a9 2f       	mov	r26, r25
     f08:	98 2f       	mov	r25, r24
     f0a:	87 2f       	mov	r24, r23
     f0c:	89 b9       	out	0x09, r24	; 9
	}
	
	UCSRA|= (0<<U2X) /*normal transmission speed*/;
     f0e:	8b b1       	in	r24, 0x0b	; 11
     f10:	8b b9       	out	0x0b, r24	; 11
	
	UCSRB|= (1<<TXEN) | (1<<RXEN) /*enabling transmitting and receiving*/
     f12:	8a b1       	in	r24, 0x0a	; 10
     f14:	88 61       	ori	r24, 0x18	; 24
     f16:	8a b9       	out	0x0a, r24	; 10
	| (0<<UCSZ2) /*part of setting data bits to be 8*/;
	
	UCSRC|= (1<<URSEL) /*writing on UCSRC not UBRRH*/ | (0<<UMSEL) /*choosing asynchronous mode*/| (1<<UCSZ0) | (1<<UCSZ1) /*setting data bit to be 8*/| (0<<UPM0) | (0<<UPM1) /*using odd parity check*/| (0<<USBS) /*1 bit for stop*/;
     f18:	80 b5       	in	r24, 0x20	; 32
     f1a:	86 68       	ori	r24, 0x86	; 134
     f1c:	80 bd       	out	0x20, r24	; 32
}
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	df 90       	pop	r13
     f28:	cf 90       	pop	r12
     f2a:	bf 90       	pop	r11
     f2c:	af 90       	pop	r10
     f2e:	9f 90       	pop	r9
     f30:	8f 90       	pop	r8
     f32:	08 95       	ret

00000f34 <UART_receive>:

/* function to receive data through UART communication protocol */

uint8 UART_receive(void)
{
	while(!readBit(UCSRA, RXC));//              hold program till making sure that the data to be received are waiting on the buffer
     f34:	5f 9b       	sbis	0x0b, 7	; 11
     f36:	fe cf       	rjmp	.-4      	; 0xf34 <UART_receive>
	return UDR;//                               return the data received
     f38:	8c b1       	in	r24, 0x0c	; 12
}
     f3a:	08 95       	ret

00000f3c <UART_transmit>:

/* function to transmit data through UART communication protocol */

void UART_transmit(uint8 data)
{
	while(!readBit(UCSRA, UDRE));//             hold program till making sure that UDR not in a current process and ready to take data
     f3c:	5d 9b       	sbis	0x0b, 5	; 11
     f3e:	fe cf       	rjmp	.-4      	; 0xf3c <UART_transmit>
	UDR= data;//                                store the data on the UDR register
     f40:	8c b9       	out	0x0c, r24	; 12
	while(!readBit(UCSRA, TXC));//              hold program till making sure that the UDR is empty and all the data bits has been sent
     f42:	5e 9b       	sbis	0x0b, 6	; 11
     f44:	fe cf       	rjmp	.-4      	; 0xf42 <UART_transmit+0x6>
}
     f46:	08 95       	ret

00000f48 <UART_readString>:

void UART_readString(uint8 length, uint8 *text)    /* function used to read multiple characters through UART communication at once*/
{
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	b8 2e       	mov	r11, r24
     f5c:	eb 01       	movw	r28, r22
	while(readBit(UCSRA, RXC)) UART_receive();
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <UART_readString+0x1c>
     f60:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_receive>
     f64:	5f 99       	sbic	0x0b, 7	; 11
     f66:	fc cf       	rjmp	.-8      	; 0xf60 <UART_readString+0x18>
     f68:	c1 2c       	mov	r12, r1
     f6a:	d1 2c       	mov	r13, r1
     f6c:	76 01       	movw	r14, r12
     f6e:	0c c0       	rjmp	.+24     	; 0xf88 <UART_readString+0x40>
	uint32 i;
	for(i=0; i<length; i++){
		text[i] = UART_receive();
     f70:	8e 01       	movw	r16, r28
     f72:	0c 0d       	add	r16, r12
     f74:	1d 1d       	adc	r17, r13
     f76:	0e 94 9a 07 	call	0xf34	; 0xf34 <UART_receive>
     f7a:	f8 01       	movw	r30, r16
     f7c:	80 83       	st	Z, r24

void UART_readString(uint8 length, uint8 *text)    /* function used to read multiple characters through UART communication at once*/
{
	while(readBit(UCSRA, RXC)) UART_receive();
	uint32 i;
	for(i=0; i<length; i++){
     f7e:	ff ef       	ldi	r31, 0xFF	; 255
     f80:	cf 1a       	sub	r12, r31
     f82:	df 0a       	sbc	r13, r31
     f84:	ef 0a       	sbc	r14, r31
     f86:	ff 0a       	sbc	r15, r31
     f88:	8b 2d       	mov	r24, r11
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a0 e0       	ldi	r26, 0x00	; 0
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	c8 16       	cp	r12, r24
     f92:	d9 06       	cpc	r13, r25
     f94:	ea 06       	cpc	r14, r26
     f96:	fb 06       	cpc	r15, r27
     f98:	58 f3       	brcs	.-42     	; 0xf70 <UART_readString+0x28>
		text[i] = UART_receive();
	}
}
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	bf 90       	pop	r11
     fac:	08 95       	ret

00000fae <UART_printText>:

void UART_printText(char text[])
{
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	ec 01       	movw	r28, r24
	for(uint32 i=0; text[i]!='\0'; i++){
     fbc:	c1 2c       	mov	r12, r1
     fbe:	d1 2c       	mov	r13, r1
     fc0:	76 01       	movw	r14, r12
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <UART_printText+0x24>
		UART_transmit(text[i]);
     fc4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <UART_transmit>
	}
}

void UART_printText(char text[])
{
	for(uint32 i=0; text[i]!='\0'; i++){
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	c8 1a       	sub	r12, r24
     fcc:	d8 0a       	sbc	r13, r24
     fce:	e8 0a       	sbc	r14, r24
     fd0:	f8 0a       	sbc	r15, r24
     fd2:	fe 01       	movw	r30, r28
     fd4:	ec 0d       	add	r30, r12
     fd6:	fd 1d       	adc	r31, r13
     fd8:	80 81       	ld	r24, Z
     fda:	81 11       	cpse	r24, r1
     fdc:	f3 cf       	rjmp	.-26     	; 0xfc4 <UART_printText+0x16>
		UART_transmit(text[i]);
	}
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	08 95       	ret

00000fec <UART_printNum>:

void UART_printNum(sint16 num)
{
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	a8 97       	sbiw	r28, 0x28	; 40
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	7c 01       	movw	r14, r24
	int i;
	int arr[20];
	if(num<0){
    100a:	99 23       	and	r25, r25
    100c:	3c f4       	brge	.+14     	; 0x101c <UART_printNum+0x30>
		UART_transmit('-');
    100e:	8d e2       	ldi	r24, 0x2D	; 45
    1010:	0e 94 9e 07 	call	0xf3c	; 0xf3c <UART_transmit>
		num*= -1;
    1014:	f1 94       	neg	r15
    1016:	e1 94       	neg	r14
    1018:	f1 08       	sbc	r15, r1
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <UART_printNum+0x3a>
	}
	else if(num==0){
    101c:	89 2b       	or	r24, r25
    101e:	19 f4       	brne	.+6      	; 0x1026 <UART_printNum+0x3a>
		UART_transmit('0');
    1020:	80 e3       	ldi	r24, 0x30	; 48
    1022:	0e 94 9e 07 	call	0xf3c	; 0xf3c <UART_transmit>
		UART_transmit(text[i]);
	}
}

void UART_printNum(sint16 num)
{
    1026:	00 e0       	ldi	r16, 0x00	; 0
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	14 c0       	rjmp	.+40     	; 0x1054 <UART_printNum+0x68>
	}
	else if(num==0){
		UART_transmit('0');
	}
	for(i=0; num!=0; i++){
		arr[i]= num%10;
    102c:	c7 01       	movw	r24, r14
    102e:	6a e0       	ldi	r22, 0x0A	; 10
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__divmodhi4>
    1036:	f8 01       	movw	r30, r16
    1038:	ee 0f       	add	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	2c 0f       	add	r18, r28
    1042:	3d 1f       	adc	r19, r29
    1044:	e2 0f       	add	r30, r18
    1046:	f3 1f       	adc	r31, r19
    1048:	91 83       	std	Z+1, r25	; 0x01
    104a:	80 83       	st	Z, r24
		num/=10;
    104c:	e6 2e       	mov	r14, r22
    104e:	f7 2e       	mov	r15, r23
		num*= -1;
	}
	else if(num==0){
		UART_transmit('0');
	}
	for(i=0; num!=0; i++){
    1050:	0f 5f       	subi	r16, 0xFF	; 255
    1052:	1f 4f       	sbci	r17, 0xFF	; 255
    1054:	e1 14       	cp	r14, r1
    1056:	f1 04       	cpc	r15, r1
    1058:	49 f7       	brne	.-46     	; 0x102c <UART_printNum+0x40>
		arr[i]= num%10;
		num/=10;
	}
	for(i-=1; i>=0; i--){
    105a:	01 50       	subi	r16, 0x01	; 1
    105c:	11 09       	sbc	r17, r1
    105e:	0f c0       	rjmp	.+30     	; 0x107e <UART_printNum+0x92>
		UART_transmit('0'+arr[i]);
    1060:	f8 01       	movw	r30, r16
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	8c 0f       	add	r24, r28
    106c:	9d 1f       	adc	r25, r29
    106e:	e8 0f       	add	r30, r24
    1070:	f9 1f       	adc	r31, r25
    1072:	80 81       	ld	r24, Z
    1074:	80 5d       	subi	r24, 0xD0	; 208
    1076:	0e 94 9e 07 	call	0xf3c	; 0xf3c <UART_transmit>
	}
	for(i=0; num!=0; i++){
		arr[i]= num%10;
		num/=10;
	}
	for(i-=1; i>=0; i--){
    107a:	01 50       	subi	r16, 0x01	; 1
    107c:	11 09       	sbc	r17, r1
    107e:	11 23       	and	r17, r17
    1080:	7c f7       	brge	.-34     	; 0x1060 <UART_printNum+0x74>
		UART_transmit('0'+arr[i]);
	}
    1082:	a8 96       	adiw	r28, 0x28	; 40
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	08 95       	ret

0000109c <KPD_VidInit>:


void KPD_VidInit()
{
    // Set the pin directions for the columns as output
    DIO_VidSetPinDirection(KPD_PORT, KPD_COL1PIN, Output);
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	62 e0       	ldi	r22, 0x02	; 2
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 03 03 	call	0x606	; 0x606 <DIO_VidSetPinDirection>
    DIO_VidSetPinDirection(KPD_PORT, KPD_COL2PIN, Output);
    10a6:	41 e0       	ldi	r20, 0x01	; 1
    10a8:	63 e0       	ldi	r22, 0x03	; 3
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	0e 94 03 03 	call	0x606	; 0x606 <DIO_VidSetPinDirection>
    DIO_VidSetPinDirection(KPD_PORT, KPD_COL3PIN, Output);
    10b0:	41 e0       	ldi	r20, 0x01	; 1
    10b2:	64 e0       	ldi	r22, 0x04	; 4
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0e 94 03 03 	call	0x606	; 0x606 <DIO_VidSetPinDirection>

    // Set the pin directions for the rows as input
    DIO_VidSetPinDirection(KPD_PORT, KPD_ROW1PIN, Input);
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	65 e0       	ldi	r22, 0x05	; 5
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	0e 94 03 03 	call	0x606	; 0x606 <DIO_VidSetPinDirection>
    DIO_VidSetPinDirection(KPD_PORT, KPD_ROW2PIN, Input);
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	66 e0       	ldi	r22, 0x06	; 6
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	0e 94 03 03 	call	0x606	; 0x606 <DIO_VidSetPinDirection>
    DIO_VidSetPinDirection(KPD_PORT, KPD_ROW3PIN, Input);
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	0e 94 03 03 	call	0x606	; 0x606 <DIO_VidSetPinDirection>
	
	// Internal Pull Up for columns pins
	setbit(PORTA,KPD_COL1PIN);
    10d8:	8b b3       	in	r24, 0x1b	; 27
    10da:	84 60       	ori	r24, 0x04	; 4
    10dc:	8b bb       	out	0x1b, r24	; 27
	setbit(PORTA,KPD_COL2PIN);
    10de:	8b b3       	in	r24, 0x1b	; 27
    10e0:	88 60       	ori	r24, 0x08	; 8
    10e2:	8b bb       	out	0x1b, r24	; 27
	setbit(PORTA,KPD_COL3PIN);
    10e4:	8b b3       	in	r24, 0x1b	; 27
    10e6:	80 61       	ori	r24, 0x10	; 16
    10e8:	8b bb       	out	0x1b, r24	; 27
	
	// set default for the out pins to be 1
	setbit(PORTA,KPD_ROW1PIN);
    10ea:	8b b3       	in	r24, 0x1b	; 27
    10ec:	80 62       	ori	r24, 0x20	; 32
    10ee:	8b bb       	out	0x1b, r24	; 27
	setbit(PORTA,KPD_ROW2PIN);
    10f0:	8b b3       	in	r24, 0x1b	; 27
    10f2:	80 64       	ori	r24, 0x40	; 64
    10f4:	8b bb       	out	0x1b, r24	; 27
	setbit(PORTA,KPD_ROW3PIN);
    10f6:	8b b3       	in	r24, 0x1b	; 27
    10f8:	80 68       	ori	r24, 0x80	; 128
    10fa:	8b bb       	out	0x1b, r24	; 27
    10fc:	08 95       	ret

000010fe <KPD_VidGetPressedKey>:

}

uint8 KPD_VidGetPressedKey()
{
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	1f 92       	push	r1
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62

    static uint8 Column_arr[] = {KPD_COL1PIN, KPD_COL2PIN, KPD_COL3PIN};
    static uint8 Row_arr[] = {KPD_ROW1PIN, KPD_ROW2PIN, KPD_ROW3PIN};
    static uint8 Local_Keypad_arr[KPD_Row_Number][KPD_Column_Number] = KPD_Arr;

    for (uint8 Column = 0; Column < KPD_Column_Number; Column++)
    1114:	00 e0       	ldi	r16, 0x00	; 0
    1116:	42 c0       	rjmp	.+132    	; 0x119c <KPD_VidGetPressedKey+0x9e>
    {
        // Set the current column pin to low
        DIO_VidSetPinValue(KPD_PORT, Column_arr[Column], PinLow);
    1118:	c0 2e       	mov	r12, r16
    111a:	d1 2c       	mov	r13, r1
    111c:	f6 01       	movw	r30, r12
    111e:	e9 5f       	subi	r30, 0xF9	; 249
    1120:	fa 4f       	sbci	r31, 0xFA	; 250
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	60 81       	ld	r22, Z
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>

        for (uint8 Row = 0; Row < KPD_Row_Number; Row++)
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	2b c0       	rjmp	.+86     	; 0x1186 <KPD_VidGetPressedKey+0x88>
        {
            // Get the state of the current row pin
            DIO_VidGetPinValue(KPD_PORT, Row_arr[Row], &Key_Pressed_State);
    1130:	e1 2e       	mov	r14, r17
    1132:	f1 2c       	mov	r15, r1
    1134:	f7 01       	movw	r30, r14
    1136:	ec 5f       	subi	r30, 0xFC	; 252
    1138:	fa 4f       	sbci	r31, 0xFA	; 250
    113a:	ae 01       	movw	r20, r28
    113c:	4f 5f       	subi	r20, 0xFF	; 255
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	60 81       	ld	r22, Z
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	0e 94 ef 03 	call	0x7de	; 0x7de <DIO_VidGetPinValue>

            if (Key_Pressed_State == PinLow) // when a key is pressed it has a low value
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	81 11       	cpse	r24, r1
    114c:	1b c0       	rjmp	.+54     	; 0x1184 <KPD_VidGetPressedKey+0x86>
            {
                Key_Pressed_Value = Local_Keypad_arr[Row][Column];
    114e:	c7 01       	movw	r24, r14
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	8e 0d       	add	r24, r14
    1156:	9f 1d       	adc	r25, r15
    1158:	85 50       	subi	r24, 0x05	; 5
    115a:	9b 4f       	sbci	r25, 0xFB	; 251
    115c:	fc 01       	movw	r30, r24
    115e:	ec 0d       	add	r30, r12
    1160:	fd 1d       	adc	r31, r13
    1162:	10 81       	ld	r17, Z

                // Wait until the key is released
                while (Key_Pressed_State == PinLow) // polling, while the key is still pressed, don't do anything.
    1164:	0a c0       	rjmp	.+20     	; 0x117a <KPD_VidGetPressedKey+0x7c>
                {
                    DIO_VidGetPinValue(KPD_PORT, Row_arr[Row], &Key_Pressed_State);
    1166:	ae 01       	movw	r20, r28
    1168:	4f 5f       	subi	r20, 0xFF	; 255
    116a:	5f 4f       	sbci	r21, 0xFF	; 255
    116c:	f7 01       	movw	r30, r14
    116e:	ec 5f       	subi	r30, 0xFC	; 252
    1170:	fa 4f       	sbci	r31, 0xFA	; 250
    1172:	60 81       	ld	r22, Z
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	0e 94 ef 03 	call	0x7de	; 0x7de <DIO_VidGetPinValue>
            if (Key_Pressed_State == PinLow) // when a key is pressed it has a low value
            {
                Key_Pressed_Value = Local_Keypad_arr[Row][Column];

                // Wait until the key is released
                while (Key_Pressed_State == PinLow) // polling, while the key is still pressed, don't do anything.
    117a:	99 81       	ldd	r25, Y+1	; 0x01
    117c:	99 23       	and	r25, r25
    117e:	99 f3       	breq	.-26     	; 0x1166 <KPD_VidGetPressedKey+0x68>
                {
                    DIO_VidGetPinValue(KPD_PORT, Row_arr[Row], &Key_Pressed_State);
                }
                return Key_Pressed_Value;
    1180:	81 2f       	mov	r24, r17
    1182:	10 c0       	rjmp	.+32     	; 0x11a4 <KPD_VidGetPressedKey+0xa6>
    for (uint8 Column = 0; Column < KPD_Column_Number; Column++)
    {
        // Set the current column pin to low
        DIO_VidSetPinValue(KPD_PORT, Column_arr[Column], PinLow);

        for (uint8 Row = 0; Row < KPD_Row_Number; Row++)
    1184:	1f 5f       	subi	r17, 0xFF	; 255
    1186:	13 30       	cpi	r17, 0x03	; 3
    1188:	98 f2       	brcs	.-90     	; 0x1130 <KPD_VidGetPressedKey+0x32>
                }
                return Key_Pressed_Value;
            }
        }
        // Set the current column pin back to high
        DIO_VidSetPinValue(KPD_PORT, Column_arr[Column], PinHigh);
    118a:	f6 01       	movw	r30, r12
    118c:	e9 5f       	subi	r30, 0xF9	; 249
    118e:	fa 4f       	sbci	r31, 0xFA	; 250
    1190:	41 e0       	ldi	r20, 0x01	; 1
    1192:	60 81       	ld	r22, Z
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>

    static uint8 Column_arr[] = {KPD_COL1PIN, KPD_COL2PIN, KPD_COL3PIN};
    static uint8 Row_arr[] = {KPD_ROW1PIN, KPD_ROW2PIN, KPD_ROW3PIN};
    static uint8 Local_Keypad_arr[KPD_Row_Number][KPD_Column_Number] = KPD_Arr;

    for (uint8 Column = 0; Column < KPD_Column_Number; Column++)
    119a:	0f 5f       	subi	r16, 0xFF	; 255
    119c:	03 30       	cpi	r16, 0x03	; 3
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <KPD_VidGetPressedKey+0xa4>
    11a0:	bb cf       	rjmp	.-138    	; 0x1118 <KPD_VidGetPressedKey+0x1a>
        }
        // Set the current column pin back to high
        DIO_VidSetPinValue(KPD_PORT, Column_arr[Column], PinHigh);
    }

    return Key_Pressed_Value;
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
}
    11a4:	0f 90       	pop	r0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	08 95       	ret

000011b8 <KPD_VidGetPressedKeyLoop>:

uint8 KPD_VidGetPressedKeyLoop()
{
	uint8 key= KPD_NOT_Pressed;
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
	while(key== KPD_NOT_Pressed){
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <KPD_VidGetPressedKeyLoop+0x8>
		key= KPD_VidGetPressedKey();
    11bc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <KPD_VidGetPressedKey>
}

uint8 KPD_VidGetPressedKeyLoop()
{
	uint8 key= KPD_NOT_Pressed;
	while(key== KPD_NOT_Pressed){
    11c0:	8f 3f       	cpi	r24, 0xFF	; 255
    11c2:	e1 f3       	breq	.-8      	; 0x11bc <KPD_VidGetPressedKeyLoop+0x4>
		key= KPD_VidGetPressedKey();
	}
	return key;
    11c4:	08 95       	ret

000011c6 <LCD_voidSendCommand>:
        // Write a blank space to delete the character
        LCD_voidSendData(' ');

        // Move the cursor back one position again to be ready for the next character
        Cursor_Postion--;
        LCD_voidGoToRowColumn(Cursor_Postion / 16, Cursor_Postion % 16);
    11c6:	cf 93       	push	r28
    11c8:	c8 2f       	mov	r28, r24
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	66 e0       	ldi	r22, 0x06	; 6
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>
    11de:	6c 2f       	mov	r22, r28
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	0e 94 49 04 	call	0x892	; 0x892 <DIO_VidSetPortValue>
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	66 e0       	ldi	r22, 0x06	; 6
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>
    11f0:	83 ef       	ldi	r24, 0xF3	; 243
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <LCD_voidSendCommand+0x2e>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <LCD_voidSendCommand+0x34>
    11fa:	00 00       	nop
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	66 e0       	ldi	r22, 0x06	; 6
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <LCD_voidInit>:
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	0e 94 23 04 	call	0x846	; 0x846 <DIO_VidSetPortDirection>
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 03 03 	call	0x606	; 0x606 <DIO_VidSetPinDirection>
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	66 e0       	ldi	r22, 0x06	; 6
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	0e 94 03 03 	call	0x606	; 0x606 <DIO_VidSetPinDirection>
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	66 e0       	ldi	r22, 0x06	; 6
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	0e 94 03 03 	call	0x606	; 0x606 <DIO_VidSetPinDirection>
    1230:	85 ea       	ldi	r24, 0xA5	; 165
    1232:	9e e0       	ldi	r25, 0x0E	; 14
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <LCD_voidInit+0x2a>
    1238:	00 c0       	rjmp	.+0      	; 0x123a <LCD_voidInit+0x30>
    123a:	00 00       	nop
    123c:	88 e3       	ldi	r24, 0x38	; 56
    123e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendCommand>
    1242:	8c e0       	ldi	r24, 0x0C	; 12
    1244:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendCommand>
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendCommand>
    124e:	83 ef       	ldi	r24, 0xF3	; 243
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <LCD_voidInit+0x48>
    1256:	00 c0       	rjmp	.+0      	; 0x1258 <LCD_voidInit+0x4e>
    1258:	00 00       	nop
    125a:	08 95       	ret

0000125c <LCD_voidGoToRowColumn>:
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	d8 2f       	mov	r29, r24
    1262:	c6 2f       	mov	r28, r22
    1264:	86 2f       	mov	r24, r22
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	20 e4       	ldi	r18, 0x40	; 64
    126a:	d2 9f       	mul	r29, r18
    126c:	80 0d       	add	r24, r0
    126e:	91 1d       	adc	r25, r1
    1270:	11 24       	eor	r1, r1
    1272:	80 58       	subi	r24, 0x80	; 128
    1274:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendCommand>
    1278:	80 e1       	ldi	r24, 0x10	; 16
    127a:	d8 9f       	mul	r29, r24
    127c:	c0 0d       	add	r28, r0
    127e:	11 24       	eor	r1, r1
    1280:	c0 93 4e 06 	sts	0x064E, r28	; 0x80064e <Cursor_Postion>
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <LCD_voidSendData>:
    128a:	cf 93       	push	r28
    128c:	c8 2f       	mov	r28, r24
    128e:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <Cursor_Postion>
    1292:	80 31       	cpi	r24, 0x10	; 16
    1294:	21 f4       	brne	.+8      	; 0x129e <LCD_voidSendData+0x14>
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
    129e:	41 e0       	ldi	r20, 0x01	; 1
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	66 e0       	ldi	r22, 0x06	; 6
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>
    12b2:	6c 2f       	mov	r22, r28
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	0e 94 49 04 	call	0x892	; 0x892 <DIO_VidSetPortValue>
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	66 e0       	ldi	r22, 0x06	; 6
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>
    12c4:	83 ef       	ldi	r24, 0xF3	; 243
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <LCD_voidSendData+0x3e>
    12cc:	00 c0       	rjmp	.+0      	; 0x12ce <LCD_voidSendData+0x44>
    12ce:	00 00       	nop
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	66 e0       	ldi	r22, 0x06	; 6
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_VidSetPinValue>
    12da:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <Cursor_Postion>
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <Cursor_Postion>
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <LCD_voidSendString>:
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	ec 01       	movw	r28, r24
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <LCD_voidSendString+0xe>
    12f0:	21 96       	adiw	r28, 0x01	; 1
    12f2:	0e 94 45 09 	call	0x128a	; 0x128a <LCD_voidSendData>
    12f6:	88 81       	ld	r24, Y
    12f8:	81 11       	cpse	r24, r1
    12fa:	fa cf       	rjmp	.-12     	; 0x12f0 <LCD_voidSendString+0x8>
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <LCD_voidPrintNumber>:
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	60 97       	sbiw	r28, 0x10	; 16
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	99 23       	and	r25, r25
    1318:	44 f4       	brge	.+16     	; 0x132a <LCD_voidPrintNumber+0x28>
    131a:	2d e2       	ldi	r18, 0x2D	; 45
    131c:	29 83       	std	Y+1, r18	; 0x01
    131e:	91 95       	neg	r25
    1320:	81 95       	neg	r24
    1322:	91 09       	sbc	r25, r1
    1324:	21 e0       	ldi	r18, 0x01	; 1
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <LCD_voidPrintNumber+0x30>
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <LCD_voidPrintNumber+0x30>
    1330:	9a 01       	movw	r18, r20
    1332:	6a e0       	ldi	r22, 0x0A	; 10
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__divmodhi4>
    133a:	e1 e0       	ldi	r30, 0x01	; 1
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	ec 0f       	add	r30, r28
    1340:	fd 1f       	adc	r31, r29
    1342:	e2 0f       	add	r30, r18
    1344:	f3 1f       	adc	r31, r19
    1346:	80 5d       	subi	r24, 0xD0	; 208
    1348:	80 83       	st	Z, r24
    134a:	a9 01       	movw	r20, r18
    134c:	4f 5f       	subi	r20, 0xFF	; 255
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	86 2f       	mov	r24, r22
    1352:	97 2f       	mov	r25, r23
    1354:	18 16       	cp	r1, r24
    1356:	19 06       	cpc	r1, r25
    1358:	5c f3       	brlt	.-42     	; 0x1330 <LCD_voidPrintNumber+0x2e>
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <LCD_voidPrintNumber+0x86>
    1360:	a1 e0       	ldi	r26, 0x01	; 1
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ac 0f       	add	r26, r28
    1366:	bd 1f       	adc	r27, r29
    1368:	a6 0f       	add	r26, r22
    136a:	b7 1f       	adc	r27, r23
    136c:	8c 91       	ld	r24, X
    136e:	e1 e0       	ldi	r30, 0x01	; 1
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	ec 0f       	add	r30, r28
    1374:	fd 1f       	adc	r31, r29
    1376:	e2 0f       	add	r30, r18
    1378:	f3 1f       	adc	r31, r19
    137a:	90 81       	ld	r25, Z
    137c:	9c 93       	st	X, r25
    137e:	80 83       	st	Z, r24
    1380:	21 50       	subi	r18, 0x01	; 1
    1382:	31 09       	sbc	r19, r1
    1384:	6f 5f       	subi	r22, 0xFF	; 255
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	ca 01       	movw	r24, r20
    138a:	55 23       	and	r21, r21
    138c:	0c f4       	brge	.+2      	; 0x1390 <LCD_voidPrintNumber+0x8e>
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	95 95       	asr	r25
    1392:	87 95       	ror	r24
    1394:	68 17       	cp	r22, r24
    1396:	79 07       	cpc	r23, r25
    1398:	1c f3       	brlt	.-58     	; 0x1360 <LCD_voidPrintNumber+0x5e>
    139a:	ce 01       	movw	r24, r28
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
    13a2:	60 96       	adiw	r28, 0x10	; 16
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <LCD_voidClearScreen>:
    }
}

void LCD_voidClearScreen()
{
    LCD_voidSendCommand(0x01);
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendCommand>
    Cursor_Postion = 0;
    13ba:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <Cursor_Postion>
    13be:	08 95       	ret

000013c0 <LCD_voidShiftDisplayLeft>:
}

void LCD_voidShiftDisplayLeft(uint16 digits)
{
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	8c 01       	movw	r16, r24
	for(int i=0; i<digits; i++){
    13ca:	c0 e0       	ldi	r28, 0x00	; 0
    13cc:	d0 e0       	ldi	r29, 0x00	; 0
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <LCD_voidShiftDisplayLeft+0x18>
		LCD_voidSendCommand(0x18);
    13d0:	88 e1       	ldi	r24, 0x18	; 24
    13d2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendCommand>
    Cursor_Postion = 0;
}

void LCD_voidShiftDisplayLeft(uint16 digits)
{
	for(int i=0; i<digits; i++){
    13d6:	21 96       	adiw	r28, 0x01	; 1
    13d8:	c0 17       	cp	r28, r16
    13da:	d1 07       	cpc	r29, r17
    13dc:	c8 f3       	brcs	.-14     	; 0x13d0 <LCD_voidShiftDisplayLeft+0x10>
		LCD_voidSendCommand(0x18);
	}
}
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <lights_init>:
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	10 c0       	rjmp	.+32     	; 0x140e <lights_init+0x26>
    13ee:	47 b3       	in	r20, 0x17	; 23
    13f0:	f9 01       	movw	r30, r18
    13f2:	e0 56       	subi	r30, 0x60	; 96
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	00 80       	ld	r0, Z
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <lights_init+0x1a>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <lights_init+0x16>
    1406:	84 2b       	or	r24, r20
    1408:	87 bb       	out	0x17, r24	; 23
    140a:	2f 5f       	subi	r18, 0xFF	; 255
    140c:	3f 4f       	sbci	r19, 0xFF	; 255
    140e:	25 30       	cpi	r18, 0x05	; 5
    1410:	31 05       	cpc	r19, r1
    1412:	6c f3       	brlt	.-38     	; 0x13ee <lights_init+0x6>
    1414:	0e 94 cb 0a 	call	0x1596	; 0x1596 <Timer1_Fast_PWM_INIT>
    1418:	08 95       	ret

0000141a <lights_On_Off>:
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	c1 97       	sbiw	r24, 0x31	; 49
    141e:	61 33       	cpi	r22, 0x31	; 49
    1420:	81 f4       	brne	.+32     	; 0x1442 <lights_On_Off+0x28>
    1422:	48 b3       	in	r20, 0x18	; 24
    1424:	fc 01       	movw	r30, r24
    1426:	e0 56       	subi	r30, 0x60	; 96
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	c9 01       	movw	r24, r18
    1430:	00 80       	ld	r0, Z
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <lights_On_Off+0x1e>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <lights_On_Off+0x1a>
    143c:	84 2b       	or	r24, r20
    143e:	88 bb       	out	0x18, r24	; 24
    1440:	08 95       	ret
    1442:	62 33       	cpi	r22, 0x32	; 50
    1444:	81 f4       	brne	.+32     	; 0x1466 <lights_On_Off+0x4c>
    1446:	48 b3       	in	r20, 0x18	; 24
    1448:	fc 01       	movw	r30, r24
    144a:	e0 56       	subi	r30, 0x60	; 96
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	21 e0       	ldi	r18, 0x01	; 1
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	c9 01       	movw	r24, r18
    1454:	00 80       	ld	r0, Z
    1456:	02 c0       	rjmp	.+4      	; 0x145c <lights_On_Off+0x42>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <lights_On_Off+0x3e>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	88 bb       	out	0x18, r24	; 24
    1466:	08 95       	ret

00001468 <control_dimmer_light>:
    1468:	60 53       	subi	r22, 0x30	; 48
    146a:	71 09       	sbc	r23, r1
    146c:	81 09       	sbc	r24, r1
    146e:	91 09       	sbc	r25, r1
    1470:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__floatunsisf>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e1       	ldi	r20, 0x10	; 16
    147a:	51 e4       	ldi	r21, 0x41	; 65
    147c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__divsf3>
    1480:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Timer1A_Set_Duty_Cycle>
    1484:	08 95       	ret

00001486 <all_lights>:
    1486:	87 33       	cpi	r24, 0x37	; 55
    1488:	f1 f4       	brne	.+60     	; 0x14c6 <all_lights+0x40>
    148a:	11 c0       	rjmp	.+34     	; 0x14ae <all_lights+0x28>
    148c:	48 b3       	in	r20, 0x18	; 24
    148e:	f9 01       	movw	r30, r18
    1490:	e0 56       	subi	r30, 0x60	; 96
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	00 80       	ld	r0, Z
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <all_lights+0x1a>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <all_lights+0x16>
    14a4:	84 2b       	or	r24, r20
    14a6:	88 bb       	out	0x18, r24	; 24
    14a8:	2f 5f       	subi	r18, 0xFF	; 255
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <all_lights+0x2c>
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	25 30       	cpi	r18, 0x05	; 5
    14b4:	31 05       	cpc	r19, r1
    14b6:	50 f3       	brcs	.-44     	; 0x148c <all_lights+0x6>
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	80 e8       	ldi	r24, 0x80	; 128
    14be:	9f e3       	ldi	r25, 0x3F	; 63
    14c0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Timer1A_Set_Duty_Cycle>
    14c4:	08 95       	ret
    14c6:	88 33       	cpi	r24, 0x38	; 56
    14c8:	e9 f4       	brne	.+58     	; 0x1504 <all_lights+0x7e>
    14ca:	12 c0       	rjmp	.+36     	; 0x14f0 <all_lights+0x6a>
    14cc:	48 b3       	in	r20, 0x18	; 24
    14ce:	f9 01       	movw	r30, r18
    14d0:	e0 56       	subi	r30, 0x60	; 96
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	00 80       	ld	r0, Z
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <all_lights+0x5a>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <all_lights+0x56>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	88 bb       	out	0x18, r24	; 24
    14ea:	2f 5f       	subi	r18, 0xFF	; 255
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <all_lights+0x6e>
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	25 30       	cpi	r18, 0x05	; 5
    14f6:	31 05       	cpc	r19, r1
    14f8:	48 f3       	brcs	.-46     	; 0x14cc <all_lights+0x46>
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	cb 01       	movw	r24, r22
    1500:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Timer1A_Set_Duty_Cycle>
    1504:	08 95       	ret

00001506 <main>:


int main(void)
{
	
	UART_init(4800, 1000000);
    1506:	68 94       	set
    1508:	ee 24       	eor	r14, r14
    150a:	e6 f8       	bld	r14, 6
    150c:	0f 2e       	mov	r0, r31
    150e:	f2 e4       	ldi	r31, 0x42	; 66
    1510:	ff 2e       	mov	r15, r31
    1512:	f0 2d       	mov	r31, r0
    1514:	0f e0       	ldi	r16, 0x0F	; 15
    1516:	10 e0       	ldi	r17, 0x00	; 0
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	60 ec       	ldi	r22, 0xC0	; 192
    1522:	72 e1       	ldi	r23, 0x12	; 18
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 42 07 	call	0xe84	; 0xe84 <UART_init>
	timer0_initializeCTC();
    152c:	0e 94 b5 0a 	call	0x156a	; 0x156a <timer0_initializeCTC>
	Timer2_Fast_PWM_INIT();
    1530:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <Timer2_Fast_PWM_INIT>
	externalInterrupt_init(0);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 2d 06 	call	0xc5a	; 0xc5a <externalInterrupt_init>
	externalInterrupt_init(1);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 2d 06 	call	0xc5a	; 0xc5a <externalInterrupt_init>
	ADC_Init();
    1544:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	lights_init();
    1548:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <lights_init>
	LCD_voidInit();
    154c:	0e 94 05 09 	call	0x120a	; 0x120a <LCD_voidInit>
	KPD_VidInit();
    1550:	0e 94 4e 08 	call	0x109c	; 0x109c <KPD_VidInit>
	
	Timer1A_Set_Duty_Cycle(0);
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	cb 01       	movw	r24, r22
    155a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Timer1A_Set_Duty_Cycle>
	
	EEPROM_vWriteByteToAddress(GUESTS_NUM_ADDRESS, 0);
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	8f e1       	ldi	r24, 0x1F	; 31
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_vWriteByteToAddress>
    1568:	ff cf       	rjmp	.-2      	; 0x1568 <main+0x62>

0000156a <timer0_initializeCTC>:
    156a:	83 b7       	in	r24, 0x33	; 51
    156c:	88 60       	ori	r24, 0x08	; 8
    156e:	83 bf       	out	0x33, r24	; 51
    1570:	83 b7       	in	r24, 0x33	; 51
    1572:	8f 7b       	andi	r24, 0xBF	; 191
    1574:	83 bf       	out	0x33, r24	; 51
    1576:	83 b7       	in	r24, 0x33	; 51
    1578:	8e 7f       	andi	r24, 0xFE	; 254
    157a:	83 bf       	out	0x33, r24	; 51
    157c:	83 b7       	in	r24, 0x33	; 51
    157e:	82 60       	ori	r24, 0x02	; 2
    1580:	83 bf       	out	0x33, r24	; 51
    1582:	83 b7       	in	r24, 0x33	; 51
    1584:	8b 7f       	andi	r24, 0xFB	; 251
    1586:	83 bf       	out	0x33, r24	; 51
    1588:	89 b7       	in	r24, 0x39	; 57
    158a:	82 60       	ori	r24, 0x02	; 2
    158c:	89 bf       	out	0x39, r24	; 57
    158e:	80 e8       	ldi	r24, 0x80	; 128
    1590:	8c bf       	out	0x3c, r24	; 60
    1592:	12 be       	out	0x32, r1	; 50
    1594:	08 95       	ret

00001596 <Timer1_Fast_PWM_INIT>:
    1596:	8f b5       	in	r24, 0x2f	; 47
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	8f bd       	out	0x2f, r24	; 47
    159c:	8f b5       	in	r24, 0x2f	; 47
    159e:	8d 7f       	andi	r24, 0xFD	; 253
    15a0:	8f bd       	out	0x2f, r24	; 47
    15a2:	8e b5       	in	r24, 0x2e	; 46
    15a4:	88 60       	ori	r24, 0x08	; 8
    15a6:	8e bd       	out	0x2e, r24	; 46
    15a8:	81 b3       	in	r24, 0x11	; 17
    15aa:	80 62       	ori	r24, 0x20	; 32
    15ac:	81 bb       	out	0x11, r24	; 17
    15ae:	81 b3       	in	r24, 0x11	; 17
    15b0:	80 61       	ori	r24, 0x10	; 16
    15b2:	81 bb       	out	0x11, r24	; 17
    15b4:	8e b5       	in	r24, 0x2e	; 46
    15b6:	81 60       	ori	r24, 0x01	; 1
    15b8:	8e bd       	out	0x2e, r24	; 46
    15ba:	8e b5       	in	r24, 0x2e	; 46
    15bc:	82 60       	ori	r24, 0x02	; 2
    15be:	8e bd       	out	0x2e, r24	; 46
    15c0:	8e b5       	in	r24, 0x2e	; 46
    15c2:	8b 7f       	andi	r24, 0xFB	; 251
    15c4:	8e bd       	out	0x2e, r24	; 46
    15c6:	8f b5       	in	r24, 0x2f	; 47
    15c8:	80 68       	ori	r24, 0x80	; 128
    15ca:	8f bd       	out	0x2f, r24	; 47
    15cc:	8f b5       	in	r24, 0x2f	; 47
    15ce:	8f 7b       	andi	r24, 0xBF	; 191
    15d0:	8f bd       	out	0x2f, r24	; 47
    15d2:	8f b5       	in	r24, 0x2f	; 47
    15d4:	80 62       	ori	r24, 0x20	; 32
    15d6:	8f bd       	out	0x2f, r24	; 47
    15d8:	8f b5       	in	r24, 0x2f	; 47
    15da:	8f 7e       	andi	r24, 0xEF	; 239
    15dc:	8f bd       	out	0x2f, r24	; 47
    15de:	1b bc       	out	0x2b, r1	; 43
    15e0:	1a bc       	out	0x2a, r1	; 42
    15e2:	19 bc       	out	0x29, r1	; 41
    15e4:	18 bc       	out	0x28, r1	; 40
    15e6:	08 95       	ret

000015e8 <Timer2_Fast_PWM_INIT>:
    15e8:	85 b5       	in	r24, 0x25	; 37
    15ea:	80 64       	ori	r24, 0x40	; 64
    15ec:	85 bd       	out	0x25, r24	; 37
    15ee:	85 b5       	in	r24, 0x25	; 37
    15f0:	88 60       	ori	r24, 0x08	; 8
    15f2:	85 bd       	out	0x25, r24	; 37
    15f4:	85 b5       	in	r24, 0x25	; 37
    15f6:	8e 7f       	andi	r24, 0xFE	; 254
    15f8:	85 bd       	out	0x25, r24	; 37
    15fa:	85 b5       	in	r24, 0x25	; 37
    15fc:	80 62       	ori	r24, 0x20	; 32
    15fe:	85 bd       	out	0x25, r24	; 37
    1600:	85 b5       	in	r24, 0x25	; 37
    1602:	8d 7f       	andi	r24, 0xFD	; 253
    1604:	85 bd       	out	0x25, r24	; 37
    1606:	85 b5       	in	r24, 0x25	; 37
    1608:	84 60       	ori	r24, 0x04	; 4
    160a:	85 bd       	out	0x25, r24	; 37
    160c:	81 b3       	in	r24, 0x11	; 17
    160e:	80 68       	ori	r24, 0x80	; 128
    1610:	81 bb       	out	0x11, r24	; 17
    1612:	13 bc       	out	0x23, r1	; 35
    1614:	08 95       	ret

00001616 <Timer1A_Set_Duty_Cycle>:
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	6b 01       	movw	r12, r22
    1620:	7c 01       	movw	r14, r24
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__cmpsf2>
    162c:	18 16       	cp	r1, r24
    162e:	1c f0       	brlt	.+6      	; 0x1636 <Timer1A_Set_Duty_Cycle+0x20>
    1630:	1b bc       	out	0x2b, r1	; 43
    1632:	1a bc       	out	0x2a, r1	; 42
    1634:	1b c0       	rjmp	.+54     	; 0x166c <Timer1A_Set_Duty_Cycle+0x56>
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	5f e3       	ldi	r21, 0x3F	; 63
    163e:	c7 01       	movw	r24, r14
    1640:	b6 01       	movw	r22, r12
    1642:	0e 94 21 10 	call	0x2042	; 0x2042 <__gesf2>
    1646:	88 23       	and	r24, r24
    1648:	2c f0       	brlt	.+10     	; 0x1654 <Timer1A_Set_Duty_Cycle+0x3e>
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9b bd       	out	0x2b, r25	; 43
    1650:	8a bd       	out	0x2a, r24	; 42
    1652:	0c c0       	rjmp	.+24     	; 0x166c <Timer1A_Set_Duty_Cycle+0x56>
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4f e7       	ldi	r20, 0x7F	; 127
    165a:	53 e4       	ldi	r21, 0x43	; 67
    165c:	c7 01       	movw	r24, r14
    165e:	b6 01       	movw	r22, r12
    1660:	0e 94 26 10 	call	0x204c	; 0x204c <__mulsf3>
    1664:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__fixunssfsi>
    1668:	7b bd       	out	0x2b, r23	; 43
    166a:	6a bd       	out	0x2a, r22	; 42
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	08 95       	ret

00001676 <Timer1B_Set_Duty_Cycle>:
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	6b 01       	movw	r12, r22
    1680:	7c 01       	movw	r14, r24
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	a9 01       	movw	r20, r18
    1688:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__cmpsf2>
    168c:	18 16       	cp	r1, r24
    168e:	1c f0       	brlt	.+6      	; 0x1696 <Timer1B_Set_Duty_Cycle+0x20>
    1690:	19 bc       	out	0x29, r1	; 41
    1692:	18 bc       	out	0x28, r1	; 40
    1694:	1b c0       	rjmp	.+54     	; 0x16cc <Timer1B_Set_Duty_Cycle+0x56>
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	c7 01       	movw	r24, r14
    16a0:	b6 01       	movw	r22, r12
    16a2:	0e 94 21 10 	call	0x2042	; 0x2042 <__gesf2>
    16a6:	88 23       	and	r24, r24
    16a8:	2c f0       	brlt	.+10     	; 0x16b4 <Timer1B_Set_Duty_Cycle+0x3e>
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	99 bd       	out	0x29, r25	; 41
    16b0:	88 bd       	out	0x28, r24	; 40
    16b2:	0c c0       	rjmp	.+24     	; 0x16cc <Timer1B_Set_Duty_Cycle+0x56>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	53 e4       	ldi	r21, 0x43	; 67
    16bc:	c7 01       	movw	r24, r14
    16be:	b6 01       	movw	r22, r12
    16c0:	0e 94 26 10 	call	0x204c	; 0x204c <__mulsf3>
    16c4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__fixunssfsi>
    16c8:	79 bd       	out	0x29, r23	; 41
    16ca:	68 bd       	out	0x28, r22	; 40
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	df 90       	pop	r13
    16d2:	cf 90       	pop	r12
    16d4:	08 95       	ret

000016d6 <Timer2_Set_Duty_Cycle>:
    16d6:	cf 92       	push	r12
    16d8:	df 92       	push	r13
    16da:	ef 92       	push	r14
    16dc:	ff 92       	push	r15
    16de:	6b 01       	movw	r12, r22
    16e0:	7c 01       	movw	r14, r24
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	a9 01       	movw	r20, r18
    16e8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__cmpsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	14 f0       	brlt	.+4      	; 0x16f4 <Timer2_Set_Duty_Cycle+0x1e>
    16f0:	13 bc       	out	0x23, r1	; 35
    16f2:	18 c0       	rjmp	.+48     	; 0x1724 <Timer2_Set_Duty_Cycle+0x4e>
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	c7 01       	movw	r24, r14
    16fe:	b6 01       	movw	r22, r12
    1700:	0e 94 21 10 	call	0x2042	; 0x2042 <__gesf2>
    1704:	88 23       	and	r24, r24
    1706:	1c f0       	brlt	.+6      	; 0x170e <Timer2_Set_Duty_Cycle+0x38>
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	83 bd       	out	0x23, r24	; 35
    170c:	0b c0       	rjmp	.+22     	; 0x1724 <Timer2_Set_Duty_Cycle+0x4e>
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	53 e4       	ldi	r21, 0x43	; 67
    1716:	c7 01       	movw	r24, r14
    1718:	b6 01       	movw	r22, r12
    171a:	0e 94 26 10 	call	0x204c	; 0x204c <__mulsf3>
    171e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__fixunssfsi>
    1722:	63 bd       	out	0x23, r22	; 35
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	df 90       	pop	r13
    172a:	cf 90       	pop	r12
    172c:	08 95       	ret

0000172e <servo_angle>:
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	44 e3       	ldi	r20, 0x34	; 52
    1734:	53 e4       	ldi	r21, 0x43	; 67
    1736:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__divsf3>
    173a:	29 e2       	ldi	r18, 0x29	; 41
    173c:	3c e5       	ldi	r19, 0x5C	; 92
    173e:	4f e8       	ldi	r20, 0x8F	; 143
    1740:	5d e3       	ldi	r21, 0x3D	; 61
    1742:	0e 94 26 10 	call	0x204c	; 0x204c <__mulsf3>
    1746:	2e ea       	ldi	r18, 0xAE	; 174
    1748:	37 e4       	ldi	r19, 0x47	; 71
    174a:	41 e6       	ldi	r20, 0x61	; 97
    174c:	5d e3       	ldi	r21, 0x3D	; 61
    174e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__addsf3>
    1752:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <Timer2_Set_Duty_Cycle>
    1756:	08 95       	ret

00001758 <controlDoor>:
    1758:	81 33       	cpi	r24, 0x31	; 49
    175a:	39 f4       	brne	.+14     	; 0x176a <controlDoor+0x12>
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	84 eb       	ldi	r24, 0xB4	; 180
    1762:	92 e4       	ldi	r25, 0x42	; 66
    1764:	0e 94 97 0b 	call	0x172e	; 0x172e <servo_angle>
    1768:	08 95       	ret
    176a:	82 33       	cpi	r24, 0x32	; 50
    176c:	31 f4       	brne	.+12     	; 0x177a <controlDoor+0x22>
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	cb 01       	movw	r24, r22
    1774:	0e 94 97 0b 	call	0x172e	; 0x172e <servo_angle>
    1778:	08 95       	ret
    177a:	8c e2       	ldi	r24, 0x2C	; 44
    177c:	92 e0       	ldi	r25, 0x02	; 2
    177e:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_printText>
    1782:	08 95       	ret

00001784 <user_funcChoice>:
volatile uint32 count1=1;
uint8 tog=2;

void user_funcChoice(void)
{
	LCD_voidClearScreen();
    1784:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
	LCD_voidSendString("1:Temp Monitor");
    1788:	8a e0       	ldi	r24, 0x0A	; 10
    178a:	95 e0       	ldi	r25, 0x05	; 5
    178c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
	LCD_voidGoToRowColumn(1, 0);
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
	LCD_voidSendString("2:Control Lights");
    1798:	89 e1       	ldi	r24, 0x19	; 25
    179a:	95 e0       	ldi	r25, 0x05	; 5
    179c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
    17a0:	08 95       	ret

000017a2 <user_callFunc>:
}
void user_callFunc(uint8 num)
{
    17a2:	cf 93       	push	r28
    17a4:	c8 2f       	mov	r28, r24
	user_funcChoice();
    17a6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <user_funcChoice>
	uint8 key= KPD_NOT_Pressed;
	switch(num)
    17aa:	c1 33       	cpi	r28, 0x31	; 49
    17ac:	19 f0       	breq	.+6      	; 0x17b4 <user_callFunc+0x12>
    17ae:	c2 33       	cpi	r28, 0x32	; 50
    17b0:	01 f1       	breq	.+64     	; 0x17f2 <user_callFunc+0x50>
    17b2:	23 c1       	rjmp	.+582    	; 0x19fa <user_callFunc+0x258>
	{
		case '1':
		LCD_voidClearScreen();
    17b4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
		LCD_voidSendString(" 9: To Go Back");
    17b8:	8a e2       	ldi	r24, 0x2A	; 42
    17ba:	95 e0       	ldi	r25, 0x05	; 5
    17bc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
		LCD_voidGoToRowColumn(1, 0);
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
		LCD_voidSendString(" Temperature= ");
    17c8:	89 e3       	ldi	r24, 0x39	; 57
    17ca:	95 e0       	ldi	r25, 0x05	; 5
    17cc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
		while(1){
			calculate_Temperature();
    17d0:	0e 94 77 00 	call	0xee	; 0xee <calculate_Temperature>
			LCD_voidGoToRowColumn(1, 14); LCD_voidPrintNumber(temperature);
    17d4:	6e e0       	ldi	r22, 0x0E	; 14
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
    17dc:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <__data_end>
    17e0:	90 91 3d 06 	lds	r25, 0x063D	; 0x80063d <__data_end+0x1>
    17e4:	0e 94 81 09 	call	0x1302	; 0x1302 <LCD_voidPrintNumber>
			key= KPD_VidGetPressedKey();
    17e8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <KPD_VidGetPressedKey>
			if(key== '9') break;
    17ec:	89 33       	cpi	r24, 0x39	; 57
    17ee:	81 f7       	brne	.-32     	; 0x17d0 <user_callFunc+0x2e>
    17f0:	13 c1       	rjmp	.+550    	; 0x1a18 <user_callFunc+0x276>
		}
		break;
		
		case '2':
		LCD_voidClearScreen();
    17f2:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
		LCD_voidSendString("9 Go Back, Pick");
    17f6:	88 e4       	ldi	r24, 0x48	; 72
    17f8:	95 e0       	ldi	r25, 0x05	; 5
    17fa:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
		LCD_voidGoToRowColumn(1, 0);
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
		LCD_voidSendString("LED 1->5, 6 Dimm");
    1806:	88 e5       	ldi	r24, 0x58	; 88
    1808:	95 e0       	ldi	r25, 0x05	; 5
    180a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
		LCD_voidGoToRowColumn(0, 17);
    180e:	61 e1       	ldi	r22, 0x11	; 17
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
		LCD_voidSendString("7: Turn All On");
    1816:	89 e6       	ldi	r24, 0x69	; 105
    1818:	95 e0       	ldi	r25, 0x05	; 5
    181a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
		LCD_voidGoToRowColumn(1, 17);
    181e:	61 e1       	ldi	r22, 0x11	; 17
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
		LCD_voidSendString("8: Turn All Off");
    1826:	88 e7       	ldi	r24, 0x78	; 120
    1828:	95 e0       	ldi	r25, 0x05	; 5
    182a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
		count1=1;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e0       	ldi	r26, 0x00	; 0
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <count1>
    183a:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <count1+0x1>
    183e:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <count1+0x2>
    1842:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <count1+0x3>
		tog=1;
    1846:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <tog>
		while(1){
			count1++;
    184a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <count1>
    184e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <count1+0x1>
    1852:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <count1+0x2>
    1856:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <count1+0x3>
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	a1 1d       	adc	r26, r1
    185e:	b1 1d       	adc	r27, r1
    1860:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <count1>
    1864:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <count1+0x1>
    1868:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <count1+0x2>
    186c:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <count1+0x3>
			key= KPD_NOT_Pressed;
			uint8 key2= KPD_NOT_Pressed;
			if((count1%500)==0 && tog==1){
    1870:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <count1>
    1874:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <count1+0x1>
    1878:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <count1+0x2>
    187c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <count1+0x3>
    1880:	24 ef       	ldi	r18, 0xF4	; 244
    1882:	31 e0       	ldi	r19, 0x01	; 1
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodsi4>
    188c:	67 2b       	or	r22, r23
    188e:	68 2b       	or	r22, r24
    1890:	69 2b       	or	r22, r25
    1892:	c1 f4       	brne	.+48     	; 0x18c4 <user_callFunc+0x122>
    1894:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <tog>
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	a1 f4       	brne	.+40     	; 0x18c4 <user_callFunc+0x122>
				LCD_voidShiftDisplayLeft(17);
    189c:	81 e1       	ldi	r24, 0x11	; 17
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <LCD_voidShiftDisplayLeft>
				count1=1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a0 e0       	ldi	r26, 0x00	; 0
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <count1>
    18b0:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <count1+0x1>
    18b4:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <count1+0x2>
    18b8:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <count1+0x3>
				tog=2;
    18bc:	82 e0       	ldi	r24, 0x02	; 2
    18be:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <tog>
    18c2:	42 c0       	rjmp	.+132    	; 0x1948 <user_callFunc+0x1a6>
			}
			else if((count1%600)==0 && tog==2){
    18c4:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <count1>
    18c8:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <count1+0x1>
    18cc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <count1+0x2>
    18d0:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <count1+0x3>
    18d4:	28 e5       	ldi	r18, 0x58	; 88
    18d6:	32 e0       	ldi	r19, 0x02	; 2
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodsi4>
    18e0:	67 2b       	or	r22, r23
    18e2:	68 2b       	or	r22, r24
    18e4:	69 2b       	or	r22, r25
    18e6:	81 f5       	brne	.+96     	; 0x1948 <user_callFunc+0x1a6>
    18e8:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <tog>
    18ec:	82 30       	cpi	r24, 0x02	; 2
    18ee:	61 f5       	brne	.+88     	; 0x1948 <user_callFunc+0x1a6>
				LCD_voidClearScreen();
    18f0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
				LCD_voidSendString("9 Go Back,Choose");
    18f4:	88 e8       	ldi	r24, 0x88	; 136
    18f6:	95 e0       	ldi	r25, 0x05	; 5
    18f8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
				LCD_voidGoToRowColumn(1, 0);
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
				LCD_voidSendString("LED 1->5, 6 Dimm");
    1904:	88 e5       	ldi	r24, 0x58	; 88
    1906:	95 e0       	ldi	r25, 0x05	; 5
    1908:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
				LCD_voidGoToRowColumn(0, 17);
    190c:	61 e1       	ldi	r22, 0x11	; 17
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
				LCD_voidSendString("7: Turn All On");
    1914:	89 e6       	ldi	r24, 0x69	; 105
    1916:	95 e0       	ldi	r25, 0x05	; 5
    1918:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
				LCD_voidGoToRowColumn(1, 17);
    191c:	61 e1       	ldi	r22, 0x11	; 17
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
				LCD_voidSendString("8: Turn All Off");
    1924:	88 e7       	ldi	r24, 0x78	; 120
    1926:	95 e0       	ldi	r25, 0x05	; 5
    1928:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
				count1=1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a0 e0       	ldi	r26, 0x00	; 0
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <count1>
    1938:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <count1+0x1>
    193c:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <count1+0x2>
    1940:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <count1+0x3>
				tog=1;
    1944:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <tog>
			}
			key= KPD_VidGetPressedKey();
    1948:	0e 94 7f 08 	call	0x10fe	; 0x10fe <KPD_VidGetPressedKey>
    194c:	c8 2f       	mov	r28, r24
			if(key!= KPD_NOT_Pressed){
    194e:	8f 3f       	cpi	r24, 0xFF	; 255
    1950:	09 f4       	brne	.+2      	; 0x1954 <user_callFunc+0x1b2>
    1952:	7b cf       	rjmp	.-266    	; 0x184a <user_callFunc+0xa8>
				if(key== '9') break;
    1954:	89 33       	cpi	r24, 0x39	; 57
    1956:	09 f4       	brne	.+2      	; 0x195a <user_callFunc+0x1b8>
    1958:	50 c0       	rjmp	.+160    	; 0x19fa <user_callFunc+0x258>
				else if(key>='1' && key<='5'){
    195a:	8f ec       	ldi	r24, 0xCF	; 207
    195c:	8c 0f       	add	r24, r28
    195e:	85 30       	cpi	r24, 0x05	; 5
    1960:	a8 f4       	brcc	.+42     	; 0x198c <user_callFunc+0x1ea>
					LCD_voidClearScreen();
    1962:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
					LCD_voidSendString("1: Turn On");
    1966:	89 e9       	ldi	r24, 0x99	; 153
    1968:	95 e0       	ldi	r25, 0x05	; 5
    196a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
					LCD_voidGoToRowColumn(1, 0);
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
					LCD_voidSendString("2: Turn Off");
    1976:	84 ea       	ldi	r24, 0xA4	; 164
    1978:	95 e0       	ldi	r25, 0x05	; 5
    197a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
					key2= KPD_VidGetPressedKeyLoop();
    197e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <KPD_VidGetPressedKeyLoop>
					lights_On_Off(key, key2);
    1982:	68 2f       	mov	r22, r24
    1984:	8c 2f       	mov	r24, r28
    1986:	0e 94 0d 0a 	call	0x141a	; 0x141a <lights_On_Off>
    198a:	25 c0       	rjmp	.+74     	; 0x19d6 <user_callFunc+0x234>
				}
				else if(key== '6'){
    198c:	c6 33       	cpi	r28, 0x36	; 54
    198e:	b9 f4       	brne	.+46     	; 0x19be <user_callFunc+0x21c>
					LCD_voidClearScreen();
    1990:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
					LCD_voidSendString("Choose brightness");
    1994:	80 eb       	ldi	r24, 0xB0	; 176
    1996:	95 e0       	ldi	r25, 0x05	; 5
    1998:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
					LCD_voidGoToRowColumn(1, 0);
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
					LCD_voidSendString("from 0 to 9");
    19a4:	82 ec       	ldi	r24, 0xC2	; 194
    19a6:	95 e0       	ldi	r25, 0x05	; 5
    19a8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
					key2= KPD_VidGetPressedKeyLoop();
    19ac:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <KPD_VidGetPressedKeyLoop>
					control_dimmer_light(key2);
    19b0:	68 2f       	mov	r22, r24
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 34 0a 	call	0x1468	; 0x1468 <control_dimmer_light>
    19bc:	0c c0       	rjmp	.+24     	; 0x19d6 <user_callFunc+0x234>
				}
				else if(key== '7' || key== '8'){
    19be:	89 ec       	ldi	r24, 0xC9	; 201
    19c0:	8c 0f       	add	r24, r28
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	20 f4       	brcc	.+8      	; 0x19ce <user_callFunc+0x22c>
					all_lights(key);
    19c6:	8c 2f       	mov	r24, r28
    19c8:	0e 94 43 0a 	call	0x1486	; 0x1486 <all_lights>
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <user_callFunc+0x234>
				}
				else LCD_voidSendString("Invalid Choice");
    19ce:	8e ec       	ldi	r24, 0xCE	; 206
    19d0:	95 e0       	ldi	r25, 0x05	; 5
    19d2:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
				count1= 599;
    19d6:	87 e5       	ldi	r24, 0x57	; 87
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	a0 e0       	ldi	r26, 0x00	; 0
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <count1>
    19e2:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <count1+0x1>
    19e6:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <count1+0x2>
    19ea:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <count1+0x3>
				tog=2;
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <tog>
				LCD_voidClearScreen();
    19f4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
    19f8:	28 cf       	rjmp	.-432    	; 0x184a <user_callFunc+0xa8>
			}
		}
		default: LCD_voidClearScreen(); LCD_voidSendString("Invvalid Choice"); _delay_ms(500);
    19fa:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
    19fe:	8d ed       	ldi	r24, 0xDD	; 221
    1a00:	95 e0       	ldi	r25, 0x05	; 5
    1a02:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
    1a06:	2f e9       	ldi	r18, 0x9F	; 159
    1a08:	86 e8       	ldi	r24, 0x86	; 134
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	21 50       	subi	r18, 0x01	; 1
    1a0e:	80 40       	sbci	r24, 0x00	; 0
    1a10:	90 40       	sbci	r25, 0x00	; 0
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <user_callFunc+0x26a>
    1a14:	00 c0       	rjmp	.+0      	; 0x1a16 <user_callFunc+0x274>
    1a16:	00 00       	nop
	}
}
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <__vector_2>:


ISR(INT1_vect)
{
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	af 93       	push	r26
    1a40:	bf 93       	push	r27
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	cd bf       	out	0x3d, r28	; 61
	uint8 pass_counter=0;
	uint8 pass_tries_count=0;                                                     //counts the entered key of the password from the keypad
	uint32 User_Num;
	uint8 user_Name[USER_SIZE];
	uint8 tog=1;
	if(user_validityFlag==TRUE){
    1a54:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <user_validityFlag>
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	39 f4       	brne	.+14     	; 0x1a6a <__vector_2+0x4e>
		LCD_voidClearScreen();
    1a5c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
		user_validityFlag= FALSE;
    1a60:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <user_validityFlag>
		tog= 2;
    1a64:	22 e0       	ldi	r18, 0x02	; 2
    1a66:	2b 87       	std	Y+11, r18	; 0x0b
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <__vector_2+0x52>
	uint8 key_pressed = KPD_NOT_Pressed;
	uint8 pass_counter=0;
	uint8 pass_tries_count=0;                                                     //counts the entered key of the password from the keypad
	uint32 User_Num;
	uint8 user_Name[USER_SIZE];
	uint8 tog=1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	8b 87       	std	Y+11, r24	; 0x0b
	{
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};          //temporarily hold the entire password that will be entered by the user to be check
		LCD_voidClearScreen();
		LCD_voidSendString("Enter pass:");
		_delay_ms(200);															 //Halt the system for the given time in (ms)
		pass_counter=0;															 //counts the number of entered characters
    1a6e:	e1 2c       	mov	r14, r1
    1a70:	c4 c0       	rjmp	.+392    	; 0x1bfa <__vector_2+0x1de>
		tog= 2;
	}
	//===============================================================================================================================
	while(tog==1)
	{
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};          //temporarily hold the entire password that will be entered by the user to be check
    1a72:	8f ef       	ldi	r24, 0xFF	; 255
    1a74:	8f 83       	std	Y+7, r24	; 0x07
    1a76:	88 87       	std	Y+8, r24	; 0x08
    1a78:	89 87       	std	Y+9, r24	; 0x09
    1a7a:	8a 87       	std	Y+10, r24	; 0x0a
		LCD_voidClearScreen();
    1a7c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
		LCD_voidSendString("Enter pass:");
    1a80:	8d ee       	ldi	r24, 0xED	; 237
    1a82:	95 e0       	ldi	r25, 0x05	; 5
    1a84:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
    1a88:	8f e4       	ldi	r24, 0x4F	; 79
    1a8a:	93 ec       	ldi	r25, 0xC3	; 195
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <__vector_2+0x70>
    1a90:	00 c0       	rjmp	.+0      	; 0x1a92 <__vector_2+0x76>
    1a92:	00 00       	nop
		_delay_ms(200);															 //Halt the system for the given time in (ms)
		pass_counter=0;															 //counts the number of entered characters
    1a94:	00 e0       	ldi	r16, 0x00	; 0
		while(pass_counter<PASS_SIZE)
    1a96:	2e c0       	rjmp	.+92     	; 0x1af4 <__vector_2+0xd8>
		{
			while (key_pressed == KPD_NOT_Pressed)									 //repeat till the user press any key
			{
				key_pressed = KPD_VidGetPressedKey();							 //if the user pressed any button in keypad save the value in key_pressed
    1a98:	0e 94 7f 08 	call	0x10fe	; 0x10fe <KPD_VidGetPressedKey>
    1a9c:	18 2f       	mov	r17, r24
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <__vector_2+0x86>
    1aa0:	1f ef       	ldi	r17, 0xFF	; 255
		LCD_voidSendString("Enter pass:");
		_delay_ms(200);															 //Halt the system for the given time in (ms)
		pass_counter=0;															 //counts the number of entered characters
		while(pass_counter<PASS_SIZE)
		{
			while (key_pressed == KPD_NOT_Pressed)									 //repeat till the user press any key
    1aa2:	1f 3f       	cpi	r17, 0xFF	; 255
    1aa4:	c9 f3       	breq	.-14     	; 0x1a98 <__vector_2+0x7c>
			{
				key_pressed = KPD_VidGetPressedKey();							 //if the user pressed any button in keypad save the value in key_pressed
			}
			pass[pass_counter] = key_pressed;									 //add the pressed key to the password string
    1aa6:	e7 e0       	ldi	r30, 0x07	; 7
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	ec 0f       	add	r30, r28
    1aac:	fd 1f       	adc	r31, r29
    1aae:	e0 0f       	add	r30, r16
    1ab0:	f1 1d       	adc	r31, r1
    1ab2:	10 83       	st	Z, r17
			LCD_voidGoToRowColumn(0, 11+pass_counter);
    1ab4:	0f 2e       	mov	r0, r31
    1ab6:	fb e0       	ldi	r31, 0x0B	; 11
    1ab8:	ff 2e       	mov	r15, r31
    1aba:	f0 2d       	mov	r31, r0
    1abc:	f0 0e       	add	r15, r16
    1abe:	6f 2d       	mov	r22, r15
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
			LCD_voidSendData(key_pressed);										 //print the entered character
    1ac6:	81 2f       	mov	r24, r17
    1ac8:	0e 94 45 09 	call	0x128a	; 0x128a <LCD_voidSendData>
    1acc:	8f e4       	ldi	r24, 0x4F	; 79
    1ace:	93 ec       	ldi	r25, 0xC3	; 195
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <__vector_2+0xb4>
    1ad4:	00 c0       	rjmp	.+0      	; 0x1ad6 <__vector_2+0xba>
    1ad6:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);									 //Halt the system for the given time in (ms)
			LCD_voidGoToRowColumn(0,11+pass_counter);									 //return the cursor to the location of the previous character to replace it with the password sign
    1ad8:	6f 2d       	mov	r22, r15
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
			LCD_voidSendData(PASSWORD_SYMBOL);								     // to display (Password sign *)
    1ae0:	8a e2       	ldi	r24, 0x2A	; 42
    1ae2:	0e 94 45 09 	call	0x128a	; 0x128a <LCD_voidSendData>
			pass_counter++;														 //increase the password counter that count the characters of the pass
    1ae6:	0f 5f       	subi	r16, 0xFF	; 255
    1ae8:	83 ed       	ldi	r24, 0xD3	; 211
    1aea:	90 e3       	ldi	r25, 0x30	; 48
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <__vector_2+0xd0>
    1af0:	00 c0       	rjmp	.+0      	; 0x1af2 <__vector_2+0xd6>
    1af2:	00 00       	nop
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};          //temporarily hold the entire password that will be entered by the user to be check
		LCD_voidClearScreen();
		LCD_voidSendString("Enter pass:");
		_delay_ms(200);															 //Halt the system for the given time in (ms)
		pass_counter=0;															 //counts the number of entered characters
		while(pass_counter<PASS_SIZE)
    1af4:	04 30       	cpi	r16, 0x04	; 4
    1af6:	a0 f2       	brcs	.-88     	; 0x1aa0 <__vector_2+0x84>
		}
		//EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
		//======================================================================================================================================
		
		/*compare passwords*/
		if (EEPROM_ui8CheckIfPassExist2(pass) == -1)					         //in case of right password
    1af8:	ce 01       	movw	r24, r28
    1afa:	07 96       	adiw	r24, 0x07	; 7
    1afc:	0e 94 27 05 	call	0xa4e	; 0xa4e <EEPROM_ui8CheckIfPassExist2>
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <__vector_2+0xea>
    1b04:	44 c0       	rjmp	.+136    	; 0x1b8e <__vector_2+0x172>
		{
			user_validityFlag= FALSE;
    1b06:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <user_validityFlag>
			pass_tries_count++;													 //increase the number of wrong tries to block login if it exceeds the allowed tries
    1b0a:	e3 94       	inc	r14
			//login_mode = NO_MODE;												 //set the mode as not logged in
			LCD_voidClearScreen();													 //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    1b0c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
			LCD_voidSendString("Wrong pass");
    1b10:	89 ef       	ldi	r24, 0xF9	; 249
    1b12:	95 e0       	ldi	r25, 0x05	; 5
    1b14:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
			if (pass_tries_count>=TRIES_ALLOWED)								 //if the condition of the block mode is true
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	8e 15       	cp	r24, r14
    1b1c:	00 f5       	brcc	.+64     	; 0x1b5e <__vector_2+0x142>
    1b1e:	9f e9       	ldi	r25, 0x9F	; 159
    1b20:	26 e8       	ldi	r18, 0x86	; 134
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	91 50       	subi	r25, 0x01	; 1
    1b26:	20 40       	sbci	r18, 0x00	; 0
    1b28:	80 40       	sbci	r24, 0x00	; 0
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <__vector_2+0x108>
    1b2c:	00 c0       	rjmp	.+0      	; 0x1b2e <__vector_2+0x112>
    1b2e:	00 00       	nop
			{
				_delay_ms(500);
				LCD_voidClearScreen();
    1b30:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
				LCD_voidSendString("You Been Blocked");
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	96 e0       	ldi	r25, 0x06	; 6
    1b38:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
				LCD_voidGoToRowColumn(1, 0);
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
				LCD_voidSendString("Reset The System");
    1b44:	81 ec       	ldi	r24, 0xC1	; 193
    1b46:	94 e0       	ldi	r25, 0x04	; 4
    1b48:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);          //write to the EEPROM TRUE to the the block mode address
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	80 e1       	ldi	r24, 0x10	; 16
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_vWriteByteToAddress>
				block_mode_flag = TRUE;											 //turn on block mode
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <block_mode_flag>
				break;														     //breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
    1b5c:	52 c0       	rjmp	.+164    	; 0x1c02 <__vector_2+0x1e6>
			}          //end of if that check if the number of tries exceeds the maximum tries allowed
			//LCD_movecursor(2,0);
			LCD_voidGoToRowColumn(1, 0);
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
			LCD_voidSendData((TRIES_ALLOWED-pass_tries_count)+ASCII_ZERO);			 //print the number of tries left before block mode to be activated
    1b66:	83 e3       	ldi	r24, 0x33	; 51
    1b68:	8e 19       	sub	r24, r14
    1b6a:	0e 94 45 09 	call	0x128a	; 0x128a <LCD_voidSendData>
			LCD_voidSendString(" Trial(s) left");
    1b6e:	85 e1       	ldi	r24, 0x15	; 21
    1b70:	96 e0       	ldi	r25, 0x06	; 6
    1b72:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
    1b76:	9f e3       	ldi	r25, 0x3F	; 63
    1b78:	2d e0       	ldi	r18, 0x0D	; 13
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	91 50       	subi	r25, 0x01	; 1
    1b7e:	20 40       	sbci	r18, 0x00	; 0
    1b80:	80 40       	sbci	r24, 0x00	; 0
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <__vector_2+0x160>
    1b84:	00 c0       	rjmp	.+0      	; 0x1b86 <__vector_2+0x16a>
    1b86:	00 00       	nop
			_delay_ms(1000);													 //Halt the system for the given time in (ms)
			LCD_voidClearScreen();													 //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    1b88:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
    1b8c:	36 c0       	rjmp	.+108    	; 0x1bfa <__vector_2+0x1de>
		}
		else																	 //in case of wrong password
		{
			User_Num = EEPROM_ui8CheckIfPassExist2(pass);
    1b8e:	ce 01       	movw	r24, r28
    1b90:	07 96       	adiw	r24, 0x07	; 7
    1b92:	0e 94 27 05 	call	0xa4e	; 0xa4e <EEPROM_ui8CheckIfPassExist2>
    1b96:	8c 01       	movw	r16, r24
			LCD_voidClearScreen();
    1b98:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
			LCD_voidSendString("Correct pass");
    1b9c:	84 e2       	ldi	r24, 0x24	; 36
    1b9e:	96 e0       	ldi	r25, 0x06	; 6
    1ba0:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
			EEPROM_vReadBlockFromAddress(GUEST_USER_ADDRESS[User_Num], user_Name, USER_SIZE);
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	ee 0f       	add	r30, r30
    1ba8:	ff 1f       	adc	r31, r31
    1baa:	ea 58       	subi	r30, 0x8A	; 138
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	46 e0       	ldi	r20, 0x06	; 6
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	be 01       	movw	r22, r28
    1bb4:	6f 5f       	subi	r22, 0xFF	; 255
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	0e 94 62 04 	call	0x8c4	; 0x8c4 <EEPROM_vReadBlockFromAddress>
			LCD_voidGoToRowColumn(1, 1);
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_voidGoToRowColumn>
			LCD_voidSendString("Welcome  ");
    1bc8:	81 e3       	ldi	r24, 0x31	; 49
    1bca:	96 e0       	ldi	r25, 0x06	; 6
    1bcc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
			LCD_voidSendString(user_Name);
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <LCD_voidSendString>
    1bd8:	9f e3       	ldi	r25, 0x3F	; 63
    1bda:	2d e0       	ldi	r18, 0x0D	; 13
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	91 50       	subi	r25, 0x01	; 1
    1be0:	20 40       	sbci	r18, 0x00	; 0
    1be2:	80 40       	sbci	r24, 0x00	; 0
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <__vector_2+0x1c2>
    1be6:	00 c0       	rjmp	.+0      	; 0x1be8 <__vector_2+0x1cc>
    1be8:	00 00       	nop
			_delay_ms(1000);
			LCD_voidClearScreen();
    1bea:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LCD_voidClearScreen>
			user_validityFlag= TRUE;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <user_validityFlag>
			user_funcChoice();
    1bf4:	0e 94 c2 0b 	call	0x1784	; 0x1784 <user_funcChoice>
			break;
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <__vector_2+0x1e6>
		LCD_voidClearScreen();
		user_validityFlag= FALSE;
		tog= 2;
	}
	//===============================================================================================================================
	while(tog==1)
    1bfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bfc:	91 30       	cpi	r25, 0x01	; 1
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <__vector_2+0x1e6>
    1c00:	38 cf       	rjmp	.-400    	; 0x1a72 <__vector_2+0x56>
			user_validityFlag= TRUE;
			user_funcChoice();
			break;
		}
	}
    1c02:	2b 96       	adiw	r28, 0x0b	; 11
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	ff 91       	pop	r31
    1c14:	ef 91       	pop	r30
    1c16:	bf 91       	pop	r27
    1c18:	af 91       	pop	r26
    1c1a:	9f 91       	pop	r25
    1c1c:	8f 91       	pop	r24
    1c1e:	7f 91       	pop	r23
    1c20:	6f 91       	pop	r22
    1c22:	5f 91       	pop	r21
    1c24:	4f 91       	pop	r20
    1c26:	3f 91       	pop	r19
    1c28:	2f 91       	pop	r18
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	0f 90       	pop	r0
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	0f 90       	pop	r0
    1c38:	1f 90       	pop	r1
    1c3a:	18 95       	reti

00001c3c <__subsf3>:
    1c3c:	50 58       	subi	r21, 0x80	; 128

00001c3e <__addsf3>:
    1c3e:	bb 27       	eor	r27, r27
    1c40:	aa 27       	eor	r26, r26
    1c42:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__addsf3x>
    1c46:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_round>
    1c4a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__fp_pscA>
    1c4e:	38 f0       	brcs	.+14     	; 0x1c5e <__addsf3+0x20>
    1c50:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__fp_pscB>
    1c54:	20 f0       	brcs	.+8      	; 0x1c5e <__addsf3+0x20>
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <__addsf3+0x28>
    1c58:	9f 3f       	cpi	r25, 0xFF	; 255
    1c5a:	19 f4       	brne	.+6      	; 0x1c62 <__addsf3+0x24>
    1c5c:	26 f4       	brtc	.+8      	; 0x1c66 <__addsf3+0x28>
    1c5e:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__fp_nan>
    1c62:	0e f4       	brtc	.+2      	; 0x1c66 <__addsf3+0x28>
    1c64:	e0 95       	com	r30
    1c66:	e7 fb       	bst	r30, 7
    1c68:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>

00001c6c <__addsf3x>:
    1c6c:	e9 2f       	mov	r30, r25
    1c6e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__fp_split3>
    1c72:	58 f3       	brcs	.-42     	; 0x1c4a <__addsf3+0xc>
    1c74:	ba 17       	cp	r27, r26
    1c76:	62 07       	cpc	r22, r18
    1c78:	73 07       	cpc	r23, r19
    1c7a:	84 07       	cpc	r24, r20
    1c7c:	95 07       	cpc	r25, r21
    1c7e:	20 f0       	brcs	.+8      	; 0x1c88 <__addsf3x+0x1c>
    1c80:	79 f4       	brne	.+30     	; 0x1ca0 <__addsf3x+0x34>
    1c82:	a6 f5       	brtc	.+104    	; 0x1cec <__addsf3x+0x80>
    1c84:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__fp_zero>
    1c88:	0e f4       	brtc	.+2      	; 0x1c8c <__addsf3x+0x20>
    1c8a:	e0 95       	com	r30
    1c8c:	0b 2e       	mov	r0, r27
    1c8e:	ba 2f       	mov	r27, r26
    1c90:	a0 2d       	mov	r26, r0
    1c92:	0b 01       	movw	r0, r22
    1c94:	b9 01       	movw	r22, r18
    1c96:	90 01       	movw	r18, r0
    1c98:	0c 01       	movw	r0, r24
    1c9a:	ca 01       	movw	r24, r20
    1c9c:	a0 01       	movw	r20, r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	ff 27       	eor	r31, r31
    1ca2:	59 1b       	sub	r21, r25
    1ca4:	99 f0       	breq	.+38     	; 0x1ccc <__addsf3x+0x60>
    1ca6:	59 3f       	cpi	r21, 0xF9	; 249
    1ca8:	50 f4       	brcc	.+20     	; 0x1cbe <__addsf3x+0x52>
    1caa:	50 3e       	cpi	r21, 0xE0	; 224
    1cac:	68 f1       	brcs	.+90     	; 0x1d08 <__addsf3x+0x9c>
    1cae:	1a 16       	cp	r1, r26
    1cb0:	f0 40       	sbci	r31, 0x00	; 0
    1cb2:	a2 2f       	mov	r26, r18
    1cb4:	23 2f       	mov	r18, r19
    1cb6:	34 2f       	mov	r19, r20
    1cb8:	44 27       	eor	r20, r20
    1cba:	58 5f       	subi	r21, 0xF8	; 248
    1cbc:	f3 cf       	rjmp	.-26     	; 0x1ca4 <__addsf3x+0x38>
    1cbe:	46 95       	lsr	r20
    1cc0:	37 95       	ror	r19
    1cc2:	27 95       	ror	r18
    1cc4:	a7 95       	ror	r26
    1cc6:	f0 40       	sbci	r31, 0x00	; 0
    1cc8:	53 95       	inc	r21
    1cca:	c9 f7       	brne	.-14     	; 0x1cbe <__addsf3x+0x52>
    1ccc:	7e f4       	brtc	.+30     	; 0x1cec <__addsf3x+0x80>
    1cce:	1f 16       	cp	r1, r31
    1cd0:	ba 0b       	sbc	r27, r26
    1cd2:	62 0b       	sbc	r22, r18
    1cd4:	73 0b       	sbc	r23, r19
    1cd6:	84 0b       	sbc	r24, r20
    1cd8:	ba f0       	brmi	.+46     	; 0x1d08 <__addsf3x+0x9c>
    1cda:	91 50       	subi	r25, 0x01	; 1
    1cdc:	a1 f0       	breq	.+40     	; 0x1d06 <__addsf3x+0x9a>
    1cde:	ff 0f       	add	r31, r31
    1ce0:	bb 1f       	adc	r27, r27
    1ce2:	66 1f       	adc	r22, r22
    1ce4:	77 1f       	adc	r23, r23
    1ce6:	88 1f       	adc	r24, r24
    1ce8:	c2 f7       	brpl	.-16     	; 0x1cda <__addsf3x+0x6e>
    1cea:	0e c0       	rjmp	.+28     	; 0x1d08 <__addsf3x+0x9c>
    1cec:	ba 0f       	add	r27, r26
    1cee:	62 1f       	adc	r22, r18
    1cf0:	73 1f       	adc	r23, r19
    1cf2:	84 1f       	adc	r24, r20
    1cf4:	48 f4       	brcc	.+18     	; 0x1d08 <__addsf3x+0x9c>
    1cf6:	87 95       	ror	r24
    1cf8:	77 95       	ror	r23
    1cfa:	67 95       	ror	r22
    1cfc:	b7 95       	ror	r27
    1cfe:	f7 95       	ror	r31
    1d00:	9e 3f       	cpi	r25, 0xFE	; 254
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <__addsf3x+0x9a>
    1d04:	b0 cf       	rjmp	.-160    	; 0x1c66 <__addsf3+0x28>
    1d06:	93 95       	inc	r25
    1d08:	88 0f       	add	r24, r24
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <__addsf3x+0xa2>
    1d0c:	99 27       	eor	r25, r25
    1d0e:	ee 0f       	add	r30, r30
    1d10:	97 95       	ror	r25
    1d12:	87 95       	ror	r24
    1d14:	08 95       	ret

00001d16 <__cmpsf2>:
    1d16:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fp_cmp>
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <__cmpsf2+0x8>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	08 95       	ret

00001d20 <__divsf3>:
    1d20:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__divsf3x>
    1d24:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_round>
    1d28:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__fp_pscB>
    1d2c:	58 f0       	brcs	.+22     	; 0x1d44 <__divsf3+0x24>
    1d2e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__fp_pscA>
    1d32:	40 f0       	brcs	.+16     	; 0x1d44 <__divsf3+0x24>
    1d34:	29 f4       	brne	.+10     	; 0x1d40 <__divsf3+0x20>
    1d36:	5f 3f       	cpi	r21, 0xFF	; 255
    1d38:	29 f0       	breq	.+10     	; 0x1d44 <__divsf3+0x24>
    1d3a:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>
    1d3e:	51 11       	cpse	r21, r1
    1d40:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__fp_szero>
    1d44:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__fp_nan>

00001d48 <__divsf3x>:
    1d48:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__fp_split3>
    1d4c:	68 f3       	brcs	.-38     	; 0x1d28 <__divsf3+0x8>

00001d4e <__divsf3_pse>:
    1d4e:	99 23       	and	r25, r25
    1d50:	b1 f3       	breq	.-20     	; 0x1d3e <__divsf3+0x1e>
    1d52:	55 23       	and	r21, r21
    1d54:	91 f3       	breq	.-28     	; 0x1d3a <__divsf3+0x1a>
    1d56:	95 1b       	sub	r25, r21
    1d58:	55 0b       	sbc	r21, r21
    1d5a:	bb 27       	eor	r27, r27
    1d5c:	aa 27       	eor	r26, r26
    1d5e:	62 17       	cp	r22, r18
    1d60:	73 07       	cpc	r23, r19
    1d62:	84 07       	cpc	r24, r20
    1d64:	38 f0       	brcs	.+14     	; 0x1d74 <__divsf3_pse+0x26>
    1d66:	9f 5f       	subi	r25, 0xFF	; 255
    1d68:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6a:	22 0f       	add	r18, r18
    1d6c:	33 1f       	adc	r19, r19
    1d6e:	44 1f       	adc	r20, r20
    1d70:	aa 1f       	adc	r26, r26
    1d72:	a9 f3       	breq	.-22     	; 0x1d5e <__divsf3_pse+0x10>
    1d74:	35 d0       	rcall	.+106    	; 0x1de0 <__divsf3_pse+0x92>
    1d76:	0e 2e       	mov	r0, r30
    1d78:	3a f0       	brmi	.+14     	; 0x1d88 <__divsf3_pse+0x3a>
    1d7a:	e0 e8       	ldi	r30, 0x80	; 128
    1d7c:	32 d0       	rcall	.+100    	; 0x1de2 <__divsf3_pse+0x94>
    1d7e:	91 50       	subi	r25, 0x01	; 1
    1d80:	50 40       	sbci	r21, 0x00	; 0
    1d82:	e6 95       	lsr	r30
    1d84:	00 1c       	adc	r0, r0
    1d86:	ca f7       	brpl	.-14     	; 0x1d7a <__divsf3_pse+0x2c>
    1d88:	2b d0       	rcall	.+86     	; 0x1de0 <__divsf3_pse+0x92>
    1d8a:	fe 2f       	mov	r31, r30
    1d8c:	29 d0       	rcall	.+82     	; 0x1de0 <__divsf3_pse+0x92>
    1d8e:	66 0f       	add	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	88 1f       	adc	r24, r24
    1d94:	bb 1f       	adc	r27, r27
    1d96:	26 17       	cp	r18, r22
    1d98:	37 07       	cpc	r19, r23
    1d9a:	48 07       	cpc	r20, r24
    1d9c:	ab 07       	cpc	r26, r27
    1d9e:	b0 e8       	ldi	r27, 0x80	; 128
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <__divsf3_pse+0x56>
    1da2:	bb 0b       	sbc	r27, r27
    1da4:	80 2d       	mov	r24, r0
    1da6:	bf 01       	movw	r22, r30
    1da8:	ff 27       	eor	r31, r31
    1daa:	93 58       	subi	r25, 0x83	; 131
    1dac:	5f 4f       	sbci	r21, 0xFF	; 255
    1dae:	3a f0       	brmi	.+14     	; 0x1dbe <__divsf3_pse+0x70>
    1db0:	9e 3f       	cpi	r25, 0xFE	; 254
    1db2:	51 05       	cpc	r21, r1
    1db4:	78 f0       	brcs	.+30     	; 0x1dd4 <__divsf3_pse+0x86>
    1db6:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>
    1dba:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__fp_szero>
    1dbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc0:	e4 f3       	brlt	.-8      	; 0x1dba <__divsf3_pse+0x6c>
    1dc2:	98 3e       	cpi	r25, 0xE8	; 232
    1dc4:	d4 f3       	brlt	.-12     	; 0x1dba <__divsf3_pse+0x6c>
    1dc6:	86 95       	lsr	r24
    1dc8:	77 95       	ror	r23
    1dca:	67 95       	ror	r22
    1dcc:	b7 95       	ror	r27
    1dce:	f7 95       	ror	r31
    1dd0:	9f 5f       	subi	r25, 0xFF	; 255
    1dd2:	c9 f7       	brne	.-14     	; 0x1dc6 <__divsf3_pse+0x78>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	91 1d       	adc	r25, r1
    1dd8:	96 95       	lsr	r25
    1dda:	87 95       	ror	r24
    1ddc:	97 f9       	bld	r25, 7
    1dde:	08 95       	ret
    1de0:	e1 e0       	ldi	r30, 0x01	; 1
    1de2:	66 0f       	add	r22, r22
    1de4:	77 1f       	adc	r23, r23
    1de6:	88 1f       	adc	r24, r24
    1de8:	bb 1f       	adc	r27, r27
    1dea:	62 17       	cp	r22, r18
    1dec:	73 07       	cpc	r23, r19
    1dee:	84 07       	cpc	r24, r20
    1df0:	ba 07       	cpc	r27, r26
    1df2:	20 f0       	brcs	.+8      	; 0x1dfc <__divsf3_pse+0xae>
    1df4:	62 1b       	sub	r22, r18
    1df6:	73 0b       	sbc	r23, r19
    1df8:	84 0b       	sbc	r24, r20
    1dfa:	ba 0b       	sbc	r27, r26
    1dfc:	ee 1f       	adc	r30, r30
    1dfe:	88 f7       	brcc	.-30     	; 0x1de2 <__divsf3_pse+0x94>
    1e00:	e0 95       	com	r30
    1e02:	08 95       	ret

00001e04 <__fixunssfsi>:
    1e04:	0e 94 00 10 	call	0x2000	; 0x2000 <__fp_splitA>
    1e08:	88 f0       	brcs	.+34     	; 0x1e2c <__fixunssfsi+0x28>
    1e0a:	9f 57       	subi	r25, 0x7F	; 127
    1e0c:	98 f0       	brcs	.+38     	; 0x1e34 <__fixunssfsi+0x30>
    1e0e:	b9 2f       	mov	r27, r25
    1e10:	99 27       	eor	r25, r25
    1e12:	b7 51       	subi	r27, 0x17	; 23
    1e14:	b0 f0       	brcs	.+44     	; 0x1e42 <__fixunssfsi+0x3e>
    1e16:	e1 f0       	breq	.+56     	; 0x1e50 <__fixunssfsi+0x4c>
    1e18:	66 0f       	add	r22, r22
    1e1a:	77 1f       	adc	r23, r23
    1e1c:	88 1f       	adc	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	1a f0       	brmi	.+6      	; 0x1e28 <__fixunssfsi+0x24>
    1e22:	ba 95       	dec	r27
    1e24:	c9 f7       	brne	.-14     	; 0x1e18 <__fixunssfsi+0x14>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <__fixunssfsi+0x4c>
    1e28:	b1 30       	cpi	r27, 0x01	; 1
    1e2a:	91 f0       	breq	.+36     	; 0x1e50 <__fixunssfsi+0x4c>
    1e2c:	0e 94 1a 10 	call	0x2034	; 0x2034 <__fp_zero>
    1e30:	b1 e0       	ldi	r27, 0x01	; 1
    1e32:	08 95       	ret
    1e34:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__fp_zero>
    1e38:	67 2f       	mov	r22, r23
    1e3a:	78 2f       	mov	r23, r24
    1e3c:	88 27       	eor	r24, r24
    1e3e:	b8 5f       	subi	r27, 0xF8	; 248
    1e40:	39 f0       	breq	.+14     	; 0x1e50 <__fixunssfsi+0x4c>
    1e42:	b9 3f       	cpi	r27, 0xF9	; 249
    1e44:	cc f3       	brlt	.-14     	; 0x1e38 <__fixunssfsi+0x34>
    1e46:	86 95       	lsr	r24
    1e48:	77 95       	ror	r23
    1e4a:	67 95       	ror	r22
    1e4c:	b3 95       	inc	r27
    1e4e:	d9 f7       	brne	.-10     	; 0x1e46 <__fixunssfsi+0x42>
    1e50:	3e f4       	brtc	.+14     	; 0x1e60 <__fixunssfsi+0x5c>
    1e52:	90 95       	com	r25
    1e54:	80 95       	com	r24
    1e56:	70 95       	com	r23
    1e58:	61 95       	neg	r22
    1e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e60:	08 95       	ret

00001e62 <__floatunsisf>:
    1e62:	e8 94       	clt
    1e64:	09 c0       	rjmp	.+18     	; 0x1e78 <__floatsisf+0x12>

00001e66 <__floatsisf>:
    1e66:	97 fb       	bst	r25, 7
    1e68:	3e f4       	brtc	.+14     	; 0x1e78 <__floatsisf+0x12>
    1e6a:	90 95       	com	r25
    1e6c:	80 95       	com	r24
    1e6e:	70 95       	com	r23
    1e70:	61 95       	neg	r22
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	8f 4f       	sbci	r24, 0xFF	; 255
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	99 23       	and	r25, r25
    1e7a:	a9 f0       	breq	.+42     	; 0x1ea6 <__floatsisf+0x40>
    1e7c:	f9 2f       	mov	r31, r25
    1e7e:	96 e9       	ldi	r25, 0x96	; 150
    1e80:	bb 27       	eor	r27, r27
    1e82:	93 95       	inc	r25
    1e84:	f6 95       	lsr	r31
    1e86:	87 95       	ror	r24
    1e88:	77 95       	ror	r23
    1e8a:	67 95       	ror	r22
    1e8c:	b7 95       	ror	r27
    1e8e:	f1 11       	cpse	r31, r1
    1e90:	f8 cf       	rjmp	.-16     	; 0x1e82 <__floatsisf+0x1c>
    1e92:	fa f4       	brpl	.+62     	; 0x1ed2 <__floatsisf+0x6c>
    1e94:	bb 0f       	add	r27, r27
    1e96:	11 f4       	brne	.+4      	; 0x1e9c <__floatsisf+0x36>
    1e98:	60 ff       	sbrs	r22, 0
    1e9a:	1b c0       	rjmp	.+54     	; 0x1ed2 <__floatsisf+0x6c>
    1e9c:	6f 5f       	subi	r22, 0xFF	; 255
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	16 c0       	rjmp	.+44     	; 0x1ed2 <__floatsisf+0x6c>
    1ea6:	88 23       	and	r24, r24
    1ea8:	11 f0       	breq	.+4      	; 0x1eae <__floatsisf+0x48>
    1eaa:	96 e9       	ldi	r25, 0x96	; 150
    1eac:	11 c0       	rjmp	.+34     	; 0x1ed0 <__floatsisf+0x6a>
    1eae:	77 23       	and	r23, r23
    1eb0:	21 f0       	breq	.+8      	; 0x1eba <__floatsisf+0x54>
    1eb2:	9e e8       	ldi	r25, 0x8E	; 142
    1eb4:	87 2f       	mov	r24, r23
    1eb6:	76 2f       	mov	r23, r22
    1eb8:	05 c0       	rjmp	.+10     	; 0x1ec4 <__floatsisf+0x5e>
    1eba:	66 23       	and	r22, r22
    1ebc:	71 f0       	breq	.+28     	; 0x1eda <__floatsisf+0x74>
    1ebe:	96 e8       	ldi	r25, 0x86	; 134
    1ec0:	86 2f       	mov	r24, r22
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	2a f0       	brmi	.+10     	; 0x1ed2 <__floatsisf+0x6c>
    1ec8:	9a 95       	dec	r25
    1eca:	66 0f       	add	r22, r22
    1ecc:	77 1f       	adc	r23, r23
    1ece:	88 1f       	adc	r24, r24
    1ed0:	da f7       	brpl	.-10     	; 0x1ec8 <__floatsisf+0x62>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	96 95       	lsr	r25
    1ed6:	87 95       	ror	r24
    1ed8:	97 f9       	bld	r25, 7
    1eda:	08 95       	ret

00001edc <__floatundisf>:
    1edc:	e8 94       	clt

00001ede <__fp_di2sf>:
    1ede:	f9 2f       	mov	r31, r25
    1ee0:	96 eb       	ldi	r25, 0xB6	; 182
    1ee2:	ff 23       	and	r31, r31
    1ee4:	81 f0       	breq	.+32     	; 0x1f06 <__fp_di2sf+0x28>
    1ee6:	12 16       	cp	r1, r18
    1ee8:	13 06       	cpc	r1, r19
    1eea:	14 06       	cpc	r1, r20
    1eec:	44 0b       	sbc	r20, r20
    1eee:	93 95       	inc	r25
    1ef0:	f6 95       	lsr	r31
    1ef2:	87 95       	ror	r24
    1ef4:	77 95       	ror	r23
    1ef6:	67 95       	ror	r22
    1ef8:	57 95       	ror	r21
    1efa:	40 40       	sbci	r20, 0x00	; 0
    1efc:	ff 23       	and	r31, r31
    1efe:	b9 f7       	brne	.-18     	; 0x1eee <__fp_di2sf+0x10>
    1f00:	1b c0       	rjmp	.+54     	; 0x1f38 <__fp_di2sf+0x5a>
    1f02:	99 27       	eor	r25, r25
    1f04:	08 95       	ret
    1f06:	88 23       	and	r24, r24
    1f08:	51 f4       	brne	.+20     	; 0x1f1e <__fp_di2sf+0x40>
    1f0a:	98 50       	subi	r25, 0x08	; 8
    1f0c:	d2 f7       	brpl	.-12     	; 0x1f02 <__fp_di2sf+0x24>
    1f0e:	87 2b       	or	r24, r23
    1f10:	76 2f       	mov	r23, r22
    1f12:	65 2f       	mov	r22, r21
    1f14:	54 2f       	mov	r21, r20
    1f16:	43 2f       	mov	r20, r19
    1f18:	32 2f       	mov	r19, r18
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	b1 f3       	breq	.-20     	; 0x1f0a <__fp_di2sf+0x2c>
    1f1e:	12 16       	cp	r1, r18
    1f20:	13 06       	cpc	r1, r19
    1f22:	14 06       	cpc	r1, r20
    1f24:	44 0b       	sbc	r20, r20
    1f26:	88 23       	and	r24, r24
    1f28:	3a f0       	brmi	.+14     	; 0x1f38 <__fp_di2sf+0x5a>
    1f2a:	9a 95       	dec	r25
    1f2c:	44 0f       	add	r20, r20
    1f2e:	55 1f       	adc	r21, r21
    1f30:	66 1f       	adc	r22, r22
    1f32:	77 1f       	adc	r23, r23
    1f34:	88 1f       	adc	r24, r24
    1f36:	ca f7       	brpl	.-14     	; 0x1f2a <__fp_di2sf+0x4c>
    1f38:	55 23       	and	r21, r21
    1f3a:	4a f4       	brpl	.+18     	; 0x1f4e <__fp_di2sf+0x70>
    1f3c:	44 0f       	add	r20, r20
    1f3e:	55 1f       	adc	r21, r21
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <__fp_di2sf+0x68>
    1f42:	60 ff       	sbrs	r22, 0
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <__fp_di2sf+0x70>
    1f46:	6f 5f       	subi	r22, 0xFF	; 255
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	88 0f       	add	r24, r24
    1f50:	96 95       	lsr	r25
    1f52:	87 95       	ror	r24
    1f54:	97 f9       	bld	r25, 7
    1f56:	08 95       	ret

00001f58 <__fp_cmp>:
    1f58:	99 0f       	add	r25, r25
    1f5a:	00 08       	sbc	r0, r0
    1f5c:	55 0f       	add	r21, r21
    1f5e:	aa 0b       	sbc	r26, r26
    1f60:	e0 e8       	ldi	r30, 0x80	; 128
    1f62:	fe ef       	ldi	r31, 0xFE	; 254
    1f64:	16 16       	cp	r1, r22
    1f66:	17 06       	cpc	r1, r23
    1f68:	e8 07       	cpc	r30, r24
    1f6a:	f9 07       	cpc	r31, r25
    1f6c:	c0 f0       	brcs	.+48     	; 0x1f9e <__fp_cmp+0x46>
    1f6e:	12 16       	cp	r1, r18
    1f70:	13 06       	cpc	r1, r19
    1f72:	e4 07       	cpc	r30, r20
    1f74:	f5 07       	cpc	r31, r21
    1f76:	98 f0       	brcs	.+38     	; 0x1f9e <__fp_cmp+0x46>
    1f78:	62 1b       	sub	r22, r18
    1f7a:	73 0b       	sbc	r23, r19
    1f7c:	84 0b       	sbc	r24, r20
    1f7e:	95 0b       	sbc	r25, r21
    1f80:	39 f4       	brne	.+14     	; 0x1f90 <__fp_cmp+0x38>
    1f82:	0a 26       	eor	r0, r26
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <__fp_cmp+0x46>
    1f86:	23 2b       	or	r18, r19
    1f88:	24 2b       	or	r18, r20
    1f8a:	25 2b       	or	r18, r21
    1f8c:	21 f4       	brne	.+8      	; 0x1f96 <__fp_cmp+0x3e>
    1f8e:	08 95       	ret
    1f90:	0a 26       	eor	r0, r26
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <__fp_cmp+0x3e>
    1f94:	a1 40       	sbci	r26, 0x01	; 1
    1f96:	a6 95       	lsr	r26
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	81 1d       	adc	r24, r1
    1f9c:	81 1d       	adc	r24, r1
    1f9e:	08 95       	ret

00001fa0 <__fp_inf>:
    1fa0:	97 f9       	bld	r25, 7
    1fa2:	9f 67       	ori	r25, 0x7F	; 127
    1fa4:	80 e8       	ldi	r24, 0x80	; 128
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	08 95       	ret

00001fac <__fp_nan>:
    1fac:	9f ef       	ldi	r25, 0xFF	; 255
    1fae:	80 ec       	ldi	r24, 0xC0	; 192
    1fb0:	08 95       	ret

00001fb2 <__fp_pscA>:
    1fb2:	00 24       	eor	r0, r0
    1fb4:	0a 94       	dec	r0
    1fb6:	16 16       	cp	r1, r22
    1fb8:	17 06       	cpc	r1, r23
    1fba:	18 06       	cpc	r1, r24
    1fbc:	09 06       	cpc	r0, r25
    1fbe:	08 95       	ret

00001fc0 <__fp_pscB>:
    1fc0:	00 24       	eor	r0, r0
    1fc2:	0a 94       	dec	r0
    1fc4:	12 16       	cp	r1, r18
    1fc6:	13 06       	cpc	r1, r19
    1fc8:	14 06       	cpc	r1, r20
    1fca:	05 06       	cpc	r0, r21
    1fcc:	08 95       	ret

00001fce <__fp_round>:
    1fce:	09 2e       	mov	r0, r25
    1fd0:	03 94       	inc	r0
    1fd2:	00 0c       	add	r0, r0
    1fd4:	11 f4       	brne	.+4      	; 0x1fda <__fp_round+0xc>
    1fd6:	88 23       	and	r24, r24
    1fd8:	52 f0       	brmi	.+20     	; 0x1fee <__fp_round+0x20>
    1fda:	bb 0f       	add	r27, r27
    1fdc:	40 f4       	brcc	.+16     	; 0x1fee <__fp_round+0x20>
    1fde:	bf 2b       	or	r27, r31
    1fe0:	11 f4       	brne	.+4      	; 0x1fe6 <__fp_round+0x18>
    1fe2:	60 ff       	sbrs	r22, 0
    1fe4:	04 c0       	rjmp	.+8      	; 0x1fee <__fp_round+0x20>
    1fe6:	6f 5f       	subi	r22, 0xFF	; 255
    1fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fea:	8f 4f       	sbci	r24, 0xFF	; 255
    1fec:	9f 4f       	sbci	r25, 0xFF	; 255
    1fee:	08 95       	ret

00001ff0 <__fp_split3>:
    1ff0:	57 fd       	sbrc	r21, 7
    1ff2:	90 58       	subi	r25, 0x80	; 128
    1ff4:	44 0f       	add	r20, r20
    1ff6:	55 1f       	adc	r21, r21
    1ff8:	59 f0       	breq	.+22     	; 0x2010 <__fp_splitA+0x10>
    1ffa:	5f 3f       	cpi	r21, 0xFF	; 255
    1ffc:	71 f0       	breq	.+28     	; 0x201a <__fp_splitA+0x1a>
    1ffe:	47 95       	ror	r20

00002000 <__fp_splitA>:
    2000:	88 0f       	add	r24, r24
    2002:	97 fb       	bst	r25, 7
    2004:	99 1f       	adc	r25, r25
    2006:	61 f0       	breq	.+24     	; 0x2020 <__fp_splitA+0x20>
    2008:	9f 3f       	cpi	r25, 0xFF	; 255
    200a:	79 f0       	breq	.+30     	; 0x202a <__fp_splitA+0x2a>
    200c:	87 95       	ror	r24
    200e:	08 95       	ret
    2010:	12 16       	cp	r1, r18
    2012:	13 06       	cpc	r1, r19
    2014:	14 06       	cpc	r1, r20
    2016:	55 1f       	adc	r21, r21
    2018:	f2 cf       	rjmp	.-28     	; 0x1ffe <__fp_split3+0xe>
    201a:	46 95       	lsr	r20
    201c:	f1 df       	rcall	.-30     	; 0x2000 <__fp_splitA>
    201e:	08 c0       	rjmp	.+16     	; 0x2030 <__fp_splitA+0x30>
    2020:	16 16       	cp	r1, r22
    2022:	17 06       	cpc	r1, r23
    2024:	18 06       	cpc	r1, r24
    2026:	99 1f       	adc	r25, r25
    2028:	f1 cf       	rjmp	.-30     	; 0x200c <__fp_splitA+0xc>
    202a:	86 95       	lsr	r24
    202c:	71 05       	cpc	r23, r1
    202e:	61 05       	cpc	r22, r1
    2030:	08 94       	sec
    2032:	08 95       	ret

00002034 <__fp_zero>:
    2034:	e8 94       	clt

00002036 <__fp_szero>:
    2036:	bb 27       	eor	r27, r27
    2038:	66 27       	eor	r22, r22
    203a:	77 27       	eor	r23, r23
    203c:	cb 01       	movw	r24, r22
    203e:	97 f9       	bld	r25, 7
    2040:	08 95       	ret

00002042 <__gesf2>:
    2042:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fp_cmp>
    2046:	08 f4       	brcc	.+2      	; 0x204a <__gesf2+0x8>
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	08 95       	ret

0000204c <__mulsf3>:
    204c:	0e 94 39 10 	call	0x2072	; 0x2072 <__mulsf3x>
    2050:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_round>
    2054:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__fp_pscA>
    2058:	38 f0       	brcs	.+14     	; 0x2068 <__mulsf3+0x1c>
    205a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__fp_pscB>
    205e:	20 f0       	brcs	.+8      	; 0x2068 <__mulsf3+0x1c>
    2060:	95 23       	and	r25, r21
    2062:	11 f0       	breq	.+4      	; 0x2068 <__mulsf3+0x1c>
    2064:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>
    2068:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__fp_nan>
    206c:	11 24       	eor	r1, r1
    206e:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__fp_szero>

00002072 <__mulsf3x>:
    2072:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__fp_split3>
    2076:	70 f3       	brcs	.-36     	; 0x2054 <__mulsf3+0x8>

00002078 <__mulsf3_pse>:
    2078:	95 9f       	mul	r25, r21
    207a:	c1 f3       	breq	.-16     	; 0x206c <__mulsf3+0x20>
    207c:	95 0f       	add	r25, r21
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	55 1f       	adc	r21, r21
    2082:	62 9f       	mul	r22, r18
    2084:	f0 01       	movw	r30, r0
    2086:	72 9f       	mul	r23, r18
    2088:	bb 27       	eor	r27, r27
    208a:	f0 0d       	add	r31, r0
    208c:	b1 1d       	adc	r27, r1
    208e:	63 9f       	mul	r22, r19
    2090:	aa 27       	eor	r26, r26
    2092:	f0 0d       	add	r31, r0
    2094:	b1 1d       	adc	r27, r1
    2096:	aa 1f       	adc	r26, r26
    2098:	64 9f       	mul	r22, r20
    209a:	66 27       	eor	r22, r22
    209c:	b0 0d       	add	r27, r0
    209e:	a1 1d       	adc	r26, r1
    20a0:	66 1f       	adc	r22, r22
    20a2:	82 9f       	mul	r24, r18
    20a4:	22 27       	eor	r18, r18
    20a6:	b0 0d       	add	r27, r0
    20a8:	a1 1d       	adc	r26, r1
    20aa:	62 1f       	adc	r22, r18
    20ac:	73 9f       	mul	r23, r19
    20ae:	b0 0d       	add	r27, r0
    20b0:	a1 1d       	adc	r26, r1
    20b2:	62 1f       	adc	r22, r18
    20b4:	83 9f       	mul	r24, r19
    20b6:	a0 0d       	add	r26, r0
    20b8:	61 1d       	adc	r22, r1
    20ba:	22 1f       	adc	r18, r18
    20bc:	74 9f       	mul	r23, r20
    20be:	33 27       	eor	r19, r19
    20c0:	a0 0d       	add	r26, r0
    20c2:	61 1d       	adc	r22, r1
    20c4:	23 1f       	adc	r18, r19
    20c6:	84 9f       	mul	r24, r20
    20c8:	60 0d       	add	r22, r0
    20ca:	21 1d       	adc	r18, r1
    20cc:	82 2f       	mov	r24, r18
    20ce:	76 2f       	mov	r23, r22
    20d0:	6a 2f       	mov	r22, r26
    20d2:	11 24       	eor	r1, r1
    20d4:	9f 57       	subi	r25, 0x7F	; 127
    20d6:	50 40       	sbci	r21, 0x00	; 0
    20d8:	9a f0       	brmi	.+38     	; 0x2100 <__mulsf3_pse+0x88>
    20da:	f1 f0       	breq	.+60     	; 0x2118 <__mulsf3_pse+0xa0>
    20dc:	88 23       	and	r24, r24
    20de:	4a f0       	brmi	.+18     	; 0x20f2 <__mulsf3_pse+0x7a>
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31
    20e4:	bb 1f       	adc	r27, r27
    20e6:	66 1f       	adc	r22, r22
    20e8:	77 1f       	adc	r23, r23
    20ea:	88 1f       	adc	r24, r24
    20ec:	91 50       	subi	r25, 0x01	; 1
    20ee:	50 40       	sbci	r21, 0x00	; 0
    20f0:	a9 f7       	brne	.-22     	; 0x20dc <__mulsf3_pse+0x64>
    20f2:	9e 3f       	cpi	r25, 0xFE	; 254
    20f4:	51 05       	cpc	r21, r1
    20f6:	80 f0       	brcs	.+32     	; 0x2118 <__mulsf3_pse+0xa0>
    20f8:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__fp_inf>
    20fc:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__fp_szero>
    2100:	5f 3f       	cpi	r21, 0xFF	; 255
    2102:	e4 f3       	brlt	.-8      	; 0x20fc <__mulsf3_pse+0x84>
    2104:	98 3e       	cpi	r25, 0xE8	; 232
    2106:	d4 f3       	brlt	.-12     	; 0x20fc <__mulsf3_pse+0x84>
    2108:	86 95       	lsr	r24
    210a:	77 95       	ror	r23
    210c:	67 95       	ror	r22
    210e:	b7 95       	ror	r27
    2110:	f7 95       	ror	r31
    2112:	e7 95       	ror	r30
    2114:	9f 5f       	subi	r25, 0xFF	; 255
    2116:	c1 f7       	brne	.-16     	; 0x2108 <__mulsf3_pse+0x90>
    2118:	fe 2b       	or	r31, r30
    211a:	88 0f       	add	r24, r24
    211c:	91 1d       	adc	r25, r1
    211e:	96 95       	lsr	r25
    2120:	87 95       	ror	r24
    2122:	97 f9       	bld	r25, 7
    2124:	08 95       	ret

00002126 <round>:
    2126:	0e 94 00 10 	call	0x2000	; 0x2000 <__fp_splitA>
    212a:	e8 f0       	brcs	.+58     	; 0x2166 <round+0x40>
    212c:	9e 37       	cpi	r25, 0x7E	; 126
    212e:	e8 f0       	brcs	.+58     	; 0x216a <round+0x44>
    2130:	96 39       	cpi	r25, 0x96	; 150
    2132:	b8 f4       	brcc	.+46     	; 0x2162 <round+0x3c>
    2134:	9e 38       	cpi	r25, 0x8E	; 142
    2136:	48 f4       	brcc	.+18     	; 0x214a <round+0x24>
    2138:	67 2f       	mov	r22, r23
    213a:	78 2f       	mov	r23, r24
    213c:	88 27       	eor	r24, r24
    213e:	98 5f       	subi	r25, 0xF8	; 248
    2140:	f9 cf       	rjmp	.-14     	; 0x2134 <round+0xe>
    2142:	86 95       	lsr	r24
    2144:	77 95       	ror	r23
    2146:	67 95       	ror	r22
    2148:	93 95       	inc	r25
    214a:	95 39       	cpi	r25, 0x95	; 149
    214c:	d0 f3       	brcs	.-12     	; 0x2142 <round+0x1c>
    214e:	b6 2f       	mov	r27, r22
    2150:	b1 70       	andi	r27, 0x01	; 1
    2152:	6b 0f       	add	r22, r27
    2154:	71 1d       	adc	r23, r1
    2156:	81 1d       	adc	r24, r1
    2158:	20 f4       	brcc	.+8      	; 0x2162 <round+0x3c>
    215a:	87 95       	ror	r24
    215c:	77 95       	ror	r23
    215e:	67 95       	ror	r22
    2160:	93 95       	inc	r25
    2162:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__fp_mintl>
    2166:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__fp_mpack>
    216a:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__fp_szero>

0000216e <__fp_mintl>:
    216e:	88 23       	and	r24, r24
    2170:	71 f4       	brne	.+28     	; 0x218e <__fp_mintl+0x20>
    2172:	77 23       	and	r23, r23
    2174:	21 f0       	breq	.+8      	; 0x217e <__fp_mintl+0x10>
    2176:	98 50       	subi	r25, 0x08	; 8
    2178:	87 2b       	or	r24, r23
    217a:	76 2f       	mov	r23, r22
    217c:	07 c0       	rjmp	.+14     	; 0x218c <__fp_mintl+0x1e>
    217e:	66 23       	and	r22, r22
    2180:	11 f4       	brne	.+4      	; 0x2186 <__fp_mintl+0x18>
    2182:	99 27       	eor	r25, r25
    2184:	0d c0       	rjmp	.+26     	; 0x21a0 <__fp_mintl+0x32>
    2186:	90 51       	subi	r25, 0x10	; 16
    2188:	86 2b       	or	r24, r22
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	2a f0       	brmi	.+10     	; 0x219a <__fp_mintl+0x2c>
    2190:	9a 95       	dec	r25
    2192:	66 0f       	add	r22, r22
    2194:	77 1f       	adc	r23, r23
    2196:	88 1f       	adc	r24, r24
    2198:	da f7       	brpl	.-10     	; 0x2190 <__fp_mintl+0x22>
    219a:	88 0f       	add	r24, r24
    219c:	96 95       	lsr	r25
    219e:	87 95       	ror	r24
    21a0:	97 f9       	bld	r25, 7
    21a2:	08 95       	ret

000021a4 <__fp_mpack>:
    21a4:	9f 3f       	cpi	r25, 0xFF	; 255
    21a6:	31 f0       	breq	.+12     	; 0x21b4 <__fp_mpack_finite+0xc>

000021a8 <__fp_mpack_finite>:
    21a8:	91 50       	subi	r25, 0x01	; 1
    21aa:	20 f4       	brcc	.+8      	; 0x21b4 <__fp_mpack_finite+0xc>
    21ac:	87 95       	ror	r24
    21ae:	77 95       	ror	r23
    21b0:	67 95       	ror	r22
    21b2:	b7 95       	ror	r27
    21b4:	88 0f       	add	r24, r24
    21b6:	91 1d       	adc	r25, r1
    21b8:	96 95       	lsr	r25
    21ba:	87 95       	ror	r24
    21bc:	97 f9       	bld	r25, 7
    21be:	08 95       	ret

000021c0 <__divmodhi4>:
    21c0:	97 fb       	bst	r25, 7
    21c2:	07 2e       	mov	r0, r23
    21c4:	16 f4       	brtc	.+4      	; 0x21ca <__divmodhi4+0xa>
    21c6:	00 94       	com	r0
    21c8:	07 d0       	rcall	.+14     	; 0x21d8 <__divmodhi4_neg1>
    21ca:	77 fd       	sbrc	r23, 7
    21cc:	09 d0       	rcall	.+18     	; 0x21e0 <__divmodhi4_neg2>
    21ce:	0e 94 98 11 	call	0x2330	; 0x2330 <__udivmodhi4>
    21d2:	07 fc       	sbrc	r0, 7
    21d4:	05 d0       	rcall	.+10     	; 0x21e0 <__divmodhi4_neg2>
    21d6:	3e f4       	brtc	.+14     	; 0x21e6 <__divmodhi4_exit>

000021d8 <__divmodhi4_neg1>:
    21d8:	90 95       	com	r25
    21da:	81 95       	neg	r24
    21dc:	9f 4f       	sbci	r25, 0xFF	; 255
    21de:	08 95       	ret

000021e0 <__divmodhi4_neg2>:
    21e0:	70 95       	com	r23
    21e2:	61 95       	neg	r22
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255

000021e6 <__divmodhi4_exit>:
    21e6:	08 95       	ret

000021e8 <__udivmodsi4>:
    21e8:	a1 e2       	ldi	r26, 0x21	; 33
    21ea:	1a 2e       	mov	r1, r26
    21ec:	aa 1b       	sub	r26, r26
    21ee:	bb 1b       	sub	r27, r27
    21f0:	fd 01       	movw	r30, r26
    21f2:	0d c0       	rjmp	.+26     	; 0x220e <__udivmodsi4_ep>

000021f4 <__udivmodsi4_loop>:
    21f4:	aa 1f       	adc	r26, r26
    21f6:	bb 1f       	adc	r27, r27
    21f8:	ee 1f       	adc	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	a2 17       	cp	r26, r18
    21fe:	b3 07       	cpc	r27, r19
    2200:	e4 07       	cpc	r30, r20
    2202:	f5 07       	cpc	r31, r21
    2204:	20 f0       	brcs	.+8      	; 0x220e <__udivmodsi4_ep>
    2206:	a2 1b       	sub	r26, r18
    2208:	b3 0b       	sbc	r27, r19
    220a:	e4 0b       	sbc	r30, r20
    220c:	f5 0b       	sbc	r31, r21

0000220e <__udivmodsi4_ep>:
    220e:	66 1f       	adc	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	88 1f       	adc	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	1a 94       	dec	r1
    2218:	69 f7       	brne	.-38     	; 0x21f4 <__udivmodsi4_loop>
    221a:	60 95       	com	r22
    221c:	70 95       	com	r23
    221e:	80 95       	com	r24
    2220:	90 95       	com	r25
    2222:	9b 01       	movw	r18, r22
    2224:	ac 01       	movw	r20, r24
    2226:	bd 01       	movw	r22, r26
    2228:	cf 01       	movw	r24, r30
    222a:	08 95       	ret

0000222c <__muluhisi3>:
    222c:	0e 94 ac 11 	call	0x2358	; 0x2358 <__umulhisi3>
    2230:	a5 9f       	mul	r26, r21
    2232:	90 0d       	add	r25, r0
    2234:	b4 9f       	mul	r27, r20
    2236:	90 0d       	add	r25, r0
    2238:	a4 9f       	mul	r26, r20
    223a:	80 0d       	add	r24, r0
    223c:	91 1d       	adc	r25, r1
    223e:	11 24       	eor	r1, r1
    2240:	08 95       	ret

00002242 <__umoddi3>:
    2242:	68 94       	set
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <__udivdi3_umoddi3>

00002246 <__udivdi3>:
    2246:	e8 94       	clt

00002248 <__udivdi3_umoddi3>:
    2248:	8f 92       	push	r8
    224a:	9f 92       	push	r9
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	0e 94 2f 11 	call	0x225e	; 0x225e <__udivmod64>
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	9f 90       	pop	r9
    225a:	8f 90       	pop	r8
    225c:	08 95       	ret

0000225e <__udivmod64>:
    225e:	88 24       	eor	r8, r8
    2260:	99 24       	eor	r9, r9
    2262:	f4 01       	movw	r30, r8
    2264:	e4 01       	movw	r28, r8
    2266:	b0 e4       	ldi	r27, 0x40	; 64
    2268:	9f 93       	push	r25
    226a:	aa 27       	eor	r26, r26
    226c:	9a 15       	cp	r25, r10
    226e:	8b 04       	cpc	r8, r11
    2270:	9c 04       	cpc	r9, r12
    2272:	ed 05       	cpc	r30, r13
    2274:	fe 05       	cpc	r31, r14
    2276:	cf 05       	cpc	r28, r15
    2278:	d0 07       	cpc	r29, r16
    227a:	a1 07       	cpc	r26, r17
    227c:	98 f4       	brcc	.+38     	; 0x22a4 <__udivmod64+0x46>
    227e:	ad 2f       	mov	r26, r29
    2280:	dc 2f       	mov	r29, r28
    2282:	cf 2f       	mov	r28, r31
    2284:	fe 2f       	mov	r31, r30
    2286:	e9 2d       	mov	r30, r9
    2288:	98 2c       	mov	r9, r8
    228a:	89 2e       	mov	r8, r25
    228c:	98 2f       	mov	r25, r24
    228e:	87 2f       	mov	r24, r23
    2290:	76 2f       	mov	r23, r22
    2292:	65 2f       	mov	r22, r21
    2294:	54 2f       	mov	r21, r20
    2296:	43 2f       	mov	r20, r19
    2298:	32 2f       	mov	r19, r18
    229a:	22 27       	eor	r18, r18
    229c:	b8 50       	subi	r27, 0x08	; 8
    229e:	31 f7       	brne	.-52     	; 0x226c <__udivmod64+0xe>
    22a0:	bf 91       	pop	r27
    22a2:	27 c0       	rjmp	.+78     	; 0x22f2 <__udivmod64+0x94>
    22a4:	1b 2e       	mov	r1, r27
    22a6:	bf 91       	pop	r27
    22a8:	bb 27       	eor	r27, r27
    22aa:	22 0f       	add	r18, r18
    22ac:	33 1f       	adc	r19, r19
    22ae:	44 1f       	adc	r20, r20
    22b0:	55 1f       	adc	r21, r21
    22b2:	66 1f       	adc	r22, r22
    22b4:	77 1f       	adc	r23, r23
    22b6:	88 1f       	adc	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	88 1c       	adc	r8, r8
    22bc:	99 1c       	adc	r9, r9
    22be:	ee 1f       	adc	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	cc 1f       	adc	r28, r28
    22c4:	dd 1f       	adc	r29, r29
    22c6:	aa 1f       	adc	r26, r26
    22c8:	bb 1f       	adc	r27, r27
    22ca:	8a 14       	cp	r8, r10
    22cc:	9b 04       	cpc	r9, r11
    22ce:	ec 05       	cpc	r30, r12
    22d0:	fd 05       	cpc	r31, r13
    22d2:	ce 05       	cpc	r28, r14
    22d4:	df 05       	cpc	r29, r15
    22d6:	a0 07       	cpc	r26, r16
    22d8:	b1 07       	cpc	r27, r17
    22da:	48 f0       	brcs	.+18     	; 0x22ee <__udivmod64+0x90>
    22dc:	8a 18       	sub	r8, r10
    22de:	9b 08       	sbc	r9, r11
    22e0:	ec 09       	sbc	r30, r12
    22e2:	fd 09       	sbc	r31, r13
    22e4:	ce 09       	sbc	r28, r14
    22e6:	df 09       	sbc	r29, r15
    22e8:	a0 0b       	sbc	r26, r16
    22ea:	b1 0b       	sbc	r27, r17
    22ec:	21 60       	ori	r18, 0x01	; 1
    22ee:	1a 94       	dec	r1
    22f0:	e1 f6       	brne	.-72     	; 0x22aa <__udivmod64+0x4c>
    22f2:	2e f4       	brtc	.+10     	; 0x22fe <__udivmod64+0xa0>
    22f4:	94 01       	movw	r18, r8
    22f6:	af 01       	movw	r20, r30
    22f8:	be 01       	movw	r22, r28
    22fa:	cd 01       	movw	r24, r26
    22fc:	00 0c       	add	r0, r0
    22fe:	08 95       	ret

00002300 <__adddi3_s8>:
    2300:	00 24       	eor	r0, r0
    2302:	a7 fd       	sbrc	r26, 7
    2304:	00 94       	com	r0
    2306:	2a 0f       	add	r18, r26
    2308:	30 1d       	adc	r19, r0
    230a:	40 1d       	adc	r20, r0
    230c:	50 1d       	adc	r21, r0
    230e:	60 1d       	adc	r22, r0
    2310:	70 1d       	adc	r23, r0
    2312:	80 1d       	adc	r24, r0
    2314:	90 1d       	adc	r25, r0
    2316:	08 95       	ret

00002318 <__cmpdi2_s8>:
    2318:	00 24       	eor	r0, r0
    231a:	a7 fd       	sbrc	r26, 7
    231c:	00 94       	com	r0
    231e:	2a 17       	cp	r18, r26
    2320:	30 05       	cpc	r19, r0
    2322:	40 05       	cpc	r20, r0
    2324:	50 05       	cpc	r21, r0
    2326:	60 05       	cpc	r22, r0
    2328:	70 05       	cpc	r23, r0
    232a:	80 05       	cpc	r24, r0
    232c:	90 05       	cpc	r25, r0
    232e:	08 95       	ret

00002330 <__udivmodhi4>:
    2330:	aa 1b       	sub	r26, r26
    2332:	bb 1b       	sub	r27, r27
    2334:	51 e1       	ldi	r21, 0x11	; 17
    2336:	07 c0       	rjmp	.+14     	; 0x2346 <__udivmodhi4_ep>

00002338 <__udivmodhi4_loop>:
    2338:	aa 1f       	adc	r26, r26
    233a:	bb 1f       	adc	r27, r27
    233c:	a6 17       	cp	r26, r22
    233e:	b7 07       	cpc	r27, r23
    2340:	10 f0       	brcs	.+4      	; 0x2346 <__udivmodhi4_ep>
    2342:	a6 1b       	sub	r26, r22
    2344:	b7 0b       	sbc	r27, r23

00002346 <__udivmodhi4_ep>:
    2346:	88 1f       	adc	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	5a 95       	dec	r21
    234c:	a9 f7       	brne	.-22     	; 0x2338 <__udivmodhi4_loop>
    234e:	80 95       	com	r24
    2350:	90 95       	com	r25
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	08 95       	ret

00002358 <__umulhisi3>:
    2358:	a2 9f       	mul	r26, r18
    235a:	b0 01       	movw	r22, r0
    235c:	b3 9f       	mul	r27, r19
    235e:	c0 01       	movw	r24, r0
    2360:	a3 9f       	mul	r26, r19
    2362:	70 0d       	add	r23, r0
    2364:	81 1d       	adc	r24, r1
    2366:	11 24       	eor	r1, r1
    2368:	91 1d       	adc	r25, r1
    236a:	b2 9f       	mul	r27, r18
    236c:	70 0d       	add	r23, r0
    236e:	81 1d       	adc	r24, r1
    2370:	11 24       	eor	r1, r1
    2372:	91 1d       	adc	r25, r1
    2374:	08 95       	ret

00002376 <_exit>:
    2376:	f8 94       	cli

00002378 <__stop_program>:
    2378:	ff cf       	rjmp	.-2      	; 0x2378 <__stop_program>
